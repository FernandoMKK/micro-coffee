
7seg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000250  000002c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000250  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002c6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a70  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007ec  00000000  00000000  00000e08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000034f  00000000  00000000  000015f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b0  00000000  00000000  00001944  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000474  00000000  00000000  000019f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000176  00000000  00000000  00001e68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001fde  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
   4:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__vector_1>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	8c 00       	.word	0x008c	; ????
  6a:	99 00       	.word	0x0099	; ????
  6c:	a6 00       	.word	0x00a6	; ????
  6e:	b3 00       	.word	0x00b3	; ????
  70:	c0 00       	.word	0x00c0	; ????
  72:	cd 00       	.word	0x00cd	; ????
  74:	da 00       	.word	0x00da	; ????

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf ef       	ldi	r28, 0xFF	; 255
  7c:	d8 e0       	ldi	r29, 0x08	; 8
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_copy_data>:
  82:	11 e0       	ldi	r17, 0x01	; 1
  84:	a0 e0       	ldi	r26, 0x00	; 0
  86:	b1 e0       	ldi	r27, 0x01	; 1
  88:	e0 e5       	ldi	r30, 0x50	; 80
  8a:	f2 e0       	ldi	r31, 0x02	; 2
  8c:	02 c0       	rjmp	.+4      	; 0x92 <__do_copy_data+0x10>
  8e:	05 90       	lpm	r0, Z+
  90:	0d 92       	st	X+, r0
  92:	a2 30       	cpi	r26, 0x02	; 2
  94:	b1 07       	cpc	r27, r17
  96:	d9 f7       	brne	.-10     	; 0x8e <__do_copy_data+0xc>
  98:	0e 94 00 01 	call	0x200	; 0x200 <main>
  9c:	0c 94 26 01 	jmp	0x24c	; 0x24c <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <_ZN11Display7segC1Ev>:
Display7seg::Display7seg()
{
	//ctor
}

Display7seg::~Display7seg()
  a4:	08 95       	ret

000000a6 <_ZN11Display7seg13attachToPortsEhhhh>:
{
	//dtor
}

void Display7seg::attachToPorts(unsigned char d0, unsigned char d1, unsigned char d2, unsigned char d3)
{
  a6:	0f 93       	push	r16
	set_bit(PORTC, d0);
  a8:	38 b1       	in	r19, 0x08	; 8
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	fc 01       	movw	r30, r24
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <_ZN11Display7seg13attachToPortsEhhhh+0x10>
  b2:	ee 0f       	add	r30, r30
  b4:	ff 1f       	adc	r31, r31
  b6:	6a 95       	dec	r22
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <_ZN11Display7seg13attachToPortsEhhhh+0xc>
  ba:	bf 01       	movw	r22, r30
  bc:	63 2b       	or	r22, r19
  be:	68 b9       	out	0x08, r22	; 8
	set_bit(PORTC, d1);
  c0:	38 b1       	in	r19, 0x08	; 8
  c2:	bc 01       	movw	r22, r24
  c4:	02 c0       	rjmp	.+4      	; 0xca <_ZN11Display7seg13attachToPortsEhhhh+0x24>
  c6:	66 0f       	add	r22, r22
  c8:	77 1f       	adc	r23, r23
  ca:	4a 95       	dec	r20
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <_ZN11Display7seg13attachToPortsEhhhh+0x20>
  ce:	ab 01       	movw	r20, r22
  d0:	43 2b       	or	r20, r19
  d2:	48 b9       	out	0x08, r20	; 8
	set_bit(PORTC, d2);
  d4:	48 b1       	in	r20, 0x08	; 8
  d6:	fc 01       	movw	r30, r24
  d8:	02 c0       	rjmp	.+4      	; 0xde <_ZN11Display7seg13attachToPortsEhhhh+0x38>
  da:	ee 0f       	add	r30, r30
  dc:	ff 1f       	adc	r31, r31
  de:	2a 95       	dec	r18
  e0:	e2 f7       	brpl	.-8      	; 0xda <_ZN11Display7seg13attachToPortsEhhhh+0x34>
  e2:	9f 01       	movw	r18, r30
  e4:	24 2b       	or	r18, r20
  e6:	28 b9       	out	0x08, r18	; 8
	set_bit(PORTC, d3);
  e8:	28 b1       	in	r18, 0x08	; 8
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <_ZN11Display7seg13attachToPortsEhhhh+0x4a>
  ec:	88 0f       	add	r24, r24
  ee:	99 1f       	adc	r25, r25
  f0:	0a 95       	dec	r16
  f2:	e2 f7       	brpl	.-8      	; 0xec <_ZN11Display7seg13attachToPortsEhhhh+0x46>
  f4:	82 2b       	or	r24, r18
  f6:	88 b9       	out	0x08, r24	; 8
}
  f8:	0f 91       	pop	r16
  fa:	08 95       	ret

000000fc <_ZN11Display7seg13updateDisplayEPVh>:

void Display7seg::updateDisplay(volatile unsigned char *num)
{
	switch(*num){
  fc:	db 01       	movw	r26, r22
  fe:	ec 91       	ld	r30, X
 100:	8e 2f       	mov	r24, r30
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	fc 01       	movw	r30, r24
 106:	31 97       	sbiw	r30, 0x01	; 1
 108:	e7 30       	cpi	r30, 0x07	; 7
 10a:	f1 05       	cpc	r31, r1
 10c:	08 f0       	brcs	.+2      	; 0x110 <_ZN11Display7seg13updateDisplayEPVh+0x14>
 10e:	5e c0       	rjmp	.+188    	; 0x1cc <_ZN11Display7seg13updateDisplayEPVh+0xd0>
 110:	ec 5c       	subi	r30, 0xCC	; 204
 112:	ff 4f       	sbci	r31, 0xFF	; 255
 114:	0c 94 20 01 	jmp	0x240	; 0x240 <__tablejump2__>
		case 1:
		set_bit(PORTC, PORTC0);
 118:	88 b1       	in	r24, 0x08	; 8
 11a:	81 60       	ori	r24, 0x01	; 1
 11c:	88 b9       	out	0x08, r24	; 8
		clr_bit(PORTC, PORTC1);
 11e:	88 b1       	in	r24, 0x08	; 8
 120:	8d 7f       	andi	r24, 0xFD	; 253
 122:	88 b9       	out	0x08, r24	; 8
		clr_bit(PORTC, PORTC2);
 124:	88 b1       	in	r24, 0x08	; 8
 126:	8b 7f       	andi	r24, 0xFB	; 251
 128:	88 b9       	out	0x08, r24	; 8
		clr_bit(PORTC, PORTC3);
 12a:	88 b1       	in	r24, 0x08	; 8
 12c:	87 7f       	andi	r24, 0xF7	; 247
 12e:	88 b9       	out	0x08, r24	; 8
		break;
 130:	08 95       	ret
		
		case 2:
		clr_bit(PORTC, PORTC0);
 132:	88 b1       	in	r24, 0x08	; 8
 134:	8e 7f       	andi	r24, 0xFE	; 254
 136:	88 b9       	out	0x08, r24	; 8
		set_bit(PORTC, PORTC1);
 138:	88 b1       	in	r24, 0x08	; 8
 13a:	82 60       	ori	r24, 0x02	; 2
 13c:	88 b9       	out	0x08, r24	; 8
		clr_bit(PORTC, PORTC2);
 13e:	88 b1       	in	r24, 0x08	; 8
 140:	8b 7f       	andi	r24, 0xFB	; 251
 142:	88 b9       	out	0x08, r24	; 8
		clr_bit(PORTC, PORTC3);
 144:	88 b1       	in	r24, 0x08	; 8
 146:	87 7f       	andi	r24, 0xF7	; 247
 148:	88 b9       	out	0x08, r24	; 8
		break;
 14a:	08 95       	ret
		
		case 3:
		set_bit(PORTC, PORTC0);
 14c:	88 b1       	in	r24, 0x08	; 8
 14e:	81 60       	ori	r24, 0x01	; 1
 150:	88 b9       	out	0x08, r24	; 8
		set_bit(PORTC, PORTC1);
 152:	88 b1       	in	r24, 0x08	; 8
 154:	82 60       	ori	r24, 0x02	; 2
 156:	88 b9       	out	0x08, r24	; 8
		clr_bit(PORTC, PORTC2);
 158:	88 b1       	in	r24, 0x08	; 8
 15a:	8b 7f       	andi	r24, 0xFB	; 251
 15c:	88 b9       	out	0x08, r24	; 8
		clr_bit(PORTC, PORTC3);
 15e:	88 b1       	in	r24, 0x08	; 8
 160:	87 7f       	andi	r24, 0xF7	; 247
 162:	88 b9       	out	0x08, r24	; 8
		break;
 164:	08 95       	ret
		
		case 4:
		clr_bit(PORTC, PORTC0);
 166:	88 b1       	in	r24, 0x08	; 8
 168:	8e 7f       	andi	r24, 0xFE	; 254
 16a:	88 b9       	out	0x08, r24	; 8
		clr_bit(PORTC, PORTC1);
 16c:	88 b1       	in	r24, 0x08	; 8
 16e:	8d 7f       	andi	r24, 0xFD	; 253
 170:	88 b9       	out	0x08, r24	; 8
		set_bit(PORTC, PORTC2);
 172:	88 b1       	in	r24, 0x08	; 8
 174:	84 60       	ori	r24, 0x04	; 4
 176:	88 b9       	out	0x08, r24	; 8
		clr_bit(PORTC, PORTC3);
 178:	88 b1       	in	r24, 0x08	; 8
 17a:	87 7f       	andi	r24, 0xF7	; 247
 17c:	88 b9       	out	0x08, r24	; 8
		break;
 17e:	08 95       	ret
		
		case 5:
		set_bit(PORTC, PORTC0);
 180:	88 b1       	in	r24, 0x08	; 8
 182:	81 60       	ori	r24, 0x01	; 1
 184:	88 b9       	out	0x08, r24	; 8
		clr_bit(PORTC, PORTC1);
 186:	88 b1       	in	r24, 0x08	; 8
 188:	8d 7f       	andi	r24, 0xFD	; 253
 18a:	88 b9       	out	0x08, r24	; 8
		set_bit(PORTC, PORTC2);
 18c:	88 b1       	in	r24, 0x08	; 8
 18e:	84 60       	ori	r24, 0x04	; 4
 190:	88 b9       	out	0x08, r24	; 8
		clr_bit(PORTC, PORTC3);
 192:	88 b1       	in	r24, 0x08	; 8
 194:	87 7f       	andi	r24, 0xF7	; 247
 196:	88 b9       	out	0x08, r24	; 8
		break;
 198:	08 95       	ret
		
		case 6:
		clr_bit(PORTC, PORTC0);
 19a:	88 b1       	in	r24, 0x08	; 8
 19c:	8e 7f       	andi	r24, 0xFE	; 254
 19e:	88 b9       	out	0x08, r24	; 8
		set_bit(PORTC, PORTC1);
 1a0:	88 b1       	in	r24, 0x08	; 8
 1a2:	82 60       	ori	r24, 0x02	; 2
 1a4:	88 b9       	out	0x08, r24	; 8
		set_bit(PORTC, PORTC2);
 1a6:	88 b1       	in	r24, 0x08	; 8
 1a8:	84 60       	ori	r24, 0x04	; 4
 1aa:	88 b9       	out	0x08, r24	; 8
		clr_bit(PORTC, PORTC3);
 1ac:	88 b1       	in	r24, 0x08	; 8
 1ae:	87 7f       	andi	r24, 0xF7	; 247
 1b0:	88 b9       	out	0x08, r24	; 8
		break;
 1b2:	08 95       	ret
		
		case 7:
		set_bit(PORTC, PORTC0);
 1b4:	88 b1       	in	r24, 0x08	; 8
 1b6:	81 60       	ori	r24, 0x01	; 1
 1b8:	88 b9       	out	0x08, r24	; 8
		set_bit(PORTC, PORTC1);
 1ba:	88 b1       	in	r24, 0x08	; 8
 1bc:	82 60       	ori	r24, 0x02	; 2
 1be:	88 b9       	out	0x08, r24	; 8
		set_bit(PORTC, PORTC2);
 1c0:	88 b1       	in	r24, 0x08	; 8
 1c2:	84 60       	ori	r24, 0x04	; 4
 1c4:	88 b9       	out	0x08, r24	; 8
		clr_bit(PORTC, PORTC3);
 1c6:	88 b1       	in	r24, 0x08	; 8
 1c8:	87 7f       	andi	r24, 0xF7	; 247
 1ca:	88 b9       	out	0x08, r24	; 8
 1cc:	08 95       	ret

000001ce <__vector_1>:
#include <avr/interrupt.h>

volatile unsigned char menu_index = 1;

ISR(INT0_vect)
{
 1ce:	1f 92       	push	r1
 1d0:	0f 92       	push	r0
 1d2:	0f b6       	in	r0, 0x3f	; 63
 1d4:	0f 92       	push	r0
 1d6:	11 24       	eor	r1, r1
 1d8:	8f 93       	push	r24
	if(menu_index < 7)
 1da:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1de:	87 30       	cpi	r24, 0x07	; 7
 1e0:	30 f4       	brcc	.+12     	; 0x1ee <__vector_1+0x20>
		menu_index++;
 1e2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1e6:	8f 5f       	subi	r24, 0xFF	; 255
 1e8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 1ec:	03 c0       	rjmp	.+6      	; 0x1f4 <__vector_1+0x26>
	else
		menu_index = 1;
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
 1f4:	8f 91       	pop	r24
 1f6:	0f 90       	pop	r0
 1f8:	0f be       	out	0x3f, r0	; 63
 1fa:	0f 90       	pop	r0
 1fc:	1f 90       	pop	r1
 1fe:	18 95       	reti

00000200 <main>:

int main(void)
{
 200:	cf 93       	push	r28
 202:	df 93       	push	r29
 204:	00 d0       	rcall	.+0      	; 0x206 <main+0x6>
 206:	00 d0       	rcall	.+0      	; 0x208 <main+0x8>
 208:	cd b7       	in	r28, 0x3d	; 61
 20a:	de b7       	in	r29, 0x3e	; 62
    Display7seg myDisplay;
 20c:	ce 01       	movw	r24, r28
 20e:	01 96       	adiw	r24, 0x01	; 1
 210:	0e 94 52 00 	call	0xa4	; 0xa4 <_ZN11Display7segC1Ev>
	
	/*--Setting the direction of the ports--*/
	DDRD = 0x00; //Sets the button (PORTD2) as input
 214:	1a b8       	out	0x0a, r1	; 10
	myDisplay.attachToPorts(PORTC0, PORTC1, PORTC2, PORTC3);
 216:	03 e0       	ldi	r16, 0x03	; 3
 218:	22 e0       	ldi	r18, 0x02	; 2
 21a:	41 e0       	ldi	r20, 0x01	; 1
 21c:	60 e0       	ldi	r22, 0x00	; 0
 21e:	ce 01       	movw	r24, r28
 220:	01 96       	adiw	r24, 0x01	; 1
 222:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZN11Display7seg13attachToPortsEhhhh>
	
	/*--Setting the interruption registers--*/
	EICRA = (1<<ISC01) | (1<<ISC00); //Trigs INT0 with rising-edge
 226:	83 e0       	ldi	r24, 0x03	; 3
 228:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
	EIMSK = (1<<INT0); //Enables the INT0 interrupt
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	8d bb       	out	0x1d, r24	; 29
	sei(); //Enables global interrupt
 230:	78 94       	sei
	
	
    while (1) 
    {
		myDisplay.updateDisplay(&menu_index);			
 232:	60 e0       	ldi	r22, 0x00	; 0
 234:	71 e0       	ldi	r23, 0x01	; 1
 236:	ce 01       	movw	r24, r28
 238:	01 96       	adiw	r24, 0x01	; 1
 23a:	0e 94 7e 00 	call	0xfc	; 0xfc <_ZN11Display7seg13updateDisplayEPVh>
 23e:	f9 cf       	rjmp	.-14     	; 0x232 <main+0x32>

00000240 <__tablejump2__>:
 240:	ee 0f       	add	r30, r30
 242:	ff 1f       	adc	r31, r31
 244:	05 90       	lpm	r0, Z+
 246:	f4 91       	lpm	r31, Z
 248:	e0 2d       	mov	r30, r0
 24a:	09 94       	ijmp

0000024c <_exit>:
 24c:	f8 94       	cli

0000024e <__stop_program>:
 24e:	ff cf       	rjmp	.-2      	; 0x24e <__stop_program>
