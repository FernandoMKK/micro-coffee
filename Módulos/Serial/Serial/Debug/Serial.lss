
Serial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000066  00800100  000004aa  0000053e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800166  00800166  000005a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000614  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000119d  00000000  00000000  000006a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000091a  00000000  00000000  00001841  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005e7  00000000  00000000  0000215b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000140  00000000  00000000  00002744  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ea  00000000  00000000  00002884  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004fa  00000000  00000000  00002e6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00003368  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ea       	ldi	r30, 0xAA	; 170
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 36       	cpi	r26, 0x66	; 102
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e6       	ldi	r26, 0x66	; 102
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 36       	cpi	r26, 0x6A	; 106
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  9e:	0c 94 53 02 	jmp	0x4a6	; 0x4a6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_18>:

bool debug_mode = false;
volatile bool show_OK = false;

ISR(USART_RX_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
	command_OK = false;
  b4:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <command_OK>
	show_OK = false;
  b8:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <__data_end>
	char receivedByte = UDR0;
  bc:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	
	if (receivedByte == '0')
  c0:	80 33       	cpi	r24, 0x30	; 48
  c2:	11 f4       	brne	.+4      	; 0xc8 <__vector_18+0x22>
		_command = 0;
  c4:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <_command>
	if (receivedByte == '1')
  c8:	81 33       	cpi	r24, 0x31	; 49
  ca:	19 f4       	brne	.+6      	; 0xd2 <__vector_18+0x2c>
		_command = 1;
  cc:	91 e0       	ldi	r25, 0x01	; 1
  ce:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <_command>
	if (receivedByte == '2')
  d2:	82 33       	cpi	r24, 0x32	; 50
  d4:	19 f4       	brne	.+6      	; 0xdc <__vector_18+0x36>
		_command = 2;
  d6:	82 e0       	ldi	r24, 0x02	; 2
  d8:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <_command>
		
	command_OK = true;
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <command_OK>
}
  e2:	9f 91       	pop	r25
  e4:	8f 91       	pop	r24
  e6:	0f 90       	pop	r0
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	0f 90       	pop	r0
  ec:	1f 90       	pop	r1
  ee:	18 95       	reti

000000f0 <main>:

int main(void)
{
  f0:	cf 93       	push	r28
  f2:	df 93       	push	r29
  f4:	00 d0       	rcall	.+0      	; 0xf6 <main+0x6>
  f6:	00 d0       	rcall	.+0      	; 0xf8 <main+0x8>
  f8:	1f 92       	push	r1
  fa:	cd b7       	in	r28, 0x3d	; 61
  fc:	de b7       	in	r29, 0x3e	; 62
	Serial serial(9600,1,8,'N');
  fe:	0e e4       	ldi	r16, 0x4E	; 78
 100:	28 e0       	ldi	r18, 0x08	; 8
 102:	41 e0       	ldi	r20, 0x01	; 1
 104:	60 e8       	ldi	r22, 0x80	; 128
 106:	75 e2       	ldi	r23, 0x25	; 37
 108:	ce 01       	movw	r24, r28
 10a:	01 96       	adiw	r24, 0x01	; 1
 10c:	0e 94 a0 01 	call	0x340	; 0x340 <_ZN6SerialC1Ejhhh>
	serial.show_menu();
 110:	ce 01       	movw	r24, r28
 112:	01 96       	adiw	r24, 0x01	; 1
 114:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <_ZN6Serial9show_menuEv>
	
    while (1) 
    {
		if(command_OK)
 118:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <command_OK>
 11c:	88 23       	and	r24, r24
 11e:	09 f4       	brne	.+2      	; 0x122 <main+0x32>
 120:	43 c0       	rjmp	.+134    	; 0x1a8 <main+0xb8>
	    {
		    switch(_command){
 122:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <_command>
 126:	81 30       	cpi	r24, 0x01	; 1
 128:	f9 f0       	breq	.+62     	; 0x168 <main+0x78>
 12a:	18 f0       	brcs	.+6      	; 0x132 <main+0x42>
 12c:	82 30       	cpi	r24, 0x02	; 2
 12e:	79 f1       	breq	.+94     	; 0x18e <main+0x9e>
 130:	3b c0       	rjmp	.+118    	; 0x1a8 <main+0xb8>
			    case SHOW_PROFIT:
					if(debug_mode == true){
 132:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <debug_mode>
 136:	88 23       	and	r24, r24
 138:	59 f0       	breq	.+22     	; 0x150 <main+0x60>
						serial.transmit("mostrando profit");
 13a:	60 e0       	ldi	r22, 0x00	; 0
 13c:	71 e0       	ldi	r23, 0x01	; 1
 13e:	ce 01       	movw	r24, r28
 140:	01 96       	adiw	r24, 0x01	; 1
 142:	0e 94 ce 01 	call	0x39c	; 0x39c <_ZN6Serial8transmitEPc>
						serial.transmitChar(NEWLINE);
 146:	6d e0       	ldi	r22, 0x0D	; 13
 148:	ce 01       	movw	r24, r28
 14a:	01 96       	adiw	r24, 0x01	; 1
 14c:	0e 94 db 01 	call	0x3b6	; 0x3b6 <_ZN6Serial12transmitCharEc>
					}
					if(show_OK == false){
 150:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <__data_end>
 154:	81 11       	cpse	r24, r1
 156:	28 c0       	rjmp	.+80     	; 0x1a8 <main+0xb8>
						serial.show_profit();
 158:	ce 01       	movw	r24, r28
 15a:	01 96       	adiw	r24, 0x01	; 1
 15c:	0e 94 02 02 	call	0x404	; 0x404 <_ZN6Serial11show_profitEv>
						show_OK = true;
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <__data_end>
 166:	20 c0       	rjmp	.+64     	; 0x1a8 <main+0xb8>
					}
					break;
			    
			    case DEBUG_MODE:
					if(debug_mode == true){
 168:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <debug_mode>
 16c:	88 23       	and	r24, r24
 16e:	59 f0       	breq	.+22     	; 0x186 <main+0x96>
						serial.transmit("Modo debug");
 170:	61 e1       	ldi	r22, 0x11	; 17
 172:	71 e0       	ldi	r23, 0x01	; 1
 174:	ce 01       	movw	r24, r28
 176:	01 96       	adiw	r24, 0x01	; 1
 178:	0e 94 ce 01 	call	0x39c	; 0x39c <_ZN6Serial8transmitEPc>
						serial.transmitChar(NEWLINE);
 17c:	6d e0       	ldi	r22, 0x0D	; 13
 17e:	ce 01       	movw	r24, r28
 180:	01 96       	adiw	r24, 0x01	; 1
 182:	0e 94 db 01 	call	0x3b6	; 0x3b6 <_ZN6Serial12transmitCharEc>
					}
					debug_mode = true;
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <debug_mode>
					break;
 18c:	0d c0       	rjmp	.+26     	; 0x1a8 <main+0xb8>
			    
			    case EXIT:
					debug_mode = false;
 18e:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <debug_mode>
					if(show_OK == false){
 192:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <__data_end>
 196:	81 11       	cpse	r24, r1
 198:	07 c0       	rjmp	.+14     	; 0x1a8 <main+0xb8>
						serial.show_menu();
 19a:	ce 01       	movw	r24, r28
 19c:	01 96       	adiw	r24, 0x01	; 1
 19e:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <_ZN6Serial9show_menuEv>
						show_OK = true;
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <__data_end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a8:	2f ef       	ldi	r18, 0xFF	; 255
 1aa:	84 e3       	ldi	r24, 0x34	; 52
 1ac:	9c e0       	ldi	r25, 0x0C	; 12
 1ae:	21 50       	subi	r18, 0x01	; 1
 1b0:	80 40       	sbci	r24, 0x00	; 0
 1b2:	90 40       	sbci	r25, 0x00	; 0
 1b4:	e1 f7       	brne	.-8      	; 0x1ae <main+0xbe>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <main+0xc8>
 1b8:	00 00       	nop
 1ba:	ae cf       	rjmp	.-164    	; 0x118 <main+0x28>

000001bc <_ZN6Serial11setBaudRateEj>:
	//dtor
}

void Serial::setBaudRate(unsigned int baud_rate)
{
	this->bd = baud_rate;
 1bc:	fc 01       	movw	r30, r24
 1be:	71 83       	std	Z+1, r23	; 0x01
 1c0:	60 83       	st	Z, r22
	unsigned int baud_prescale = (((F_CPU / (this->bd*16UL)))-1);
 1c2:	cb 01       	movw	r24, r22
 1c4:	a0 e0       	ldi	r26, 0x00	; 0
 1c6:	b0 e0       	ldi	r27, 0x00	; 0
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	aa 1f       	adc	r26, r26
 1ce:	bb 1f       	adc	r27, r27
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	aa 1f       	adc	r26, r26
 1d6:	bb 1f       	adc	r27, r27
 1d8:	9c 01       	movw	r18, r24
 1da:	ad 01       	movw	r20, r26
 1dc:	22 0f       	add	r18, r18
 1de:	33 1f       	adc	r19, r19
 1e0:	44 1f       	adc	r20, r20
 1e2:	55 1f       	adc	r21, r21
 1e4:	22 0f       	add	r18, r18
 1e6:	33 1f       	adc	r19, r19
 1e8:	44 1f       	adc	r20, r20
 1ea:	55 1f       	adc	r21, r21
 1ec:	60 e0       	ldi	r22, 0x00	; 0
 1ee:	74 e2       	ldi	r23, 0x24	; 36
 1f0:	84 ef       	ldi	r24, 0xF4	; 244
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	0e 94 31 02 	call	0x462	; 0x462 <__udivmodsi4>
 1f8:	21 50       	subi	r18, 0x01	; 1
 1fa:	31 09       	sbc	r19, r1
	
	UBRR0H = (baud_prescale >> 8);
 1fc:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = baud_prescale;
 200:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 204:	08 95       	ret

00000206 <_ZN6Serial10setStopBitEh>:
}

void Serial::setStopBit(unsigned char stop_bit)
{
	this->sb = stop_bit;
 206:	fc 01       	movw	r30, r24
 208:	62 83       	std	Z+2, r22	; 0x02
	
	switch(this->sb){
 20a:	61 30       	cpi	r22, 0x01	; 1
 20c:	19 f0       	breq	.+6      	; 0x214 <_ZN6Serial10setStopBitEh+0xe>
 20e:	62 30       	cpi	r22, 0x02	; 2
 210:	39 f0       	breq	.+14     	; 0x220 <_ZN6Serial10setStopBitEh+0x1a>
 212:	0c c0       	rjmp	.+24     	; 0x22c <_ZN6Serial10setStopBitEh+0x26>
		case 1:
			clr_bit(UCSR0C, USBS0);
 214:	e2 ec       	ldi	r30, 0xC2	; 194
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	80 81       	ld	r24, Z
 21a:	87 7f       	andi	r24, 0xF7	; 247
 21c:	80 83       	st	Z, r24
			break;
 21e:	08 95       	ret
		
		case 2:
			set_bit(UCSR0C, USBS0);
 220:	e2 ec       	ldi	r30, 0xC2	; 194
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	80 81       	ld	r24, Z
 226:	88 60       	ori	r24, 0x08	; 8
 228:	80 83       	st	Z, r24
			break;
 22a:	08 95       	ret
			
		default:
			clr_bit(UCSR0C, USBS0);
 22c:	e2 ec       	ldi	r30, 0xC2	; 194
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	80 81       	ld	r24, Z
 232:	87 7f       	andi	r24, 0xF7	; 247
 234:	80 83       	st	Z, r24
 236:	08 95       	ret

00000238 <_ZN6Serial11setByteSizeEh>:
		
}

void Serial::setByteSize(unsigned char byte_size)
{
	this->bs = byte_size;
 238:	fc 01       	movw	r30, r24
 23a:	63 83       	std	Z+3, r22	; 0x03
	
	switch(this->bs){
 23c:	67 30       	cpi	r22, 0x07	; 7
 23e:	19 f1       	breq	.+70     	; 0x286 <_ZN6Serial11setByteSizeEh+0x4e>
 240:	28 f4       	brcc	.+10     	; 0x24c <_ZN6Serial11setByteSizeEh+0x14>
 242:	65 30       	cpi	r22, 0x05	; 5
 244:	41 f0       	breq	.+16     	; 0x256 <_ZN6Serial11setByteSizeEh+0x1e>
 246:	66 30       	cpi	r22, 0x06	; 6
 248:	91 f0       	breq	.+36     	; 0x26e <_ZN6Serial11setByteSizeEh+0x36>
 24a:	41 c0       	rjmp	.+130    	; 0x2ce <_ZN6Serial11setByteSizeEh+0x96>
 24c:	68 30       	cpi	r22, 0x08	; 8
 24e:	39 f1       	breq	.+78     	; 0x29e <_ZN6Serial11setByteSizeEh+0x66>
 250:	69 30       	cpi	r22, 0x09	; 9
 252:	89 f1       	breq	.+98     	; 0x2b6 <_ZN6Serial11setByteSizeEh+0x7e>
 254:	3c c0       	rjmp	.+120    	; 0x2ce <_ZN6Serial11setByteSizeEh+0x96>
		case 5:
			clr_bit(UCSR0C, UCSZ02);
 256:	e2 ec       	ldi	r30, 0xC2	; 194
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	80 81       	ld	r24, Z
 25c:	8b 7f       	andi	r24, 0xFB	; 251
 25e:	80 83       	st	Z, r24
			clr_bit(UCSR0C, UCSZ01);
 260:	80 81       	ld	r24, Z
 262:	8b 7f       	andi	r24, 0xFB	; 251
 264:	80 83       	st	Z, r24
			clr_bit(UCSR0C, UCSZ00);
 266:	80 81       	ld	r24, Z
 268:	8d 7f       	andi	r24, 0xFD	; 253
 26a:	80 83       	st	Z, r24
			break;
 26c:	08 95       	ret
			
		case 6:
			clr_bit(UCSR0C, UCSZ02);
 26e:	e2 ec       	ldi	r30, 0xC2	; 194
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	80 81       	ld	r24, Z
 274:	8b 7f       	andi	r24, 0xFB	; 251
 276:	80 83       	st	Z, r24
			clr_bit(UCSR0C, UCSZ01);
 278:	80 81       	ld	r24, Z
 27a:	8b 7f       	andi	r24, 0xFB	; 251
 27c:	80 83       	st	Z, r24
			set_bit(UCSR0C, UCSZ00);
 27e:	80 81       	ld	r24, Z
 280:	82 60       	ori	r24, 0x02	; 2
 282:	80 83       	st	Z, r24
			break;
 284:	08 95       	ret
			
		case 7:
			clr_bit(UCSR0C, UCSZ02);
 286:	e2 ec       	ldi	r30, 0xC2	; 194
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	80 81       	ld	r24, Z
 28c:	8b 7f       	andi	r24, 0xFB	; 251
 28e:	80 83       	st	Z, r24
			set_bit(UCSR0C, UCSZ01);
 290:	80 81       	ld	r24, Z
 292:	84 60       	ori	r24, 0x04	; 4
 294:	80 83       	st	Z, r24
			clr_bit(UCSR0C, UCSZ00);
 296:	80 81       	ld	r24, Z
 298:	8d 7f       	andi	r24, 0xFD	; 253
 29a:	80 83       	st	Z, r24
			break;
 29c:	08 95       	ret
			
		case 8:
			clr_bit(UCSR0C, UCSZ02);
 29e:	e2 ec       	ldi	r30, 0xC2	; 194
 2a0:	f0 e0       	ldi	r31, 0x00	; 0
 2a2:	80 81       	ld	r24, Z
 2a4:	8b 7f       	andi	r24, 0xFB	; 251
 2a6:	80 83       	st	Z, r24
			set_bit(UCSR0C, UCSZ01);
 2a8:	80 81       	ld	r24, Z
 2aa:	84 60       	ori	r24, 0x04	; 4
 2ac:	80 83       	st	Z, r24
			set_bit(UCSR0C, UCSZ00);
 2ae:	80 81       	ld	r24, Z
 2b0:	82 60       	ori	r24, 0x02	; 2
 2b2:	80 83       	st	Z, r24
			break;
 2b4:	08 95       	ret
			
		case 9:
			set_bit(UCSR0C, UCSZ02);
 2b6:	e2 ec       	ldi	r30, 0xC2	; 194
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	80 81       	ld	r24, Z
 2bc:	84 60       	ori	r24, 0x04	; 4
 2be:	80 83       	st	Z, r24
			set_bit(UCSR0C, UCSZ01);
 2c0:	80 81       	ld	r24, Z
 2c2:	84 60       	ori	r24, 0x04	; 4
 2c4:	80 83       	st	Z, r24
			set_bit(UCSR0C, UCSZ00);
 2c6:	80 81       	ld	r24, Z
 2c8:	82 60       	ori	r24, 0x02	; 2
 2ca:	80 83       	st	Z, r24
			break;
 2cc:	08 95       	ret
			
		default:
			clr_bit(UCSR0C, UCSZ02);
 2ce:	e2 ec       	ldi	r30, 0xC2	; 194
 2d0:	f0 e0       	ldi	r31, 0x00	; 0
 2d2:	80 81       	ld	r24, Z
 2d4:	8b 7f       	andi	r24, 0xFB	; 251
 2d6:	80 83       	st	Z, r24
			set_bit(UCSR0C, UCSZ01);
 2d8:	80 81       	ld	r24, Z
 2da:	84 60       	ori	r24, 0x04	; 4
 2dc:	80 83       	st	Z, r24
			set_bit(UCSR0C, UCSZ00);
 2de:	80 81       	ld	r24, Z
 2e0:	82 60       	ori	r24, 0x02	; 2
 2e2:	80 83       	st	Z, r24
 2e4:	08 95       	ret

000002e6 <_ZN6Serial9setParityEh>:
	}
}

void Serial::setParity(unsigned char parity)
{
	this->pr = parity;
 2e6:	fc 01       	movw	r30, r24
 2e8:	64 83       	std	Z+4, r22	; 0x04
	
	switch(this->pr){
 2ea:	6e 34       	cpi	r22, 0x4E	; 78
 2ec:	29 f0       	breq	.+10     	; 0x2f8 <_ZN6Serial9setParityEh+0x12>
 2ee:	6f 34       	cpi	r22, 0x4F	; 79
 2f0:	a9 f0       	breq	.+42     	; 0x31c <_ZN6Serial9setParityEh+0x36>
 2f2:	65 34       	cpi	r22, 0x45	; 69
 2f4:	e1 f4       	brne	.+56     	; 0x32e <_ZN6Serial9setParityEh+0x48>
 2f6:	09 c0       	rjmp	.+18     	; 0x30a <_ZN6Serial9setParityEh+0x24>
		case 'N':
			clr_bit(UCSR0C, UPM01);
 2f8:	e2 ec       	ldi	r30, 0xC2	; 194
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	80 81       	ld	r24, Z
 2fe:	8f 7d       	andi	r24, 0xDF	; 223
 300:	80 83       	st	Z, r24
			clr_bit(UCSR0C, UPM00);
 302:	80 81       	ld	r24, Z
 304:	8f 7e       	andi	r24, 0xEF	; 239
 306:	80 83       	st	Z, r24
			break;
 308:	08 95       	ret
		
		case 'E':
			set_bit(UCSR0C, UPM01);
 30a:	e2 ec       	ldi	r30, 0xC2	; 194
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	80 81       	ld	r24, Z
 310:	80 62       	ori	r24, 0x20	; 32
 312:	80 83       	st	Z, r24
			set_bit(UCSR0C, UPM00);
 314:	80 81       	ld	r24, Z
 316:	80 61       	ori	r24, 0x10	; 16
 318:	80 83       	st	Z, r24
			break;
 31a:	08 95       	ret
		
		case 'O':
			set_bit(UCSR0C, UPM01);
 31c:	e2 ec       	ldi	r30, 0xC2	; 194
 31e:	f0 e0       	ldi	r31, 0x00	; 0
 320:	80 81       	ld	r24, Z
 322:	80 62       	ori	r24, 0x20	; 32
 324:	80 83       	st	Z, r24
			clr_bit(UCSR0C, UPM00);
 326:	80 81       	ld	r24, Z
 328:	8f 7e       	andi	r24, 0xEF	; 239
 32a:	80 83       	st	Z, r24
			break;
 32c:	08 95       	ret
		default:
			clr_bit(UCSR0C, UPM01);
 32e:	e2 ec       	ldi	r30, 0xC2	; 194
 330:	f0 e0       	ldi	r31, 0x00	; 0
 332:	80 81       	ld	r24, Z
 334:	8f 7d       	andi	r24, 0xDF	; 223
 336:	80 83       	st	Z, r24
			clr_bit(UCSR0C, UPM00);
 338:	80 81       	ld	r24, Z
 33a:	8f 7e       	andi	r24, 0xEF	; 239
 33c:	80 83       	st	Z, r24
 33e:	08 95       	ret

00000340 <_ZN6SerialC1Ejhhh>:
 *  Author: Fernando Kirchner
 */ 

#include "serial.h"

Serial::Serial(unsigned int baud_rate, unsigned char stop_bit, unsigned char byte_size, unsigned char parity)
 340:	ff 92       	push	r15
 342:	0f 93       	push	r16
 344:	1f 93       	push	r17
 346:	cf 93       	push	r28
 348:	df 93       	push	r29
 34a:	ec 01       	movw	r28, r24
 34c:	f4 2e       	mov	r15, r20
 34e:	12 2f       	mov	r17, r18
{
	setBaudRate(baud_rate);
 350:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN6Serial11setBaudRateEj>
	setStopBit(stop_bit);
 354:	6f 2d       	mov	r22, r15
 356:	ce 01       	movw	r24, r28
 358:	0e 94 03 01 	call	0x206	; 0x206 <_ZN6Serial10setStopBitEh>
	setByteSize(byte_size);
 35c:	61 2f       	mov	r22, r17
 35e:	ce 01       	movw	r24, r28
 360:	0e 94 1c 01 	call	0x238	; 0x238 <_ZN6Serial11setByteSizeEh>
	setParity(parity);
 364:	60 2f       	mov	r22, r16
 366:	ce 01       	movw	r24, r28
 368:	0e 94 73 01 	call	0x2e6	; 0x2e6 <_ZN6Serial9setParityEh>
	
	/*-- Setting direction registers --*/
	DDRD = 0b00000010;
 36c:	82 e0       	ldi	r24, 0x02	; 2
 36e:	8a b9       	out	0x0a, r24	; 10
	
	/* -- Setting serial registers --*/
	UCSR0B = (1<<TXEN0) | (1<<RXEN0); //Enables the TX and RX
 370:	e1 ec       	ldi	r30, 0xC1	; 193
 372:	f0 e0       	ldi	r31, 0x00	; 0
 374:	88 e1       	ldi	r24, 0x18	; 24
 376:	80 83       	st	Z, r24
	UCSR0B |= (1<<RXCIE0); //Enables the RX interrupt
 378:	80 81       	ld	r24, Z
 37a:	80 68       	ori	r24, 0x80	; 128
 37c:	80 83       	st	Z, r24
	
	//Sets assync mode
	clr_bit(UCSR0C, UMSEL01);
 37e:	e2 ec       	ldi	r30, 0xC2	; 194
 380:	f0 e0       	ldi	r31, 0x00	; 0
 382:	80 81       	ld	r24, Z
 384:	8f 77       	andi	r24, 0x7F	; 127
 386:	80 83       	st	Z, r24
	clr_bit(UCSR0C, UMSEL00);
 388:	80 81       	ld	r24, Z
 38a:	8f 7b       	andi	r24, 0xBF	; 191
 38c:	80 83       	st	Z, r24
	
	sei(); //Enables global interrupt
 38e:	78 94       	sei
}
 390:	df 91       	pop	r29
 392:	cf 91       	pop	r28
 394:	1f 91       	pop	r17
 396:	0f 91       	pop	r16
 398:	ff 90       	pop	r15
 39a:	08 95       	ret

0000039c <_ZN6Serial8transmitEPc>:
			break;
	}
}

void Serial::transmit(char *data)
{
 39c:	fb 01       	movw	r30, r22
	while(*data != '\0'){
 39e:	90 81       	ld	r25, Z
 3a0:	99 23       	and	r25, r25
 3a2:	41 f0       	breq	.+16     	; 0x3b4 <_ZN6Serial8transmitEPc+0x18>
		while(!(UCSR0A & (1<<UDRE0))); //Waits for empty buffer to transmit
 3a4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 3a8:	85 ff       	sbrs	r24, 5
 3aa:	fc cf       	rjmp	.-8      	; 0x3a4 <_ZN6Serial8transmitEPc+0x8>
		
		//Put data into buffer and send data
		UDR0 = *data;
 3ac:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		data++;
 3b0:	31 96       	adiw	r30, 0x01	; 1
	}
}

void Serial::transmit(char *data)
{
	while(*data != '\0'){
 3b2:	f5 cf       	rjmp	.-22     	; 0x39e <_ZN6Serial8transmitEPc+0x2>
 3b4:	08 95       	ret

000003b6 <_ZN6Serial12transmitCharEc>:
	}
}

void Serial::transmitChar(char data)
{
	while(!(UCSR0A & (1<<UDRE0))); //Waits for empty buffer to transmit
 3b6:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 3ba:	85 ff       	sbrs	r24, 5
 3bc:	fc cf       	rjmp	.-8      	; 0x3b6 <_ZN6Serial12transmitCharEc>
	UDR0 = data; //Put data into buffer and send data
 3be:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 3c2:	08 95       	ret

000003c4 <_ZN6Serial9show_menuEv>:
}

void Serial::show_menu()
{
 3c4:	cf 93       	push	r28
 3c6:	df 93       	push	r29
 3c8:	ec 01       	movw	r28, r24
	this->transmit("0 - Mostrar Lucro");
 3ca:	6c e1       	ldi	r22, 0x1C	; 28
 3cc:	71 e0       	ldi	r23, 0x01	; 1
 3ce:	0e 94 ce 01 	call	0x39c	; 0x39c <_ZN6Serial8transmitEPc>
	this->transmitChar(NEWLINE);
 3d2:	6d e0       	ldi	r22, 0x0D	; 13
 3d4:	ce 01       	movw	r24, r28
 3d6:	0e 94 db 01 	call	0x3b6	; 0x3b6 <_ZN6Serial12transmitCharEc>
	
	this->transmit("1 - Debug");
 3da:	6e e2       	ldi	r22, 0x2E	; 46
 3dc:	71 e0       	ldi	r23, 0x01	; 1
 3de:	ce 01       	movw	r24, r28
 3e0:	0e 94 ce 01 	call	0x39c	; 0x39c <_ZN6Serial8transmitEPc>
	this->transmitChar(NEWLINE);
 3e4:	6d e0       	ldi	r22, 0x0D	; 13
 3e6:	ce 01       	movw	r24, r28
 3e8:	0e 94 db 01 	call	0x3b6	; 0x3b6 <_ZN6Serial12transmitCharEc>
	
	this->transmit("2 - Sair Debug");
 3ec:	68 e3       	ldi	r22, 0x38	; 56
 3ee:	71 e0       	ldi	r23, 0x01	; 1
 3f0:	ce 01       	movw	r24, r28
 3f2:	0e 94 ce 01 	call	0x39c	; 0x39c <_ZN6Serial8transmitEPc>
	this->transmitChar(NEWLINE);
 3f6:	6d e0       	ldi	r22, 0x0D	; 13
 3f8:	ce 01       	movw	r24, r28
 3fa:	0e 94 db 01 	call	0x3b6	; 0x3b6 <_ZN6Serial12transmitCharEc>
}
 3fe:	df 91       	pop	r29
 400:	cf 91       	pop	r28
 402:	08 95       	ret

00000404 <_ZN6Serial11show_profitEv>:

void Serial::show_profit()
{
 404:	cf 93       	push	r28
 406:	df 93       	push	r29
 408:	ec 01       	movw	r28, r24
	this->transmit("Peca 1: ");
 40a:	67 e4       	ldi	r22, 0x47	; 71
 40c:	71 e0       	ldi	r23, 0x01	; 1
 40e:	0e 94 ce 01 	call	0x39c	; 0x39c <_ZN6Serial8transmitEPc>
	this->transmit("xx");
 412:	60 e5       	ldi	r22, 0x50	; 80
 414:	71 e0       	ldi	r23, 0x01	; 1
 416:	ce 01       	movw	r24, r28
 418:	0e 94 ce 01 	call	0x39c	; 0x39c <_ZN6Serial8transmitEPc>
	this->transmitChar(NEWLINE);
 41c:	6d e0       	ldi	r22, 0x0D	; 13
 41e:	ce 01       	movw	r24, r28
 420:	0e 94 db 01 	call	0x3b6	; 0x3b6 <_ZN6Serial12transmitCharEc>
	this->transmit("Peca 2: ");
 424:	63 e5       	ldi	r22, 0x53	; 83
 426:	71 e0       	ldi	r23, 0x01	; 1
 428:	ce 01       	movw	r24, r28
 42a:	0e 94 ce 01 	call	0x39c	; 0x39c <_ZN6Serial8transmitEPc>
	this->transmit("xx");
 42e:	60 e5       	ldi	r22, 0x50	; 80
 430:	71 e0       	ldi	r23, 0x01	; 1
 432:	ce 01       	movw	r24, r28
 434:	0e 94 ce 01 	call	0x39c	; 0x39c <_ZN6Serial8transmitEPc>
	this->transmitChar(NEWLINE);
 438:	6d e0       	ldi	r22, 0x0D	; 13
 43a:	ce 01       	movw	r24, r28
 43c:	0e 94 db 01 	call	0x3b6	; 0x3b6 <_ZN6Serial12transmitCharEc>
	this->transmit("Peca 3: ");
 440:	6c e5       	ldi	r22, 0x5C	; 92
 442:	71 e0       	ldi	r23, 0x01	; 1
 444:	ce 01       	movw	r24, r28
 446:	0e 94 ce 01 	call	0x39c	; 0x39c <_ZN6Serial8transmitEPc>
	this->transmit("xx");
 44a:	60 e5       	ldi	r22, 0x50	; 80
 44c:	71 e0       	ldi	r23, 0x01	; 1
 44e:	ce 01       	movw	r24, r28
 450:	0e 94 ce 01 	call	0x39c	; 0x39c <_ZN6Serial8transmitEPc>
	this->transmitChar(NEWLINE);
 454:	6d e0       	ldi	r22, 0x0D	; 13
 456:	ce 01       	movw	r24, r28
 458:	0e 94 db 01 	call	0x3b6	; 0x3b6 <_ZN6Serial12transmitCharEc>
 45c:	df 91       	pop	r29
 45e:	cf 91       	pop	r28
 460:	08 95       	ret

00000462 <__udivmodsi4>:
 462:	a1 e2       	ldi	r26, 0x21	; 33
 464:	1a 2e       	mov	r1, r26
 466:	aa 1b       	sub	r26, r26
 468:	bb 1b       	sub	r27, r27
 46a:	fd 01       	movw	r30, r26
 46c:	0d c0       	rjmp	.+26     	; 0x488 <__udivmodsi4_ep>

0000046e <__udivmodsi4_loop>:
 46e:	aa 1f       	adc	r26, r26
 470:	bb 1f       	adc	r27, r27
 472:	ee 1f       	adc	r30, r30
 474:	ff 1f       	adc	r31, r31
 476:	a2 17       	cp	r26, r18
 478:	b3 07       	cpc	r27, r19
 47a:	e4 07       	cpc	r30, r20
 47c:	f5 07       	cpc	r31, r21
 47e:	20 f0       	brcs	.+8      	; 0x488 <__udivmodsi4_ep>
 480:	a2 1b       	sub	r26, r18
 482:	b3 0b       	sbc	r27, r19
 484:	e4 0b       	sbc	r30, r20
 486:	f5 0b       	sbc	r31, r21

00000488 <__udivmodsi4_ep>:
 488:	66 1f       	adc	r22, r22
 48a:	77 1f       	adc	r23, r23
 48c:	88 1f       	adc	r24, r24
 48e:	99 1f       	adc	r25, r25
 490:	1a 94       	dec	r1
 492:	69 f7       	brne	.-38     	; 0x46e <__udivmodsi4_loop>
 494:	60 95       	com	r22
 496:	70 95       	com	r23
 498:	80 95       	com	r24
 49a:	90 95       	com	r25
 49c:	9b 01       	movw	r18, r22
 49e:	ac 01       	movw	r20, r24
 4a0:	bd 01       	movw	r22, r26
 4a2:	cf 01       	movw	r24, r30
 4a4:	08 95       	ret

000004a6 <_exit>:
 4a6:	f8 94       	cli

000004a8 <__stop_program>:
 4a8:	ff cf       	rjmp	.-2      	; 0x4a8 <__stop_program>
