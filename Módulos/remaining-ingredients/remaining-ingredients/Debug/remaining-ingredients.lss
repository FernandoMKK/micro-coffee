
remaining-ingredients.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000126  00800100  000014ce  00001562  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  00800226  00800226  00001688  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001688  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000016e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  00001724  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001de0  00000000  00000000  00001854  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bdb  00000000  00000000  00003634  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b13  00000000  00000000  0000420f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000364  00000000  00000000  00004d24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000890  00000000  00000000  00005088  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d3f  00000000  00000000  00005918  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00006657  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 44 00 	jmp	0x88	; 0x88 <__dtors_end>
       4:	0c 94 7c 03 	jmp	0x6f8	; 0x6f8 <__vector_1>
       8:	0c 94 95 03 	jmp	0x72a	; 0x72a <__vector_2>
       c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      48:	0c 94 c4 03 	jmp	0x788	; 0x788 <__vector_18>
      4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      68:	a9 00       	.word	0x00a9	; ????
      6a:	b6 00       	.word	0x00b6	; ????
      6c:	c3 00       	.word	0x00c3	; ????
      6e:	d0 00       	.word	0x00d0	; ????
      70:	dd 00       	.word	0x00dd	; ????
      72:	ea 00       	.word	0x00ea	; ????
      74:	f7 00       	.word	0x00f7	; ????
      76:	e3 01       	movw	r28, r6
      78:	04 02       	muls	r16, r20
      7a:	2a 02       	muls	r18, r26
      7c:	55 02       	muls	r21, r21
      7e:	76 02       	muls	r23, r22
      80:	9c 02       	muls	r25, r28
      82:	bd 02       	muls	r27, r29

00000084 <__ctors_start>:
      84:	30 04       	cpc	r3, r0

00000086 <__ctors_end>:
      86:	37 04       	cpc	r3, r7

00000088 <__dtors_end>:
      88:	11 24       	eor	r1, r1
      8a:	1f be       	out	0x3f, r1	; 63
      8c:	cf ef       	ldi	r28, 0xFF	; 255
      8e:	d8 e0       	ldi	r29, 0x08	; 8
      90:	de bf       	out	0x3e, r29	; 62
      92:	cd bf       	out	0x3d, r28	; 61

00000094 <__do_copy_data>:
      94:	12 e0       	ldi	r17, 0x02	; 2
      96:	a0 e0       	ldi	r26, 0x00	; 0
      98:	b1 e0       	ldi	r27, 0x01	; 1
      9a:	ee ec       	ldi	r30, 0xCE	; 206
      9c:	f4 e1       	ldi	r31, 0x14	; 20
      9e:	02 c0       	rjmp	.+4      	; 0xa4 <__do_copy_data+0x10>
      a0:	05 90       	lpm	r0, Z+
      a2:	0d 92       	st	X+, r0
      a4:	a6 32       	cpi	r26, 0x26	; 38
      a6:	b1 07       	cpc	r27, r17
      a8:	d9 f7       	brne	.-10     	; 0xa0 <__do_copy_data+0xc>

000000aa <__do_clear_bss>:
      aa:	22 e0       	ldi	r18, 0x02	; 2
      ac:	a6 e2       	ldi	r26, 0x26	; 38
      ae:	b2 e0       	ldi	r27, 0x02	; 2
      b0:	01 c0       	rjmp	.+2      	; 0xb4 <.do_clear_bss_start>

000000b2 <.do_clear_bss_loop>:
      b2:	1d 92       	st	X+, r1

000000b4 <.do_clear_bss_start>:
      b4:	ae 33       	cpi	r26, 0x3E	; 62
      b6:	b2 07       	cpc	r27, r18
      b8:	e1 f7       	brne	.-8      	; 0xb2 <.do_clear_bss_loop>

000000ba <__do_global_ctors>:
      ba:	10 e0       	ldi	r17, 0x00	; 0
      bc:	c3 e4       	ldi	r28, 0x43	; 67
      be:	d0 e0       	ldi	r29, 0x00	; 0
      c0:	04 c0       	rjmp	.+8      	; 0xca <__do_global_ctors+0x10>
      c2:	21 97       	sbiw	r28, 0x01	; 1
      c4:	fe 01       	movw	r30, r28
      c6:	0e 94 6a 07 	call	0xed4	; 0xed4 <__tablejump2__>
      ca:	c2 34       	cpi	r28, 0x42	; 66
      cc:	d1 07       	cpc	r29, r17
      ce:	c9 f7       	brne	.-14     	; 0xc2 <__do_global_ctors+0x8>
      d0:	0e 94 0d 04 	call	0x81a	; 0x81a <main>
      d4:	0c 94 5a 0a 	jmp	0x14b4	; 0x14b4 <__do_global_dtors>

000000d8 <__bad_interrupt>:
      d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <_ZN11Display7segC1Ev>:
 *  Author: Fernando Kirchner
 */ 

#include "display7seg.h"

Display7seg::Display7seg()
      dc:	08 95       	ret

000000de <_ZN11Display7segD1Ev>:
{
	//ctor
}

Display7seg::~Display7seg()
      de:	08 95       	ret

000000e0 <_ZN11Display7seg13attachToPortsEhhhh>:
{
	//dtor
}

void Display7seg::attachToPorts(unsigned char d0, unsigned char d1, unsigned char d2, unsigned char d3)
{
      e0:	0f 93       	push	r16
	set_bit(DDRC, d0);
      e2:	37 b1       	in	r19, 0x07	; 7
      e4:	81 e0       	ldi	r24, 0x01	; 1
      e6:	90 e0       	ldi	r25, 0x00	; 0
      e8:	fc 01       	movw	r30, r24
      ea:	02 c0       	rjmp	.+4      	; 0xf0 <_ZN11Display7seg13attachToPortsEhhhh+0x10>
      ec:	ee 0f       	add	r30, r30
      ee:	ff 1f       	adc	r31, r31
      f0:	6a 95       	dec	r22
      f2:	e2 f7       	brpl	.-8      	; 0xec <_ZN11Display7seg13attachToPortsEhhhh+0xc>
      f4:	bf 01       	movw	r22, r30
      f6:	63 2b       	or	r22, r19
      f8:	67 b9       	out	0x07, r22	; 7
	set_bit(DDRC, d1);
      fa:	37 b1       	in	r19, 0x07	; 7
      fc:	bc 01       	movw	r22, r24
      fe:	02 c0       	rjmp	.+4      	; 0x104 <_ZN11Display7seg13attachToPortsEhhhh+0x24>
     100:	66 0f       	add	r22, r22
     102:	77 1f       	adc	r23, r23
     104:	4a 95       	dec	r20
     106:	e2 f7       	brpl	.-8      	; 0x100 <_ZN11Display7seg13attachToPortsEhhhh+0x20>
     108:	ab 01       	movw	r20, r22
     10a:	43 2b       	or	r20, r19
     10c:	47 b9       	out	0x07, r20	; 7
	set_bit(DDRC, d2);
     10e:	47 b1       	in	r20, 0x07	; 7
     110:	fc 01       	movw	r30, r24
     112:	02 c0       	rjmp	.+4      	; 0x118 <_ZN11Display7seg13attachToPortsEhhhh+0x38>
     114:	ee 0f       	add	r30, r30
     116:	ff 1f       	adc	r31, r31
     118:	2a 95       	dec	r18
     11a:	e2 f7       	brpl	.-8      	; 0x114 <_ZN11Display7seg13attachToPortsEhhhh+0x34>
     11c:	9f 01       	movw	r18, r30
     11e:	24 2b       	or	r18, r20
     120:	27 b9       	out	0x07, r18	; 7
	set_bit(DDRC, d3);
     122:	27 b1       	in	r18, 0x07	; 7
     124:	02 c0       	rjmp	.+4      	; 0x12a <_ZN11Display7seg13attachToPortsEhhhh+0x4a>
     126:	88 0f       	add	r24, r24
     128:	99 1f       	adc	r25, r25
     12a:	0a 95       	dec	r16
     12c:	e2 f7       	brpl	.-8      	; 0x126 <_ZN11Display7seg13attachToPortsEhhhh+0x46>
     12e:	82 2b       	or	r24, r18
     130:	87 b9       	out	0x07, r24	; 7
}
     132:	0f 91       	pop	r16
     134:	08 95       	ret

00000136 <_ZN11Display7seg13updateDisplayEPVh>:

void Display7seg::updateDisplay(volatile unsigned char *num)
{
	switch(*num){
     136:	db 01       	movw	r26, r22
     138:	ec 91       	ld	r30, X
     13a:	8e 2f       	mov	r24, r30
     13c:	90 e0       	ldi	r25, 0x00	; 0
     13e:	fc 01       	movw	r30, r24
     140:	31 97       	sbiw	r30, 0x01	; 1
     142:	e7 30       	cpi	r30, 0x07	; 7
     144:	f1 05       	cpc	r31, r1
     146:	08 f0       	brcs	.+2      	; 0x14a <_ZN11Display7seg13updateDisplayEPVh+0x14>
     148:	5e c0       	rjmp	.+188    	; 0x206 <_ZN11Display7seg13updateDisplayEPVh+0xd0>
     14a:	ec 5c       	subi	r30, 0xCC	; 204
     14c:	ff 4f       	sbci	r31, 0xFF	; 255
     14e:	0c 94 6a 07 	jmp	0xed4	; 0xed4 <__tablejump2__>
		case 1:
		set_bit(PORTC, PORTC0);
     152:	88 b1       	in	r24, 0x08	; 8
     154:	81 60       	ori	r24, 0x01	; 1
     156:	88 b9       	out	0x08, r24	; 8
		clr_bit(PORTC, PORTC1);
     158:	88 b1       	in	r24, 0x08	; 8
     15a:	8d 7f       	andi	r24, 0xFD	; 253
     15c:	88 b9       	out	0x08, r24	; 8
		clr_bit(PORTC, PORTC2);
     15e:	88 b1       	in	r24, 0x08	; 8
     160:	8b 7f       	andi	r24, 0xFB	; 251
     162:	88 b9       	out	0x08, r24	; 8
		clr_bit(PORTC, PORTC3);
     164:	88 b1       	in	r24, 0x08	; 8
     166:	87 7f       	andi	r24, 0xF7	; 247
     168:	88 b9       	out	0x08, r24	; 8
		break;
     16a:	08 95       	ret
		
		case 2:
		clr_bit(PORTC, PORTC0);
     16c:	88 b1       	in	r24, 0x08	; 8
     16e:	8e 7f       	andi	r24, 0xFE	; 254
     170:	88 b9       	out	0x08, r24	; 8
		set_bit(PORTC, PORTC1);
     172:	88 b1       	in	r24, 0x08	; 8
     174:	82 60       	ori	r24, 0x02	; 2
     176:	88 b9       	out	0x08, r24	; 8
		clr_bit(PORTC, PORTC2);
     178:	88 b1       	in	r24, 0x08	; 8
     17a:	8b 7f       	andi	r24, 0xFB	; 251
     17c:	88 b9       	out	0x08, r24	; 8
		clr_bit(PORTC, PORTC3);
     17e:	88 b1       	in	r24, 0x08	; 8
     180:	87 7f       	andi	r24, 0xF7	; 247
     182:	88 b9       	out	0x08, r24	; 8
		break;
     184:	08 95       	ret
		
		case 3:
		set_bit(PORTC, PORTC0);
     186:	88 b1       	in	r24, 0x08	; 8
     188:	81 60       	ori	r24, 0x01	; 1
     18a:	88 b9       	out	0x08, r24	; 8
		set_bit(PORTC, PORTC1);
     18c:	88 b1       	in	r24, 0x08	; 8
     18e:	82 60       	ori	r24, 0x02	; 2
     190:	88 b9       	out	0x08, r24	; 8
		clr_bit(PORTC, PORTC2);
     192:	88 b1       	in	r24, 0x08	; 8
     194:	8b 7f       	andi	r24, 0xFB	; 251
     196:	88 b9       	out	0x08, r24	; 8
		clr_bit(PORTC, PORTC3);
     198:	88 b1       	in	r24, 0x08	; 8
     19a:	87 7f       	andi	r24, 0xF7	; 247
     19c:	88 b9       	out	0x08, r24	; 8
		break;
     19e:	08 95       	ret
		
		case 4:
		clr_bit(PORTC, PORTC0);
     1a0:	88 b1       	in	r24, 0x08	; 8
     1a2:	8e 7f       	andi	r24, 0xFE	; 254
     1a4:	88 b9       	out	0x08, r24	; 8
		clr_bit(PORTC, PORTC1);
     1a6:	88 b1       	in	r24, 0x08	; 8
     1a8:	8d 7f       	andi	r24, 0xFD	; 253
     1aa:	88 b9       	out	0x08, r24	; 8
		set_bit(PORTC, PORTC2);
     1ac:	88 b1       	in	r24, 0x08	; 8
     1ae:	84 60       	ori	r24, 0x04	; 4
     1b0:	88 b9       	out	0x08, r24	; 8
		clr_bit(PORTC, PORTC3);
     1b2:	88 b1       	in	r24, 0x08	; 8
     1b4:	87 7f       	andi	r24, 0xF7	; 247
     1b6:	88 b9       	out	0x08, r24	; 8
		break;
     1b8:	08 95       	ret
		
		case 5:
		set_bit(PORTC, PORTC0);
     1ba:	88 b1       	in	r24, 0x08	; 8
     1bc:	81 60       	ori	r24, 0x01	; 1
     1be:	88 b9       	out	0x08, r24	; 8
		clr_bit(PORTC, PORTC1);
     1c0:	88 b1       	in	r24, 0x08	; 8
     1c2:	8d 7f       	andi	r24, 0xFD	; 253
     1c4:	88 b9       	out	0x08, r24	; 8
		set_bit(PORTC, PORTC2);
     1c6:	88 b1       	in	r24, 0x08	; 8
     1c8:	84 60       	ori	r24, 0x04	; 4
     1ca:	88 b9       	out	0x08, r24	; 8
		clr_bit(PORTC, PORTC3);
     1cc:	88 b1       	in	r24, 0x08	; 8
     1ce:	87 7f       	andi	r24, 0xF7	; 247
     1d0:	88 b9       	out	0x08, r24	; 8
		break;
     1d2:	08 95       	ret
		
		case 6:
		clr_bit(PORTC, PORTC0);
     1d4:	88 b1       	in	r24, 0x08	; 8
     1d6:	8e 7f       	andi	r24, 0xFE	; 254
     1d8:	88 b9       	out	0x08, r24	; 8
		set_bit(PORTC, PORTC1);
     1da:	88 b1       	in	r24, 0x08	; 8
     1dc:	82 60       	ori	r24, 0x02	; 2
     1de:	88 b9       	out	0x08, r24	; 8
		set_bit(PORTC, PORTC2);
     1e0:	88 b1       	in	r24, 0x08	; 8
     1e2:	84 60       	ori	r24, 0x04	; 4
     1e4:	88 b9       	out	0x08, r24	; 8
		clr_bit(PORTC, PORTC3);
     1e6:	88 b1       	in	r24, 0x08	; 8
     1e8:	87 7f       	andi	r24, 0xF7	; 247
     1ea:	88 b9       	out	0x08, r24	; 8
		break;
     1ec:	08 95       	ret
		
		case 7:
		set_bit(PORTC, PORTC0);
     1ee:	88 b1       	in	r24, 0x08	; 8
     1f0:	81 60       	ori	r24, 0x01	; 1
     1f2:	88 b9       	out	0x08, r24	; 8
		set_bit(PORTC, PORTC1);
     1f4:	88 b1       	in	r24, 0x08	; 8
     1f6:	82 60       	ori	r24, 0x02	; 2
     1f8:	88 b9       	out	0x08, r24	; 8
		set_bit(PORTC, PORTC2);
     1fa:	88 b1       	in	r24, 0x08	; 8
     1fc:	84 60       	ori	r24, 0x04	; 4
     1fe:	88 b9       	out	0x08, r24	; 8
		clr_bit(PORTC, PORTC3);
     200:	88 b1       	in	r24, 0x08	; 8
     202:	87 7f       	andi	r24, 0xF7	; 247
     204:	88 b9       	out	0x08, r24	; 8
     206:	08 95       	ret

00000208 <_ZN10DrinkMakerC1Ev>:
 */ 

#include "drinkMaker.h"


DrinkMaker::DrinkMaker()
     208:	cf 93       	push	r28
     20a:	df 93       	push	r29
     20c:	ec 01       	movw	r28, r24
     20e:	0e 94 01 05 	call	0xa02	; 0xa02 <_ZN6SerialC1Ev>
{
	this->money = 0;
     212:	19 86       	std	Y+9, r1	; 0x09
     214:	1a 86       	std	Y+10, r1	; 0x0a
     216:	1b 86       	std	Y+11, r1	; 0x0b
     218:	1c 86       	std	Y+12, r1	; 0x0c
	this->coffee = 0;
     21a:	1d 82       	std	Y+5, r1	; 0x05
	this->milk = 0;
     21c:	1e 82       	std	Y+6, r1	; 0x06
	this->chocolate = 0;
     21e:	1f 82       	std	Y+7, r1	; 0x07
	this->available_drinks = 0;
     220:	18 86       	std	Y+8, r1	; 0x08
	//ctor
}
     222:	df 91       	pop	r29
     224:	cf 91       	pop	r28
     226:	08 95       	ret

00000228 <_ZN10DrinkMakerD1Ev>:

DrinkMaker::~DrinkMaker()
     228:	0e 94 3e 04 	call	0x87c	; 0x87c <_ZN6SerialD1Ev>
     22c:	08 95       	ret

0000022e <_ZN10DrinkMaker6refuelEv>:
{
	//dtor
}

void DrinkMaker::refuel()
{
     22e:	cf 93       	push	r28
     230:	df 93       	push	r29
     232:	ec 01       	movw	r28, r24
	this->coffee = 10;
     234:	8a e0       	ldi	r24, 0x0A	; 10
     236:	8d 83       	std	Y+5, r24	; 0x05
	this->milk = 5;
     238:	85 e0       	ldi	r24, 0x05	; 5
     23a:	8e 83       	std	Y+6, r24	; 0x06
	this->chocolate = 7;
     23c:	87 e0       	ldi	r24, 0x07	; 7
     23e:	8f 83       	std	Y+7, r24	; 0x07
	
	this->money = 0;
     240:	19 86       	std	Y+9, r1	; 0x09
     242:	1a 86       	std	Y+10, r1	; 0x0a
     244:	1b 86       	std	Y+11, r1	; 0x0b
     246:	1c 86       	std	Y+12, r1	; 0x0c
	
	serial.transmit("Maquina reabastecida");
     248:	61 e0       	ldi	r22, 0x01	; 1
     24a:	71 e0       	ldi	r23, 0x01	; 1
     24c:	ce 01       	movw	r24, r28
     24e:	0e 94 2a 05 	call	0xa54	; 0xa54 <_ZN6Serial8transmitEPc>
	serial.transmitChar(NEWLINE);
     252:	6d e0       	ldi	r22, 0x0D	; 13
     254:	ce 01       	movw	r24, r28
     256:	0e 94 37 05 	call	0xa6e	; 0xa6e <_ZN6Serial12transmitCharEc>
	
}
     25a:	df 91       	pop	r29
     25c:	cf 91       	pop	r28
     25e:	08 95       	ret

00000260 <_ZN10DrinkMaker21show_avaliable_drinksEv>:
			break;
	}
}

void DrinkMaker::show_avaliable_drinks()
{
     260:	af 92       	push	r10
     262:	bf 92       	push	r11
     264:	cf 92       	push	r12
     266:	df 92       	push	r13
     268:	ef 92       	push	r14
     26a:	ff 92       	push	r15
     26c:	0f 93       	push	r16
     26e:	1f 93       	push	r17
     270:	cf 93       	push	r28
     272:	df 93       	push	r29
     274:	1f 92       	push	r1
     276:	cd b7       	in	r28, 0x3d	; 61
     278:	de b7       	in	r29, 0x3e	; 62
     27a:	7c 01       	movw	r14, r24
	char buf[1];
	this->available_drinks = 0b00000000; //Reset available drinks flag
     27c:	fc 01       	movw	r30, r24
     27e:	10 86       	std	Z+8, r1	; 0x08
	
	if(this->coffee > 0)
     280:	85 81       	ldd	r24, Z+5	; 0x05
     282:	88 23       	and	r24, r24
     284:	11 f0       	breq	.+4      	; 0x28a <_ZN10DrinkMaker21show_avaliable_drinksEv+0x2a>
		this->available_drinks |= 0b00000001;	
     286:	91 e0       	ldi	r25, 0x01	; 1
     288:	90 87       	std	Z+8, r25	; 0x08
	if(this->coffee > 0 && this->milk > 0)
     28a:	88 23       	and	r24, r24
     28c:	39 f0       	breq	.+14     	; 0x29c <_ZN10DrinkMaker21show_avaliable_drinksEv+0x3c>
     28e:	f7 01       	movw	r30, r14
     290:	96 81       	ldd	r25, Z+6	; 0x06
     292:	99 23       	and	r25, r25
     294:	19 f0       	breq	.+6      	; 0x29c <_ZN10DrinkMaker21show_avaliable_drinksEv+0x3c>
		this->available_drinks |= 0b00000010;
     296:	90 85       	ldd	r25, Z+8	; 0x08
     298:	92 60       	ori	r25, 0x02	; 2
     29a:	90 87       	std	Z+8, r25	; 0x08
	if(this->coffee > 0 && this->milk > 0 && this->chocolate > 0)
     29c:	88 23       	and	r24, r24
     29e:	51 f0       	breq	.+20     	; 0x2b4 <_ZN10DrinkMaker21show_avaliable_drinksEv+0x54>
     2a0:	f7 01       	movw	r30, r14
     2a2:	96 81       	ldd	r25, Z+6	; 0x06
     2a4:	99 23       	and	r25, r25
     2a6:	31 f0       	breq	.+12     	; 0x2b4 <_ZN10DrinkMaker21show_avaliable_drinksEv+0x54>
     2a8:	97 81       	ldd	r25, Z+7	; 0x07
     2aa:	99 23       	and	r25, r25
     2ac:	19 f0       	breq	.+6      	; 0x2b4 <_ZN10DrinkMaker21show_avaliable_drinksEv+0x54>
		this->available_drinks |= 0b00000100;
     2ae:	90 85       	ldd	r25, Z+8	; 0x08
     2b0:	94 60       	ori	r25, 0x04	; 4
     2b2:	90 87       	std	Z+8, r25	; 0x08
	if(this->milk > 0)
     2b4:	f7 01       	movw	r30, r14
     2b6:	96 81       	ldd	r25, Z+6	; 0x06
     2b8:	99 23       	and	r25, r25
     2ba:	19 f0       	breq	.+6      	; 0x2c2 <_ZN10DrinkMaker21show_avaliable_drinksEv+0x62>
		this->available_drinks |= 0b00001000;
     2bc:	20 85       	ldd	r18, Z+8	; 0x08
     2be:	28 60       	ori	r18, 0x08	; 8
     2c0:	20 87       	std	Z+8, r18	; 0x08
	if(this->milk > 0 && this->chocolate > 0)
     2c2:	99 23       	and	r25, r25
     2c4:	39 f0       	breq	.+14     	; 0x2d4 <_ZN10DrinkMaker21show_avaliable_drinksEv+0x74>
     2c6:	f7 01       	movw	r30, r14
     2c8:	97 81       	ldd	r25, Z+7	; 0x07
     2ca:	99 23       	and	r25, r25
     2cc:	19 f0       	breq	.+6      	; 0x2d4 <_ZN10DrinkMaker21show_avaliable_drinksEv+0x74>
		this->available_drinks |= 0b00010000;
     2ce:	90 85       	ldd	r25, Z+8	; 0x08
     2d0:	90 61       	ori	r25, 0x10	; 16
     2d2:	90 87       	std	Z+8, r25	; 0x08
	if(this->chocolate > 0)
     2d4:	f7 01       	movw	r30, r14
     2d6:	97 81       	ldd	r25, Z+7	; 0x07
     2d8:	99 23       	and	r25, r25
     2da:	19 f0       	breq	.+6      	; 0x2e2 <_ZN10DrinkMaker21show_avaliable_drinksEv+0x82>
		this->available_drinks |= 0b00100000;
     2dc:	20 85       	ldd	r18, Z+8	; 0x08
     2de:	20 62       	ori	r18, 0x20	; 32
     2e0:	20 87       	std	Z+8, r18	; 0x08
	if(this->coffee > 0 && this->chocolate > 0)
     2e2:	88 23       	and	r24, r24
     2e4:	31 f0       	breq	.+12     	; 0x2f2 <_ZN10DrinkMaker21show_avaliable_drinksEv+0x92>
     2e6:	99 23       	and	r25, r25
     2e8:	21 f0       	breq	.+8      	; 0x2f2 <_ZN10DrinkMaker21show_avaliable_drinksEv+0x92>
		this->available_drinks |= 0b01000000;
     2ea:	f7 01       	movw	r30, r14
     2ec:	80 85       	ldd	r24, Z+8	; 0x08
     2ee:	80 64       	ori	r24, 0x40	; 64
     2f0:	80 87       	std	Z+8, r24	; 0x08
	
	serial.transmit("Bebida Indisponivel");
     2f2:	ce 2c       	mov	r12, r14
     2f4:	df 2c       	mov	r13, r15
     2f6:	66 e1       	ldi	r22, 0x16	; 22
     2f8:	71 e0       	ldi	r23, 0x01	; 1
     2fa:	c7 01       	movw	r24, r14
     2fc:	0e 94 2a 05 	call	0xa54	; 0xa54 <_ZN6Serial8transmitEPc>
	serial.transmitChar(NEWLINE);
     300:	6d e0       	ldi	r22, 0x0D	; 13
     302:	c7 01       	movw	r24, r14
     304:	0e 94 37 05 	call	0xa6e	; 0xa6e <_ZN6Serial12transmitCharEc>
	
	serial.transmit("Bebidas Disponiveis:");
     308:	6a e2       	ldi	r22, 0x2A	; 42
     30a:	71 e0       	ldi	r23, 0x01	; 1
     30c:	c7 01       	movw	r24, r14
     30e:	0e 94 2a 05 	call	0xa54	; 0xa54 <_ZN6Serial8transmitEPc>
	serial.transmitChar(NEWLINE);
     312:	6d e0       	ldi	r22, 0x0D	; 13
     314:	c7 01       	movw	r24, r14
     316:	0e 94 37 05 	call	0xa6e	; 0xa6e <_ZN6Serial12transmitCharEc>
	
	//Prints all avaliable drinks by comparing the "avaliable_drinks" byte with each respective drink bit.
	for(int i = 0; i < 7; i++){
     31a:	00 e0       	ldi	r16, 0x00	; 0
     31c:	10 e0       	ldi	r17, 0x00	; 0
     31e:	07 30       	cpi	r16, 0x07	; 7
     320:	11 05       	cpc	r17, r1
     322:	a4 f5       	brge	.+104    	; 0x38c <_ZN10DrinkMaker21show_avaliable_drinksEv+0x12c>
		if((this->available_drinks & (1<<i)) > 0){
     324:	f7 01       	movw	r30, r14
     326:	40 85       	ldd	r20, Z+8	; 0x08
     328:	81 e0       	ldi	r24, 0x01	; 1
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	9c 01       	movw	r18, r24
     32e:	00 2e       	mov	r0, r16
     330:	02 c0       	rjmp	.+4      	; 0x336 <_ZN10DrinkMaker21show_avaliable_drinksEv+0xd6>
     332:	22 0f       	add	r18, r18
     334:	33 1f       	adc	r19, r19
     336:	0a 94       	dec	r0
     338:	e2 f7       	brpl	.-8      	; 0x332 <_ZN10DrinkMaker21show_avaliable_drinksEv+0xd2>
     33a:	84 2f       	mov	r24, r20
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	82 23       	and	r24, r18
     340:	93 23       	and	r25, r19
     342:	18 16       	cp	r1, r24
     344:	19 06       	cpc	r1, r25
     346:	fc f4       	brge	.+62     	; 0x386 <_ZN10DrinkMaker21show_avaliable_drinksEv+0x126>
			sprintf(buf, "%d", i+1);
     348:	c8 01       	movw	r24, r16
     34a:	01 96       	adiw	r24, 0x01	; 1
     34c:	9f 93       	push	r25
     34e:	8f 93       	push	r24
     350:	8f e3       	ldi	r24, 0x3F	; 63
     352:	91 e0       	ldi	r25, 0x01	; 1
     354:	9f 93       	push	r25
     356:	8f 93       	push	r24
     358:	ce 01       	movw	r24, r28
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	5c 01       	movw	r10, r24
     35e:	9f 93       	push	r25
     360:	8f 93       	push	r24
     362:	0e 94 70 07 	call	0xee0	; 0xee0 <sprintf>
			serial.transmit(buf);
     366:	b5 01       	movw	r22, r10
     368:	8c 2d       	mov	r24, r12
     36a:	9d 2d       	mov	r25, r13
     36c:	0e 94 2a 05 	call	0xa54	; 0xa54 <_ZN6Serial8transmitEPc>
			serial.transmitChar(NEWLINE);
     370:	6d e0       	ldi	r22, 0x0D	; 13
     372:	8c 2d       	mov	r24, r12
     374:	9d 2d       	mov	r25, r13
     376:	0e 94 37 05 	call	0xa6e	; 0xa6e <_ZN6Serial12transmitCharEc>
     37a:	0f 90       	pop	r0
     37c:	0f 90       	pop	r0
     37e:	0f 90       	pop	r0
     380:	0f 90       	pop	r0
     382:	0f 90       	pop	r0
     384:	0f 90       	pop	r0
	
	serial.transmit("Bebidas Disponiveis:");
	serial.transmitChar(NEWLINE);
	
	//Prints all avaliable drinks by comparing the "avaliable_drinks" byte with each respective drink bit.
	for(int i = 0; i < 7; i++){
     386:	0f 5f       	subi	r16, 0xFF	; 255
     388:	1f 4f       	sbci	r17, 0xFF	; 255
     38a:	c9 cf       	rjmp	.-110    	; 0x31e <_ZN10DrinkMaker21show_avaliable_drinksEv+0xbe>
			sprintf(buf, "%d", i+1);
			serial.transmit(buf);
			serial.transmitChar(NEWLINE);
		}
	}
}
     38c:	0f 90       	pop	r0
     38e:	df 91       	pop	r29
     390:	cf 91       	pop	r28
     392:	1f 91       	pop	r17
     394:	0f 91       	pop	r16
     396:	ff 90       	pop	r15
     398:	ef 90       	pop	r14
     39a:	df 90       	pop	r13
     39c:	cf 90       	pop	r12
     39e:	bf 90       	pop	r11
     3a0:	af 90       	pop	r10
     3a2:	08 95       	ret

000003a4 <_ZN10DrinkMaker9makeDrinkEPVh>:
	serial.transmitChar(NEWLINE);
	
}

void DrinkMaker::makeDrink(volatile unsigned char *drink_index)
{
     3a4:	cf 93       	push	r28
     3a6:	df 93       	push	r29
	switch(*drink_index){
     3a8:	db 01       	movw	r26, r22
     3aa:	ec 91       	ld	r30, X
     3ac:	4e 2f       	mov	r20, r30
     3ae:	50 e0       	ldi	r21, 0x00	; 0
     3b0:	fa 01       	movw	r30, r20
     3b2:	31 97       	sbiw	r30, 0x01	; 1
     3b4:	e7 30       	cpi	r30, 0x07	; 7
     3b6:	f1 05       	cpc	r31, r1
     3b8:	08 f0       	brcs	.+2      	; 0x3bc <_ZN10DrinkMaker9makeDrinkEPVh+0x18>
     3ba:	04 c1       	rjmp	.+520    	; 0x5c4 <__EEPROM_REGION_LENGTH__+0x1c4>
     3bc:	ec 01       	movw	r28, r24
     3be:	e5 5c       	subi	r30, 0xC5	; 197
     3c0:	ff 4f       	sbci	r31, 0xFF	; 255
     3c2:	0c 94 6a 07 	jmp	0xed4	; 0xed4 <__tablejump2__>
		case 1:
			if(this->coffee > 0){
     3c6:	8d 81       	ldd	r24, Y+5	; 0x05
     3c8:	88 23       	and	r24, r24
     3ca:	d1 f0       	breq	.+52     	; 0x400 <__EEPROM_REGION_LENGTH__>
				this->coffee--;
     3cc:	81 50       	subi	r24, 0x01	; 1
     3ce:	8d 83       	std	Y+5, r24	; 0x05
				this->money += 1.50;
     3d0:	20 e0       	ldi	r18, 0x00	; 0
     3d2:	30 e0       	ldi	r19, 0x00	; 0
     3d4:	40 ec       	ldi	r20, 0xC0	; 192
     3d6:	5f e3       	ldi	r21, 0x3F	; 63
     3d8:	69 85       	ldd	r22, Y+9	; 0x09
     3da:	7a 85       	ldd	r23, Y+10	; 0x0a
     3dc:	8b 85       	ldd	r24, Y+11	; 0x0b
     3de:	9c 85       	ldd	r25, Y+12	; 0x0c
     3e0:	0e 94 5f 05 	call	0xabe	; 0xabe <__addsf3>
     3e4:	69 87       	std	Y+9, r22	; 0x09
     3e6:	7a 87       	std	Y+10, r23	; 0x0a
     3e8:	8b 87       	std	Y+11, r24	; 0x0b
     3ea:	9c 87       	std	Y+12, r25	; 0x0c
				
				serial.transmit("Bebida 1 Selecionada!");
     3ec:	62 e4       	ldi	r22, 0x42	; 66
     3ee:	71 e0       	ldi	r23, 0x01	; 1
     3f0:	ce 01       	movw	r24, r28
     3f2:	0e 94 2a 05 	call	0xa54	; 0xa54 <_ZN6Serial8transmitEPc>
				serial.transmitChar(NEWLINE);
     3f6:	6d e0       	ldi	r22, 0x0D	; 13
     3f8:	ce 01       	movw	r24, r28
     3fa:	0e 94 37 05 	call	0xa6e	; 0xa6e <_ZN6Serial12transmitCharEc>
     3fe:	e2 c0       	rjmp	.+452    	; 0x5c4 <__EEPROM_REGION_LENGTH__+0x1c4>
			}
			else
				this->show_avaliable_drinks();
     400:	ce 01       	movw	r24, r28
     402:	0e 94 30 01 	call	0x260	; 0x260 <_ZN10DrinkMaker21show_avaliable_drinksEv>
     406:	de c0       	rjmp	.+444    	; 0x5c4 <__EEPROM_REGION_LENGTH__+0x1c4>
			break;
			
		case 2:
			if(this->coffee > 0 && this->milk > 0){
     408:	8d 81       	ldd	r24, Y+5	; 0x05
     40a:	88 23       	and	r24, r24
     40c:	f9 f0       	breq	.+62     	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
     40e:	9e 81       	ldd	r25, Y+6	; 0x06
     410:	99 23       	and	r25, r25
     412:	e1 f0       	breq	.+56     	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
				this->coffee--;
     414:	81 50       	subi	r24, 0x01	; 1
     416:	8d 83       	std	Y+5, r24	; 0x05
				this->milk--;
     418:	91 50       	subi	r25, 0x01	; 1
     41a:	9e 83       	std	Y+6, r25	; 0x06
				this->money += 2.00;
     41c:	20 e0       	ldi	r18, 0x00	; 0
     41e:	30 e0       	ldi	r19, 0x00	; 0
     420:	40 e0       	ldi	r20, 0x00	; 0
     422:	50 e4       	ldi	r21, 0x40	; 64
     424:	69 85       	ldd	r22, Y+9	; 0x09
     426:	7a 85       	ldd	r23, Y+10	; 0x0a
     428:	8b 85       	ldd	r24, Y+11	; 0x0b
     42a:	9c 85       	ldd	r25, Y+12	; 0x0c
     42c:	0e 94 5f 05 	call	0xabe	; 0xabe <__addsf3>
     430:	69 87       	std	Y+9, r22	; 0x09
     432:	7a 87       	std	Y+10, r23	; 0x0a
     434:	8b 87       	std	Y+11, r24	; 0x0b
     436:	9c 87       	std	Y+12, r25	; 0x0c
				
				serial.transmit("Bebida 2 Selecionada!");
     438:	68 e5       	ldi	r22, 0x58	; 88
     43a:	71 e0       	ldi	r23, 0x01	; 1
     43c:	ce 01       	movw	r24, r28
     43e:	0e 94 2a 05 	call	0xa54	; 0xa54 <_ZN6Serial8transmitEPc>
				serial.transmitChar(NEWLINE);
     442:	6d e0       	ldi	r22, 0x0D	; 13
     444:	ce 01       	movw	r24, r28
     446:	0e 94 37 05 	call	0xa6e	; 0xa6e <_ZN6Serial12transmitCharEc>
     44a:	bc c0       	rjmp	.+376    	; 0x5c4 <__EEPROM_REGION_LENGTH__+0x1c4>
			}
			else
				this->show_avaliable_drinks();
     44c:	ce 01       	movw	r24, r28
     44e:	0e 94 30 01 	call	0x260	; 0x260 <_ZN10DrinkMaker21show_avaliable_drinksEv>
     452:	b8 c0       	rjmp	.+368    	; 0x5c4 <__EEPROM_REGION_LENGTH__+0x1c4>
			break;
			
		case 3:
			if(this->coffee > 0 && this->milk > 0 && this->chocolate > 0){
     454:	8d 81       	ldd	r24, Y+5	; 0x05
     456:	88 23       	and	r24, r24
     458:	21 f1       	breq	.+72     	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
     45a:	9e 81       	ldd	r25, Y+6	; 0x06
     45c:	99 23       	and	r25, r25
     45e:	09 f1       	breq	.+66     	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
     460:	2f 81       	ldd	r18, Y+7	; 0x07
     462:	22 23       	and	r18, r18
     464:	f1 f0       	breq	.+60     	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
				this->coffee--;
     466:	81 50       	subi	r24, 0x01	; 1
     468:	8d 83       	std	Y+5, r24	; 0x05
				this->milk--;
     46a:	91 50       	subi	r25, 0x01	; 1
     46c:	9e 83       	std	Y+6, r25	; 0x06
				this->chocolate--;
     46e:	21 50       	subi	r18, 0x01	; 1
     470:	2f 83       	std	Y+7, r18	; 0x07
				this->money += 2.75;
     472:	20 e0       	ldi	r18, 0x00	; 0
     474:	30 e0       	ldi	r19, 0x00	; 0
     476:	40 e3       	ldi	r20, 0x30	; 48
     478:	50 e4       	ldi	r21, 0x40	; 64
     47a:	69 85       	ldd	r22, Y+9	; 0x09
     47c:	7a 85       	ldd	r23, Y+10	; 0x0a
     47e:	8b 85       	ldd	r24, Y+11	; 0x0b
     480:	9c 85       	ldd	r25, Y+12	; 0x0c
     482:	0e 94 5f 05 	call	0xabe	; 0xabe <__addsf3>
     486:	69 87       	std	Y+9, r22	; 0x09
     488:	7a 87       	std	Y+10, r23	; 0x0a
     48a:	8b 87       	std	Y+11, r24	; 0x0b
     48c:	9c 87       	std	Y+12, r25	; 0x0c
				
				serial.transmit("Bebida 3 Selecionada!");
     48e:	6e e6       	ldi	r22, 0x6E	; 110
     490:	71 e0       	ldi	r23, 0x01	; 1
     492:	ce 01       	movw	r24, r28
     494:	0e 94 2a 05 	call	0xa54	; 0xa54 <_ZN6Serial8transmitEPc>
				serial.transmitChar(NEWLINE);
     498:	6d e0       	ldi	r22, 0x0D	; 13
     49a:	ce 01       	movw	r24, r28
     49c:	0e 94 37 05 	call	0xa6e	; 0xa6e <_ZN6Serial12transmitCharEc>
     4a0:	91 c0       	rjmp	.+290    	; 0x5c4 <__EEPROM_REGION_LENGTH__+0x1c4>
			}
			else
				this->show_avaliable_drinks();
     4a2:	ce 01       	movw	r24, r28
     4a4:	0e 94 30 01 	call	0x260	; 0x260 <_ZN10DrinkMaker21show_avaliable_drinksEv>
     4a8:	8d c0       	rjmp	.+282    	; 0x5c4 <__EEPROM_REGION_LENGTH__+0x1c4>
			break;
			
		case 4:
			if(this->milk > 0){
     4aa:	8e 81       	ldd	r24, Y+6	; 0x06
     4ac:	88 23       	and	r24, r24
     4ae:	d1 f0       	breq	.+52     	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
				this->milk--;
     4b0:	81 50       	subi	r24, 0x01	; 1
     4b2:	8e 83       	std	Y+6, r24	; 0x06
				this->money += 1.00;
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	30 e0       	ldi	r19, 0x00	; 0
     4b8:	40 e8       	ldi	r20, 0x80	; 128
     4ba:	5f e3       	ldi	r21, 0x3F	; 63
     4bc:	69 85       	ldd	r22, Y+9	; 0x09
     4be:	7a 85       	ldd	r23, Y+10	; 0x0a
     4c0:	8b 85       	ldd	r24, Y+11	; 0x0b
     4c2:	9c 85       	ldd	r25, Y+12	; 0x0c
     4c4:	0e 94 5f 05 	call	0xabe	; 0xabe <__addsf3>
     4c8:	69 87       	std	Y+9, r22	; 0x09
     4ca:	7a 87       	std	Y+10, r23	; 0x0a
     4cc:	8b 87       	std	Y+11, r24	; 0x0b
     4ce:	9c 87       	std	Y+12, r25	; 0x0c
				
				serial.transmit("Bebida 4 Selecionada!");
     4d0:	64 e8       	ldi	r22, 0x84	; 132
     4d2:	71 e0       	ldi	r23, 0x01	; 1
     4d4:	ce 01       	movw	r24, r28
     4d6:	0e 94 2a 05 	call	0xa54	; 0xa54 <_ZN6Serial8transmitEPc>
				serial.transmitChar(NEWLINE);
     4da:	6d e0       	ldi	r22, 0x0D	; 13
     4dc:	ce 01       	movw	r24, r28
     4de:	0e 94 37 05 	call	0xa6e	; 0xa6e <_ZN6Serial12transmitCharEc>
     4e2:	70 c0       	rjmp	.+224    	; 0x5c4 <__EEPROM_REGION_LENGTH__+0x1c4>
			}
			else
				this->show_avaliable_drinks();
     4e4:	ce 01       	movw	r24, r28
     4e6:	0e 94 30 01 	call	0x260	; 0x260 <_ZN10DrinkMaker21show_avaliable_drinksEv>
     4ea:	6c c0       	rjmp	.+216    	; 0x5c4 <__EEPROM_REGION_LENGTH__+0x1c4>
			break;
			
		case 5:
			if(this->milk > 0 && this->chocolate > 0){
     4ec:	8e 81       	ldd	r24, Y+6	; 0x06
     4ee:	88 23       	and	r24, r24
     4f0:	f9 f0       	breq	.+62     	; 0x530 <__EEPROM_REGION_LENGTH__+0x130>
     4f2:	9f 81       	ldd	r25, Y+7	; 0x07
     4f4:	99 23       	and	r25, r25
     4f6:	e1 f0       	breq	.+56     	; 0x530 <__EEPROM_REGION_LENGTH__+0x130>
				this->milk--;
     4f8:	81 50       	subi	r24, 0x01	; 1
     4fa:	8e 83       	std	Y+6, r24	; 0x06
				this->chocolate--;
     4fc:	91 50       	subi	r25, 0x01	; 1
     4fe:	9f 83       	std	Y+7, r25	; 0x07
				this->money += 1.80;
     500:	26 e6       	ldi	r18, 0x66	; 102
     502:	36 e6       	ldi	r19, 0x66	; 102
     504:	46 ee       	ldi	r20, 0xE6	; 230
     506:	5f e3       	ldi	r21, 0x3F	; 63
     508:	69 85       	ldd	r22, Y+9	; 0x09
     50a:	7a 85       	ldd	r23, Y+10	; 0x0a
     50c:	8b 85       	ldd	r24, Y+11	; 0x0b
     50e:	9c 85       	ldd	r25, Y+12	; 0x0c
     510:	0e 94 5f 05 	call	0xabe	; 0xabe <__addsf3>
     514:	69 87       	std	Y+9, r22	; 0x09
     516:	7a 87       	std	Y+10, r23	; 0x0a
     518:	8b 87       	std	Y+11, r24	; 0x0b
     51a:	9c 87       	std	Y+12, r25	; 0x0c
				
				serial.transmit("Bebida 5 Selecionada!");
     51c:	6a e9       	ldi	r22, 0x9A	; 154
     51e:	71 e0       	ldi	r23, 0x01	; 1
     520:	ce 01       	movw	r24, r28
     522:	0e 94 2a 05 	call	0xa54	; 0xa54 <_ZN6Serial8transmitEPc>
				serial.transmitChar(NEWLINE);
     526:	6d e0       	ldi	r22, 0x0D	; 13
     528:	ce 01       	movw	r24, r28
     52a:	0e 94 37 05 	call	0xa6e	; 0xa6e <_ZN6Serial12transmitCharEc>
     52e:	4a c0       	rjmp	.+148    	; 0x5c4 <__EEPROM_REGION_LENGTH__+0x1c4>
			}
			else
				this->show_avaliable_drinks();
     530:	ce 01       	movw	r24, r28
     532:	0e 94 30 01 	call	0x260	; 0x260 <_ZN10DrinkMaker21show_avaliable_drinksEv>
     536:	46 c0       	rjmp	.+140    	; 0x5c4 <__EEPROM_REGION_LENGTH__+0x1c4>
			break;
			
		case 6:
			if(this->chocolate > 0){
     538:	8f 81       	ldd	r24, Y+7	; 0x07
     53a:	88 23       	and	r24, r24
     53c:	d1 f0       	breq	.+52     	; 0x572 <__EEPROM_REGION_LENGTH__+0x172>
				this->chocolate--;
     53e:	81 50       	subi	r24, 0x01	; 1
     540:	8f 83       	std	Y+7, r24	; 0x07
				this->money += 1.50;
     542:	20 e0       	ldi	r18, 0x00	; 0
     544:	30 e0       	ldi	r19, 0x00	; 0
     546:	40 ec       	ldi	r20, 0xC0	; 192
     548:	5f e3       	ldi	r21, 0x3F	; 63
     54a:	69 85       	ldd	r22, Y+9	; 0x09
     54c:	7a 85       	ldd	r23, Y+10	; 0x0a
     54e:	8b 85       	ldd	r24, Y+11	; 0x0b
     550:	9c 85       	ldd	r25, Y+12	; 0x0c
     552:	0e 94 5f 05 	call	0xabe	; 0xabe <__addsf3>
     556:	69 87       	std	Y+9, r22	; 0x09
     558:	7a 87       	std	Y+10, r23	; 0x0a
     55a:	8b 87       	std	Y+11, r24	; 0x0b
     55c:	9c 87       	std	Y+12, r25	; 0x0c
				
				serial.transmit("Bebida 6 Selecionada!");
     55e:	60 eb       	ldi	r22, 0xB0	; 176
     560:	71 e0       	ldi	r23, 0x01	; 1
     562:	ce 01       	movw	r24, r28
     564:	0e 94 2a 05 	call	0xa54	; 0xa54 <_ZN6Serial8transmitEPc>
				serial.transmitChar(NEWLINE);
     568:	6d e0       	ldi	r22, 0x0D	; 13
     56a:	ce 01       	movw	r24, r28
     56c:	0e 94 37 05 	call	0xa6e	; 0xa6e <_ZN6Serial12transmitCharEc>
     570:	29 c0       	rjmp	.+82     	; 0x5c4 <__EEPROM_REGION_LENGTH__+0x1c4>
			}
			else
				this->show_avaliable_drinks();
     572:	ce 01       	movw	r24, r28
     574:	0e 94 30 01 	call	0x260	; 0x260 <_ZN10DrinkMaker21show_avaliable_drinksEv>
     578:	25 c0       	rjmp	.+74     	; 0x5c4 <__EEPROM_REGION_LENGTH__+0x1c4>
			break;
			
		case 7:
			if(this->coffee > 0 && this->chocolate > 0){
     57a:	8d 81       	ldd	r24, Y+5	; 0x05
     57c:	88 23       	and	r24, r24
     57e:	f9 f0       	breq	.+62     	; 0x5be <__EEPROM_REGION_LENGTH__+0x1be>
     580:	9f 81       	ldd	r25, Y+7	; 0x07
     582:	99 23       	and	r25, r25
     584:	e1 f0       	breq	.+56     	; 0x5be <__EEPROM_REGION_LENGTH__+0x1be>
				this->coffee--;
     586:	81 50       	subi	r24, 0x01	; 1
     588:	8d 83       	std	Y+5, r24	; 0x05
				this->chocolate--;
     58a:	91 50       	subi	r25, 0x01	; 1
     58c:	9f 83       	std	Y+7, r25	; 0x07
				this->money += 2.10;
     58e:	26 e6       	ldi	r18, 0x66	; 102
     590:	36 e6       	ldi	r19, 0x66	; 102
     592:	46 e0       	ldi	r20, 0x06	; 6
     594:	50 e4       	ldi	r21, 0x40	; 64
     596:	69 85       	ldd	r22, Y+9	; 0x09
     598:	7a 85       	ldd	r23, Y+10	; 0x0a
     59a:	8b 85       	ldd	r24, Y+11	; 0x0b
     59c:	9c 85       	ldd	r25, Y+12	; 0x0c
     59e:	0e 94 5f 05 	call	0xabe	; 0xabe <__addsf3>
     5a2:	69 87       	std	Y+9, r22	; 0x09
     5a4:	7a 87       	std	Y+10, r23	; 0x0a
     5a6:	8b 87       	std	Y+11, r24	; 0x0b
     5a8:	9c 87       	std	Y+12, r25	; 0x0c
				
				serial.transmit("Bebida 7 Selecionada!");
     5aa:	66 ec       	ldi	r22, 0xC6	; 198
     5ac:	71 e0       	ldi	r23, 0x01	; 1
     5ae:	ce 01       	movw	r24, r28
     5b0:	0e 94 2a 05 	call	0xa54	; 0xa54 <_ZN6Serial8transmitEPc>
				serial.transmitChar(NEWLINE);
     5b4:	6d e0       	ldi	r22, 0x0D	; 13
     5b6:	ce 01       	movw	r24, r28
     5b8:	0e 94 37 05 	call	0xa6e	; 0xa6e <_ZN6Serial12transmitCharEc>
     5bc:	03 c0       	rjmp	.+6      	; 0x5c4 <__EEPROM_REGION_LENGTH__+0x1c4>
			}
			else
				this->show_avaliable_drinks();
     5be:	ce 01       	movw	r24, r28
     5c0:	0e 94 30 01 	call	0x260	; 0x260 <_ZN10DrinkMaker21show_avaliable_drinksEv>
			break;
	}
}
     5c4:	df 91       	pop	r29
     5c6:	cf 91       	pop	r28
     5c8:	08 95       	ret

000005ca <_ZN10DrinkMaker11show_profitEv>:
		}
	}
}

void DrinkMaker::show_profit()
{
     5ca:	8f 92       	push	r8
     5cc:	9f 92       	push	r9
     5ce:	af 92       	push	r10
     5d0:	bf 92       	push	r11
     5d2:	cf 92       	push	r12
     5d4:	df 92       	push	r13
     5d6:	ef 92       	push	r14
     5d8:	ff 92       	push	r15
     5da:	0f 93       	push	r16
     5dc:	1f 93       	push	r17
     5de:	cf 93       	push	r28
     5e0:	df 93       	push	r29
     5e2:	cd b7       	in	r28, 0x3d	; 61
     5e4:	de b7       	in	r29, 0x3e	; 62
     5e6:	2a 97       	sbiw	r28, 0x0a	; 10
     5e8:	0f b6       	in	r0, 0x3f	; 63
     5ea:	f8 94       	cli
     5ec:	de bf       	out	0x3e, r29	; 62
     5ee:	0f be       	out	0x3f, r0	; 63
     5f0:	cd bf       	out	0x3d, r28	; 61
     5f2:	8c 01       	movw	r16, r24
	int moneyInt = int(this->money);
     5f4:	fc 01       	movw	r30, r24
     5f6:	81 84       	ldd	r8, Z+9	; 0x09
     5f8:	92 84       	ldd	r9, Z+10	; 0x0a
     5fa:	a3 84       	ldd	r10, Z+11	; 0x0b
     5fc:	b4 84       	ldd	r11, Z+12	; 0x0c
     5fe:	c5 01       	movw	r24, r10
     600:	b4 01       	movw	r22, r8
     602:	0e 94 cb 05 	call	0xb96	; 0xb96 <__fixsfsi>
     606:	6b 01       	movw	r12, r22
     608:	7c 01       	movw	r14, r24
	float moneyFrac = this->money - moneyInt;
     60a:	07 2e       	mov	r0, r23
     60c:	00 0c       	add	r0, r0
     60e:	88 0b       	sbc	r24, r24
     610:	99 0b       	sbc	r25, r25
     612:	0e 94 03 06 	call	0xc06	; 0xc06 <__floatsisf>
     616:	9b 01       	movw	r18, r22
     618:	ac 01       	movw	r20, r24
     61a:	c5 01       	movw	r24, r10
     61c:	b4 01       	movw	r22, r8
     61e:	0e 94 5e 05 	call	0xabc	; 0xabc <__subsf3>
	int moneyIntFrac = trunc(moneyFrac*100);
     622:	20 e0       	ldi	r18, 0x00	; 0
     624:	30 e0       	ldi	r19, 0x00	; 0
     626:	48 ec       	ldi	r20, 0xC8	; 200
     628:	52 e4       	ldi	r21, 0x42	; 66
     62a:	0e 94 8f 06 	call	0xd1e	; 0xd1e <__mulsf3>
     62e:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <trunc>
     632:	0e 94 cb 05 	call	0xb96	; 0xb96 <__fixsfsi>
	
	char buf[10];
	sprintf(buf, "R$ %d.%02d", moneyInt, moneyIntFrac);
     636:	7f 93       	push	r23
     638:	6f 93       	push	r22
     63a:	df 92       	push	r13
     63c:	cf 92       	push	r12
     63e:	8c ed       	ldi	r24, 0xDC	; 220
     640:	91 e0       	ldi	r25, 0x01	; 1
     642:	9f 93       	push	r25
     644:	8f 93       	push	r24
     646:	ce 01       	movw	r24, r28
     648:	01 96       	adiw	r24, 0x01	; 1
     64a:	7c 01       	movw	r14, r24
     64c:	9f 93       	push	r25
     64e:	8f 93       	push	r24
     650:	0e 94 70 07 	call	0xee0	; 0xee0 <sprintf>
	serial.transmit("Valor Arrecadado: ");
     654:	67 ee       	ldi	r22, 0xE7	; 231
     656:	71 e0       	ldi	r23, 0x01	; 1
     658:	c8 01       	movw	r24, r16
     65a:	0e 94 2a 05 	call	0xa54	; 0xa54 <_ZN6Serial8transmitEPc>
	serial.transmit(buf);
     65e:	b7 01       	movw	r22, r14
     660:	c8 01       	movw	r24, r16
     662:	0e 94 2a 05 	call	0xa54	; 0xa54 <_ZN6Serial8transmitEPc>
	serial.transmitChar(NEWLINE);
     666:	6d e0       	ldi	r22, 0x0D	; 13
     668:	c8 01       	movw	r24, r16
     66a:	0e 94 37 05 	call	0xa6e	; 0xa6e <_ZN6Serial12transmitCharEc>
     66e:	0f b6       	in	r0, 0x3f	; 63
     670:	f8 94       	cli
     672:	de bf       	out	0x3e, r29	; 62
     674:	0f be       	out	0x3f, r0	; 63
     676:	cd bf       	out	0x3d, r28	; 61
     678:	2a 96       	adiw	r28, 0x0a	; 10
     67a:	0f b6       	in	r0, 0x3f	; 63
     67c:	f8 94       	cli
     67e:	de bf       	out	0x3e, r29	; 62
     680:	0f be       	out	0x3f, r0	; 63
     682:	cd bf       	out	0x3d, r28	; 61
     684:	df 91       	pop	r29
     686:	cf 91       	pop	r28
     688:	1f 91       	pop	r17
     68a:	0f 91       	pop	r16
     68c:	ff 90       	pop	r15
     68e:	ef 90       	pop	r14
     690:	df 90       	pop	r13
     692:	cf 90       	pop	r12
     694:	bf 90       	pop	r11
     696:	af 90       	pop	r10
     698:	9f 90       	pop	r9
     69a:	8f 90       	pop	r8
     69c:	08 95       	ret

0000069e <_Z41__static_initialization_and_destruction_0ii>:
	
    while (1) 
    {
		_7seg.updateDisplay(&menu_index);
    }
}
     69e:	0f 93       	push	r16
     6a0:	1f 93       	push	r17
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
     6a6:	ec 01       	movw	r28, r24
     6a8:	8b 01       	movw	r16, r22
     6aa:	01 97       	sbiw	r24, 0x01	; 1
     6ac:	79 f4       	brne	.+30     	; 0x6cc <_Z41__static_initialization_and_destruction_0ii+0x2e>
     6ae:	6f 3f       	cpi	r22, 0xFF	; 255
     6b0:	7f 4f       	sbci	r23, 0xFF	; 255
     6b2:	61 f4       	brne	.+24     	; 0x6cc <_Z41__static_initialization_and_destruction_0ii+0x2e>
#include "display7seg.h"
#include "serial.h"
#include <util/delay.h>

//Creates objetcs
DrinkMaker drinkMaker;
     6b4:	81 e3       	ldi	r24, 0x31	; 49
     6b6:	92 e0       	ldi	r25, 0x02	; 2
     6b8:	0e 94 04 01 	call	0x208	; 0x208 <_ZN10DrinkMakerC1Ev>
Serial serial;
     6bc:	8c e2       	ldi	r24, 0x2C	; 44
     6be:	92 e0       	ldi	r25, 0x02	; 2
     6c0:	0e 94 01 05 	call	0xa02	; 0xa02 <_ZN6SerialC1Ev>
Display7seg _7seg;
     6c4:	88 e2       	ldi	r24, 0x28	; 40
     6c6:	92 e0       	ldi	r25, 0x02	; 2
     6c8:	0e 94 6e 00 	call	0xdc	; 0xdc <_ZN11Display7segC1Ev>
     6cc:	cd 2b       	or	r28, r29
     6ce:	79 f4       	brne	.+30     	; 0x6ee <_Z41__static_initialization_and_destruction_0ii+0x50>
     6d0:	0f 3f       	cpi	r16, 0xFF	; 255
     6d2:	1f 4f       	sbci	r17, 0xFF	; 255
     6d4:	61 f4       	brne	.+24     	; 0x6ee <_Z41__static_initialization_and_destruction_0ii+0x50>
     6d6:	88 e2       	ldi	r24, 0x28	; 40
     6d8:	92 e0       	ldi	r25, 0x02	; 2
     6da:	0e 94 6f 00 	call	0xde	; 0xde <_ZN11Display7segD1Ev>
#include "serial.h"
#include <util/delay.h>

//Creates objetcs
DrinkMaker drinkMaker;
Serial serial;
     6de:	8c e2       	ldi	r24, 0x2C	; 44
     6e0:	92 e0       	ldi	r25, 0x02	; 2
     6e2:	0e 94 3e 04 	call	0x87c	; 0x87c <_ZN6SerialD1Ev>
#include "display7seg.h"
#include "serial.h"
#include <util/delay.h>

//Creates objetcs
DrinkMaker drinkMaker;
     6e6:	81 e3       	ldi	r24, 0x31	; 49
     6e8:	92 e0       	ldi	r25, 0x02	; 2
     6ea:	0e 94 14 01 	call	0x228	; 0x228 <_ZN10DrinkMakerD1Ev>
	
    while (1) 
    {
		_7seg.updateDisplay(&menu_index);
    }
}
     6ee:	df 91       	pop	r29
     6f0:	cf 91       	pop	r28
     6f2:	1f 91       	pop	r17
     6f4:	0f 91       	pop	r16
     6f6:	08 95       	ret

000006f8 <__vector_1>:

//Flags
volatile bool debug_mode = false;

ISR(INT0_vect)
{
     6f8:	1f 92       	push	r1
     6fa:	0f 92       	push	r0
     6fc:	0f b6       	in	r0, 0x3f	; 63
     6fe:	0f 92       	push	r0
     700:	11 24       	eor	r1, r1
     702:	8f 93       	push	r24
	if(menu_index < 7)
     704:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     708:	87 30       	cpi	r24, 0x07	; 7
     70a:	30 f4       	brcc	.+12     	; 0x718 <__vector_1+0x20>
		menu_index++;
     70c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     710:	8f 5f       	subi	r24, 0xFF	; 255
     712:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     716:	03 c0       	rjmp	.+6      	; 0x71e <__vector_1+0x26>
	else
		menu_index = 1;
     718:	81 e0       	ldi	r24, 0x01	; 1
     71a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
     71e:	8f 91       	pop	r24
     720:	0f 90       	pop	r0
     722:	0f be       	out	0x3f, r0	; 63
     724:	0f 90       	pop	r0
     726:	1f 90       	pop	r1
     728:	18 95       	reti

0000072a <__vector_2>:

ISR(INT1_vect)
{
     72a:	1f 92       	push	r1
     72c:	0f 92       	push	r0
     72e:	0f b6       	in	r0, 0x3f	; 63
     730:	0f 92       	push	r0
     732:	11 24       	eor	r1, r1
     734:	2f 93       	push	r18
     736:	3f 93       	push	r19
     738:	4f 93       	push	r20
     73a:	5f 93       	push	r21
     73c:	6f 93       	push	r22
     73e:	7f 93       	push	r23
     740:	8f 93       	push	r24
     742:	9f 93       	push	r25
     744:	af 93       	push	r26
     746:	bf 93       	push	r27
     748:	ef 93       	push	r30
     74a:	ff 93       	push	r31
	if(tst_bit(PIND, PORTD2) == 0)
     74c:	4a 99       	sbic	0x09, 2	; 9
     74e:	07 c0       	rjmp	.+14     	; 0x75e <__vector_2+0x34>
		drinkMaker.makeDrink(&menu_index);
     750:	60 e0       	ldi	r22, 0x00	; 0
     752:	71 e0       	ldi	r23, 0x01	; 1
     754:	81 e3       	ldi	r24, 0x31	; 49
     756:	92 e0       	ldi	r25, 0x02	; 2
     758:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <_ZN10DrinkMaker9makeDrinkEPVh>
     75c:	04 c0       	rjmp	.+8      	; 0x766 <__vector_2+0x3c>
	else
		drinkMaker.refuel();
     75e:	81 e3       	ldi	r24, 0x31	; 49
     760:	92 e0       	ldi	r25, 0x02	; 2
     762:	0e 94 17 01 	call	0x22e	; 0x22e <_ZN10DrinkMaker6refuelEv>
}
     766:	ff 91       	pop	r31
     768:	ef 91       	pop	r30
     76a:	bf 91       	pop	r27
     76c:	af 91       	pop	r26
     76e:	9f 91       	pop	r25
     770:	8f 91       	pop	r24
     772:	7f 91       	pop	r23
     774:	6f 91       	pop	r22
     776:	5f 91       	pop	r21
     778:	4f 91       	pop	r20
     77a:	3f 91       	pop	r19
     77c:	2f 91       	pop	r18
     77e:	0f 90       	pop	r0
     780:	0f be       	out	0x3f, r0	; 63
     782:	0f 90       	pop	r0
     784:	1f 90       	pop	r1
     786:	18 95       	reti

00000788 <__vector_18>:

ISR(USART_RX_vect)
{
     788:	1f 92       	push	r1
     78a:	0f 92       	push	r0
     78c:	0f b6       	in	r0, 0x3f	; 63
     78e:	0f 92       	push	r0
     790:	11 24       	eor	r1, r1
     792:	2f 93       	push	r18
     794:	3f 93       	push	r19
     796:	4f 93       	push	r20
     798:	5f 93       	push	r21
     79a:	6f 93       	push	r22
     79c:	7f 93       	push	r23
     79e:	8f 93       	push	r24
     7a0:	9f 93       	push	r25
     7a2:	af 93       	push	r26
     7a4:	bf 93       	push	r27
     7a6:	ef 93       	push	r30
     7a8:	ff 93       	push	r31
	char receivedByte = UDR0;
     7aa:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	
	if (receivedByte == '0')
     7ae:	80 33       	cpi	r24, 0x30	; 48
     7b0:	11 f4       	brne	.+4      	; 0x7b6 <__vector_18+0x2e>
		_command = 0;
     7b2:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <_command>
	if (receivedByte == '1')
     7b6:	81 33       	cpi	r24, 0x31	; 49
     7b8:	19 f4       	brne	.+6      	; 0x7c0 <__vector_18+0x38>
		_command = 1;
     7ba:	91 e0       	ldi	r25, 0x01	; 1
     7bc:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <_command>
	if (receivedByte == '2')
     7c0:	82 33       	cpi	r24, 0x32	; 50
     7c2:	19 f4       	brne	.+6      	; 0x7ca <__vector_18+0x42>
		_command = 2;
     7c4:	82 e0       	ldi	r24, 0x02	; 2
     7c6:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <_command>
	

	switch(_command){
     7ca:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <_command>
     7ce:	81 30       	cpi	r24, 0x01	; 1
     7d0:	49 f0       	breq	.+18     	; 0x7e4 <__vector_18+0x5c>
     7d2:	18 f0       	brcs	.+6      	; 0x7da <__vector_18+0x52>
     7d4:	82 30       	cpi	r24, 0x02	; 2
     7d6:	51 f0       	breq	.+20     	; 0x7ec <__vector_18+0x64>
     7d8:	0f c0       	rjmp	.+30     	; 0x7f8 <__vector_18+0x70>
		case SHOW_PROFIT:
			drinkMaker.show_profit();
     7da:	81 e3       	ldi	r24, 0x31	; 49
     7dc:	92 e0       	ldi	r25, 0x02	; 2
     7de:	0e 94 e5 02 	call	0x5ca	; 0x5ca <_ZN10DrinkMaker11show_profitEv>
			break;
     7e2:	0a c0       	rjmp	.+20     	; 0x7f8 <__vector_18+0x70>
			
		case DEBUG_MODE:
			debug_mode = true;
     7e4:	81 e0       	ldi	r24, 0x01	; 1
     7e6:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <__data_end>
			break;
     7ea:	06 c0       	rjmp	.+12     	; 0x7f8 <__vector_18+0x70>
			
		case EXIT:
			debug_mode = false;
     7ec:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <__data_end>
			serial.show_menu();
     7f0:	8c e2       	ldi	r24, 0x2C	; 44
     7f2:	92 e0       	ldi	r25, 0x02	; 2
     7f4:	0e 94 3e 05 	call	0xa7c	; 0xa7c <_ZN6Serial9show_menuEv>
			break;
	}
}
     7f8:	ff 91       	pop	r31
     7fa:	ef 91       	pop	r30
     7fc:	bf 91       	pop	r27
     7fe:	af 91       	pop	r26
     800:	9f 91       	pop	r25
     802:	8f 91       	pop	r24
     804:	7f 91       	pop	r23
     806:	6f 91       	pop	r22
     808:	5f 91       	pop	r21
     80a:	4f 91       	pop	r20
     80c:	3f 91       	pop	r19
     80e:	2f 91       	pop	r18
     810:	0f 90       	pop	r0
     812:	0f be       	out	0x3f, r0	; 63
     814:	0f 90       	pop	r0
     816:	1f 90       	pop	r1
     818:	18 95       	reti

0000081a <main>:


int main(void)
{
	//Interrupts configuration
	EICRA = (1<<ISC11) | (1<<ISC10); //Rising edge to INT1
     81a:	e9 e6       	ldi	r30, 0x69	; 105
     81c:	f0 e0       	ldi	r31, 0x00	; 0
     81e:	8c e0       	ldi	r24, 0x0C	; 12
     820:	80 83       	st	Z, r24
	EICRA |= (1<<ISC01) | (1<<ISC00); //Rising edge to INT0
     822:	80 81       	ld	r24, Z
     824:	83 60       	ori	r24, 0x03	; 3
     826:	80 83       	st	Z, r24
	
	EIMSK = (1<<INT1) | (1<<INT0); //Enables INT0 and INT1
     828:	83 e0       	ldi	r24, 0x03	; 3
     82a:	8d bb       	out	0x1d, r24	; 29
	sei();
     82c:	78 94       	sei
	
	//Direction ports configuration
	clr_bit(DDRD, PORTD2); //D2 as input
     82e:	8a b1       	in	r24, 0x0a	; 10
     830:	8b 7f       	andi	r24, 0xFB	; 251
     832:	8a b9       	out	0x0a, r24	; 10
	clr_bit(DDRD, PORTD3); //D3 as input
     834:	8a b1       	in	r24, 0x0a	; 10
     836:	87 7f       	andi	r24, 0xF7	; 247
     838:	8a b9       	out	0x0a, r24	; 10
	
	_7seg.attachToPorts(PORTC0, PORTC1, PORTC2, PORTC3);
     83a:	03 e0       	ldi	r16, 0x03	; 3
     83c:	22 e0       	ldi	r18, 0x02	; 2
     83e:	41 e0       	ldi	r20, 0x01	; 1
     840:	60 e0       	ldi	r22, 0x00	; 0
     842:	88 e2       	ldi	r24, 0x28	; 40
     844:	92 e0       	ldi	r25, 0x02	; 2
     846:	0e 94 70 00 	call	0xe0	; 0xe0 <_ZN11Display7seg13attachToPortsEhhhh>
	serial.show_menu();
     84a:	8c e2       	ldi	r24, 0x2C	; 44
     84c:	92 e0       	ldi	r25, 0x02	; 2
     84e:	0e 94 3e 05 	call	0xa7c	; 0xa7c <_ZN6Serial9show_menuEv>
	
    while (1) 
    {
		_7seg.updateDisplay(&menu_index);
     852:	60 e0       	ldi	r22, 0x00	; 0
     854:	71 e0       	ldi	r23, 0x01	; 1
     856:	88 e2       	ldi	r24, 0x28	; 40
     858:	92 e0       	ldi	r25, 0x02	; 2
     85a:	0e 94 9b 00 	call	0x136	; 0x136 <_ZN11Display7seg13updateDisplayEPVh>
     85e:	f9 cf       	rjmp	.-14     	; 0x852 <main+0x38>

00000860 <_GLOBAL__sub_I_drinkMaker>:
    }
}
     860:	6f ef       	ldi	r22, 0xFF	; 255
     862:	7f ef       	ldi	r23, 0xFF	; 255
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	0e 94 4f 03 	call	0x69e	; 0x69e <_Z41__static_initialization_and_destruction_0ii>
     86c:	08 95       	ret

0000086e <_GLOBAL__sub_D_drinkMaker>:
     86e:	6f ef       	ldi	r22, 0xFF	; 255
     870:	7f ef       	ldi	r23, 0xFF	; 255
     872:	80 e0       	ldi	r24, 0x00	; 0
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	0e 94 4f 03 	call	0x69e	; 0x69e <_Z41__static_initialization_and_destruction_0ii>
     87a:	08 95       	ret

0000087c <_ZN6SerialD1Ev>:
	clr_bit(UCSR0C, UMSEL00);
	
	sei(); //Enables global interrupt
}

Serial::~Serial()
     87c:	08 95       	ret

0000087e <_ZN6Serial11setBaudRateEj>:
	//dtor
}

void Serial::setBaudRate(unsigned int baud_rate)
{
	this->bd = baud_rate;
     87e:	fc 01       	movw	r30, r24
     880:	71 83       	std	Z+1, r23	; 0x01
     882:	60 83       	st	Z, r22
	unsigned int baud_prescale = (((F_CPU / (this->bd*16UL)))-1);
     884:	cb 01       	movw	r24, r22
     886:	a0 e0       	ldi	r26, 0x00	; 0
     888:	b0 e0       	ldi	r27, 0x00	; 0
     88a:	88 0f       	add	r24, r24
     88c:	99 1f       	adc	r25, r25
     88e:	aa 1f       	adc	r26, r26
     890:	bb 1f       	adc	r27, r27
     892:	88 0f       	add	r24, r24
     894:	99 1f       	adc	r25, r25
     896:	aa 1f       	adc	r26, r26
     898:	bb 1f       	adc	r27, r27
     89a:	9c 01       	movw	r18, r24
     89c:	ad 01       	movw	r20, r26
     89e:	22 0f       	add	r18, r18
     8a0:	33 1f       	adc	r19, r19
     8a2:	44 1f       	adc	r20, r20
     8a4:	55 1f       	adc	r21, r21
     8a6:	22 0f       	add	r18, r18
     8a8:	33 1f       	adc	r19, r19
     8aa:	44 1f       	adc	r20, r20
     8ac:	55 1f       	adc	r21, r21
     8ae:	60 e0       	ldi	r22, 0x00	; 0
     8b0:	74 e2       	ldi	r23, 0x24	; 36
     8b2:	84 ef       	ldi	r24, 0xF4	; 244
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	0e 94 48 07 	call	0xe90	; 0xe90 <__udivmodsi4>
     8ba:	21 50       	subi	r18, 0x01	; 1
     8bc:	31 09       	sbc	r19, r1
	
	UBRR0H = (baud_prescale >> 8);
     8be:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = baud_prescale;
     8c2:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     8c6:	08 95       	ret

000008c8 <_ZN6Serial10setStopBitEh>:
}

void Serial::setStopBit(unsigned char stop_bit)
{
	this->sb = stop_bit;
     8c8:	fc 01       	movw	r30, r24
     8ca:	62 83       	std	Z+2, r22	; 0x02
	
	switch(this->sb){
     8cc:	61 30       	cpi	r22, 0x01	; 1
     8ce:	19 f0       	breq	.+6      	; 0x8d6 <_ZN6Serial10setStopBitEh+0xe>
     8d0:	62 30       	cpi	r22, 0x02	; 2
     8d2:	39 f0       	breq	.+14     	; 0x8e2 <_ZN6Serial10setStopBitEh+0x1a>
     8d4:	0c c0       	rjmp	.+24     	; 0x8ee <_ZN6Serial10setStopBitEh+0x26>
		case 1:
			clr_bit(UCSR0C, USBS0);
     8d6:	e2 ec       	ldi	r30, 0xC2	; 194
     8d8:	f0 e0       	ldi	r31, 0x00	; 0
     8da:	80 81       	ld	r24, Z
     8dc:	87 7f       	andi	r24, 0xF7	; 247
     8de:	80 83       	st	Z, r24
			break;
     8e0:	08 95       	ret
		
		case 2:
			set_bit(UCSR0C, USBS0);
     8e2:	e2 ec       	ldi	r30, 0xC2	; 194
     8e4:	f0 e0       	ldi	r31, 0x00	; 0
     8e6:	80 81       	ld	r24, Z
     8e8:	88 60       	ori	r24, 0x08	; 8
     8ea:	80 83       	st	Z, r24
			break;
     8ec:	08 95       	ret
			
		default:
			clr_bit(UCSR0C, USBS0);
     8ee:	e2 ec       	ldi	r30, 0xC2	; 194
     8f0:	f0 e0       	ldi	r31, 0x00	; 0
     8f2:	80 81       	ld	r24, Z
     8f4:	87 7f       	andi	r24, 0xF7	; 247
     8f6:	80 83       	st	Z, r24
     8f8:	08 95       	ret

000008fa <_ZN6Serial11setByteSizeEh>:
		
}

void Serial::setByteSize(unsigned char byte_size)
{
	this->bs = byte_size;
     8fa:	fc 01       	movw	r30, r24
     8fc:	63 83       	std	Z+3, r22	; 0x03
	
	switch(this->bs){
     8fe:	67 30       	cpi	r22, 0x07	; 7
     900:	19 f1       	breq	.+70     	; 0x948 <__stack+0x49>
     902:	28 f4       	brcc	.+10     	; 0x90e <__stack+0xf>
     904:	65 30       	cpi	r22, 0x05	; 5
     906:	41 f0       	breq	.+16     	; 0x918 <__stack+0x19>
     908:	66 30       	cpi	r22, 0x06	; 6
     90a:	91 f0       	breq	.+36     	; 0x930 <__stack+0x31>
     90c:	41 c0       	rjmp	.+130    	; 0x990 <__stack+0x91>
     90e:	68 30       	cpi	r22, 0x08	; 8
     910:	39 f1       	breq	.+78     	; 0x960 <__stack+0x61>
     912:	69 30       	cpi	r22, 0x09	; 9
     914:	89 f1       	breq	.+98     	; 0x978 <__stack+0x79>
     916:	3c c0       	rjmp	.+120    	; 0x990 <__stack+0x91>
		case 5:
			clr_bit(UCSR0C, UCSZ02);
     918:	e2 ec       	ldi	r30, 0xC2	; 194
     91a:	f0 e0       	ldi	r31, 0x00	; 0
     91c:	80 81       	ld	r24, Z
     91e:	8b 7f       	andi	r24, 0xFB	; 251
     920:	80 83       	st	Z, r24
			clr_bit(UCSR0C, UCSZ01);
     922:	80 81       	ld	r24, Z
     924:	8b 7f       	andi	r24, 0xFB	; 251
     926:	80 83       	st	Z, r24
			clr_bit(UCSR0C, UCSZ00);
     928:	80 81       	ld	r24, Z
     92a:	8d 7f       	andi	r24, 0xFD	; 253
     92c:	80 83       	st	Z, r24
			break;
     92e:	08 95       	ret
			
		case 6:
			clr_bit(UCSR0C, UCSZ02);
     930:	e2 ec       	ldi	r30, 0xC2	; 194
     932:	f0 e0       	ldi	r31, 0x00	; 0
     934:	80 81       	ld	r24, Z
     936:	8b 7f       	andi	r24, 0xFB	; 251
     938:	80 83       	st	Z, r24
			clr_bit(UCSR0C, UCSZ01);
     93a:	80 81       	ld	r24, Z
     93c:	8b 7f       	andi	r24, 0xFB	; 251
     93e:	80 83       	st	Z, r24
			set_bit(UCSR0C, UCSZ00);
     940:	80 81       	ld	r24, Z
     942:	82 60       	ori	r24, 0x02	; 2
     944:	80 83       	st	Z, r24
			break;
     946:	08 95       	ret
			
		case 7:
			clr_bit(UCSR0C, UCSZ02);
     948:	e2 ec       	ldi	r30, 0xC2	; 194
     94a:	f0 e0       	ldi	r31, 0x00	; 0
     94c:	80 81       	ld	r24, Z
     94e:	8b 7f       	andi	r24, 0xFB	; 251
     950:	80 83       	st	Z, r24
			set_bit(UCSR0C, UCSZ01);
     952:	80 81       	ld	r24, Z
     954:	84 60       	ori	r24, 0x04	; 4
     956:	80 83       	st	Z, r24
			clr_bit(UCSR0C, UCSZ00);
     958:	80 81       	ld	r24, Z
     95a:	8d 7f       	andi	r24, 0xFD	; 253
     95c:	80 83       	st	Z, r24
			break;
     95e:	08 95       	ret
			
		case 8:
			clr_bit(UCSR0C, UCSZ02);
     960:	e2 ec       	ldi	r30, 0xC2	; 194
     962:	f0 e0       	ldi	r31, 0x00	; 0
     964:	80 81       	ld	r24, Z
     966:	8b 7f       	andi	r24, 0xFB	; 251
     968:	80 83       	st	Z, r24
			set_bit(UCSR0C, UCSZ01);
     96a:	80 81       	ld	r24, Z
     96c:	84 60       	ori	r24, 0x04	; 4
     96e:	80 83       	st	Z, r24
			set_bit(UCSR0C, UCSZ00);
     970:	80 81       	ld	r24, Z
     972:	82 60       	ori	r24, 0x02	; 2
     974:	80 83       	st	Z, r24
			break;
     976:	08 95       	ret
			
		case 9:
			set_bit(UCSR0C, UCSZ02);
     978:	e2 ec       	ldi	r30, 0xC2	; 194
     97a:	f0 e0       	ldi	r31, 0x00	; 0
     97c:	80 81       	ld	r24, Z
     97e:	84 60       	ori	r24, 0x04	; 4
     980:	80 83       	st	Z, r24
			set_bit(UCSR0C, UCSZ01);
     982:	80 81       	ld	r24, Z
     984:	84 60       	ori	r24, 0x04	; 4
     986:	80 83       	st	Z, r24
			set_bit(UCSR0C, UCSZ00);
     988:	80 81       	ld	r24, Z
     98a:	82 60       	ori	r24, 0x02	; 2
     98c:	80 83       	st	Z, r24
			break;
     98e:	08 95       	ret
			
		default:
			clr_bit(UCSR0C, UCSZ02);
     990:	e2 ec       	ldi	r30, 0xC2	; 194
     992:	f0 e0       	ldi	r31, 0x00	; 0
     994:	80 81       	ld	r24, Z
     996:	8b 7f       	andi	r24, 0xFB	; 251
     998:	80 83       	st	Z, r24
			set_bit(UCSR0C, UCSZ01);
     99a:	80 81       	ld	r24, Z
     99c:	84 60       	ori	r24, 0x04	; 4
     99e:	80 83       	st	Z, r24
			set_bit(UCSR0C, UCSZ00);
     9a0:	80 81       	ld	r24, Z
     9a2:	82 60       	ori	r24, 0x02	; 2
     9a4:	80 83       	st	Z, r24
     9a6:	08 95       	ret

000009a8 <_ZN6Serial9setParityEh>:
	}
}

void Serial::setParity(unsigned char parity)
{
	this->pr = parity;
     9a8:	fc 01       	movw	r30, r24
     9aa:	64 83       	std	Z+4, r22	; 0x04
	
	switch(this->pr){
     9ac:	6e 34       	cpi	r22, 0x4E	; 78
     9ae:	29 f0       	breq	.+10     	; 0x9ba <_ZN6Serial9setParityEh+0x12>
     9b0:	6f 34       	cpi	r22, 0x4F	; 79
     9b2:	a9 f0       	breq	.+42     	; 0x9de <_ZN6Serial9setParityEh+0x36>
     9b4:	65 34       	cpi	r22, 0x45	; 69
     9b6:	e1 f4       	brne	.+56     	; 0x9f0 <_ZN6Serial9setParityEh+0x48>
     9b8:	09 c0       	rjmp	.+18     	; 0x9cc <_ZN6Serial9setParityEh+0x24>
		case 'N':
			clr_bit(UCSR0C, UPM01);
     9ba:	e2 ec       	ldi	r30, 0xC2	; 194
     9bc:	f0 e0       	ldi	r31, 0x00	; 0
     9be:	80 81       	ld	r24, Z
     9c0:	8f 7d       	andi	r24, 0xDF	; 223
     9c2:	80 83       	st	Z, r24
			clr_bit(UCSR0C, UPM00);
     9c4:	80 81       	ld	r24, Z
     9c6:	8f 7e       	andi	r24, 0xEF	; 239
     9c8:	80 83       	st	Z, r24
			break;
     9ca:	08 95       	ret
		
		case 'E':
			set_bit(UCSR0C, UPM01);
     9cc:	e2 ec       	ldi	r30, 0xC2	; 194
     9ce:	f0 e0       	ldi	r31, 0x00	; 0
     9d0:	80 81       	ld	r24, Z
     9d2:	80 62       	ori	r24, 0x20	; 32
     9d4:	80 83       	st	Z, r24
			set_bit(UCSR0C, UPM00);
     9d6:	80 81       	ld	r24, Z
     9d8:	80 61       	ori	r24, 0x10	; 16
     9da:	80 83       	st	Z, r24
			break;
     9dc:	08 95       	ret
		
		case 'O':
			set_bit(UCSR0C, UPM01);
     9de:	e2 ec       	ldi	r30, 0xC2	; 194
     9e0:	f0 e0       	ldi	r31, 0x00	; 0
     9e2:	80 81       	ld	r24, Z
     9e4:	80 62       	ori	r24, 0x20	; 32
     9e6:	80 83       	st	Z, r24
			clr_bit(UCSR0C, UPM00);
     9e8:	80 81       	ld	r24, Z
     9ea:	8f 7e       	andi	r24, 0xEF	; 239
     9ec:	80 83       	st	Z, r24
			break;
     9ee:	08 95       	ret
		default:
			clr_bit(UCSR0C, UPM01);
     9f0:	e2 ec       	ldi	r30, 0xC2	; 194
     9f2:	f0 e0       	ldi	r31, 0x00	; 0
     9f4:	80 81       	ld	r24, Z
     9f6:	8f 7d       	andi	r24, 0xDF	; 223
     9f8:	80 83       	st	Z, r24
			clr_bit(UCSR0C, UPM00);
     9fa:	80 81       	ld	r24, Z
     9fc:	8f 7e       	andi	r24, 0xEF	; 239
     9fe:	80 83       	st	Z, r24
     a00:	08 95       	ret

00000a02 <_ZN6SerialC1Ev>:
 *  Author: Fernando Kirchner
 */ 

#include "serial.h"

Serial::Serial()
     a02:	cf 93       	push	r28
     a04:	df 93       	push	r29
     a06:	ec 01       	movw	r28, r24
{
	setBaudRate(9600);
     a08:	60 e8       	ldi	r22, 0x80	; 128
     a0a:	75 e2       	ldi	r23, 0x25	; 37
     a0c:	0e 94 3f 04 	call	0x87e	; 0x87e <_ZN6Serial11setBaudRateEj>
	setStopBit(1);
     a10:	61 e0       	ldi	r22, 0x01	; 1
     a12:	ce 01       	movw	r24, r28
     a14:	0e 94 64 04 	call	0x8c8	; 0x8c8 <_ZN6Serial10setStopBitEh>
	setByteSize(8);
     a18:	68 e0       	ldi	r22, 0x08	; 8
     a1a:	ce 01       	movw	r24, r28
     a1c:	0e 94 7d 04 	call	0x8fa	; 0x8fa <_ZN6Serial11setByteSizeEh>
	setParity('N');
     a20:	6e e4       	ldi	r22, 0x4E	; 78
     a22:	ce 01       	movw	r24, r28
     a24:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_ZN6Serial9setParityEh>
	
	/*-- Setting direction registers --*/
	DDRD |= 0b00000010;
     a28:	8a b1       	in	r24, 0x0a	; 10
     a2a:	82 60       	ori	r24, 0x02	; 2
     a2c:	8a b9       	out	0x0a, r24	; 10
	
	/* -- Setting serial registers --*/
	UCSR0B = (1<<TXEN0) | (1<<RXEN0); //Enables the TX and RX
     a2e:	e1 ec       	ldi	r30, 0xC1	; 193
     a30:	f0 e0       	ldi	r31, 0x00	; 0
     a32:	88 e1       	ldi	r24, 0x18	; 24
     a34:	80 83       	st	Z, r24
	UCSR0B |= (1<<RXCIE0); //Enables the RX interrupt
     a36:	80 81       	ld	r24, Z
     a38:	80 68       	ori	r24, 0x80	; 128
     a3a:	80 83       	st	Z, r24
	
	//Sets assync mode
	clr_bit(UCSR0C, UMSEL01);
     a3c:	e2 ec       	ldi	r30, 0xC2	; 194
     a3e:	f0 e0       	ldi	r31, 0x00	; 0
     a40:	80 81       	ld	r24, Z
     a42:	8f 77       	andi	r24, 0x7F	; 127
     a44:	80 83       	st	Z, r24
	clr_bit(UCSR0C, UMSEL00);
     a46:	80 81       	ld	r24, Z
     a48:	8f 7b       	andi	r24, 0xBF	; 191
     a4a:	80 83       	st	Z, r24
	
	sei(); //Enables global interrupt
     a4c:	78 94       	sei
}
     a4e:	df 91       	pop	r29
     a50:	cf 91       	pop	r28
     a52:	08 95       	ret

00000a54 <_ZN6Serial8transmitEPc>:
			break;
	}
}

void Serial::transmit(char *data)
{
     a54:	fb 01       	movw	r30, r22
	while(*data != '\0'){
     a56:	90 81       	ld	r25, Z
     a58:	99 23       	and	r25, r25
     a5a:	41 f0       	breq	.+16     	; 0xa6c <_ZN6Serial8transmitEPc+0x18>
		while(!(UCSR0A & (1<<UDRE0))); //Waits for empty buffer to transmit
     a5c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     a60:	85 ff       	sbrs	r24, 5
     a62:	fc cf       	rjmp	.-8      	; 0xa5c <_ZN6Serial8transmitEPc+0x8>
		
		//Put data into buffer and send data
		UDR0 = *data;
     a64:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		data++;
     a68:	31 96       	adiw	r30, 0x01	; 1
	}
}

void Serial::transmit(char *data)
{
	while(*data != '\0'){
     a6a:	f5 cf       	rjmp	.-22     	; 0xa56 <_ZN6Serial8transmitEPc+0x2>
     a6c:	08 95       	ret

00000a6e <_ZN6Serial12transmitCharEc>:
	}
}

void Serial::transmitChar(char data)
{
	while(!(UCSR0A & (1<<UDRE0))); //Waits for empty buffer to transmit
     a6e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     a72:	85 ff       	sbrs	r24, 5
     a74:	fc cf       	rjmp	.-8      	; 0xa6e <_ZN6Serial12transmitCharEc>
	UDR0 = data; //Put data into buffer and send data
     a76:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     a7a:	08 95       	ret

00000a7c <_ZN6Serial9show_menuEv>:
}

void Serial::show_menu()
{
     a7c:	cf 93       	push	r28
     a7e:	df 93       	push	r29
     a80:	ec 01       	movw	r28, r24
	this->transmit("0 - Mostrar Lucro");
     a82:	6a ef       	ldi	r22, 0xFA	; 250
     a84:	71 e0       	ldi	r23, 0x01	; 1
     a86:	0e 94 2a 05 	call	0xa54	; 0xa54 <_ZN6Serial8transmitEPc>
	this->transmitChar(NEWLINE);
     a8a:	6d e0       	ldi	r22, 0x0D	; 13
     a8c:	ce 01       	movw	r24, r28
     a8e:	0e 94 37 05 	call	0xa6e	; 0xa6e <_ZN6Serial12transmitCharEc>
	
	this->transmit("1 - Debug");
     a92:	6c e0       	ldi	r22, 0x0C	; 12
     a94:	72 e0       	ldi	r23, 0x02	; 2
     a96:	ce 01       	movw	r24, r28
     a98:	0e 94 2a 05 	call	0xa54	; 0xa54 <_ZN6Serial8transmitEPc>
	this->transmitChar(NEWLINE);
     a9c:	6d e0       	ldi	r22, 0x0D	; 13
     a9e:	ce 01       	movw	r24, r28
     aa0:	0e 94 37 05 	call	0xa6e	; 0xa6e <_ZN6Serial12transmitCharEc>
	
	this->transmit("2 - Sair Debug");
     aa4:	66 e1       	ldi	r22, 0x16	; 22
     aa6:	72 e0       	ldi	r23, 0x02	; 2
     aa8:	ce 01       	movw	r24, r28
     aaa:	0e 94 2a 05 	call	0xa54	; 0xa54 <_ZN6Serial8transmitEPc>
	this->transmitChar(NEWLINE);
     aae:	6d e0       	ldi	r22, 0x0D	; 13
     ab0:	ce 01       	movw	r24, r28
     ab2:	0e 94 37 05 	call	0xa6e	; 0xa6e <_ZN6Serial12transmitCharEc>
     ab6:	df 91       	pop	r29
     ab8:	cf 91       	pop	r28
     aba:	08 95       	ret

00000abc <__subsf3>:
     abc:	50 58       	subi	r21, 0x80	; 128

00000abe <__addsf3>:
     abe:	bb 27       	eor	r27, r27
     ac0:	aa 27       	eor	r26, r26
     ac2:	0e 94 76 05 	call	0xaec	; 0xaec <__addsf3x>
     ac6:	0c 94 55 06 	jmp	0xcaa	; 0xcaa <__fp_round>
     aca:	0e 94 47 06 	call	0xc8e	; 0xc8e <__fp_pscA>
     ace:	38 f0       	brcs	.+14     	; 0xade <__addsf3+0x20>
     ad0:	0e 94 4e 06 	call	0xc9c	; 0xc9c <__fp_pscB>
     ad4:	20 f0       	brcs	.+8      	; 0xade <__addsf3+0x20>
     ad6:	39 f4       	brne	.+14     	; 0xae6 <__addsf3+0x28>
     ad8:	9f 3f       	cpi	r25, 0xFF	; 255
     ada:	19 f4       	brne	.+6      	; 0xae2 <__addsf3+0x24>
     adc:	26 f4       	brtc	.+8      	; 0xae6 <__addsf3+0x28>
     ade:	0c 94 44 06 	jmp	0xc88	; 0xc88 <__fp_nan>
     ae2:	0e f4       	brtc	.+2      	; 0xae6 <__addsf3+0x28>
     ae4:	e0 95       	com	r30
     ae6:	e7 fb       	bst	r30, 7
     ae8:	0c 94 3e 06 	jmp	0xc7c	; 0xc7c <__fp_inf>

00000aec <__addsf3x>:
     aec:	e9 2f       	mov	r30, r25
     aee:	0e 94 66 06 	call	0xccc	; 0xccc <__fp_split3>
     af2:	58 f3       	brcs	.-42     	; 0xaca <__addsf3+0xc>
     af4:	ba 17       	cp	r27, r26
     af6:	62 07       	cpc	r22, r18
     af8:	73 07       	cpc	r23, r19
     afa:	84 07       	cpc	r24, r20
     afc:	95 07       	cpc	r25, r21
     afe:	20 f0       	brcs	.+8      	; 0xb08 <__addsf3x+0x1c>
     b00:	79 f4       	brne	.+30     	; 0xb20 <__addsf3x+0x34>
     b02:	a6 f5       	brtc	.+104    	; 0xb6c <__addsf3x+0x80>
     b04:	0c 94 88 06 	jmp	0xd10	; 0xd10 <__fp_zero>
     b08:	0e f4       	brtc	.+2      	; 0xb0c <__addsf3x+0x20>
     b0a:	e0 95       	com	r30
     b0c:	0b 2e       	mov	r0, r27
     b0e:	ba 2f       	mov	r27, r26
     b10:	a0 2d       	mov	r26, r0
     b12:	0b 01       	movw	r0, r22
     b14:	b9 01       	movw	r22, r18
     b16:	90 01       	movw	r18, r0
     b18:	0c 01       	movw	r0, r24
     b1a:	ca 01       	movw	r24, r20
     b1c:	a0 01       	movw	r20, r0
     b1e:	11 24       	eor	r1, r1
     b20:	ff 27       	eor	r31, r31
     b22:	59 1b       	sub	r21, r25
     b24:	99 f0       	breq	.+38     	; 0xb4c <__addsf3x+0x60>
     b26:	59 3f       	cpi	r21, 0xF9	; 249
     b28:	50 f4       	brcc	.+20     	; 0xb3e <__addsf3x+0x52>
     b2a:	50 3e       	cpi	r21, 0xE0	; 224
     b2c:	68 f1       	brcs	.+90     	; 0xb88 <__addsf3x+0x9c>
     b2e:	1a 16       	cp	r1, r26
     b30:	f0 40       	sbci	r31, 0x00	; 0
     b32:	a2 2f       	mov	r26, r18
     b34:	23 2f       	mov	r18, r19
     b36:	34 2f       	mov	r19, r20
     b38:	44 27       	eor	r20, r20
     b3a:	58 5f       	subi	r21, 0xF8	; 248
     b3c:	f3 cf       	rjmp	.-26     	; 0xb24 <__addsf3x+0x38>
     b3e:	46 95       	lsr	r20
     b40:	37 95       	ror	r19
     b42:	27 95       	ror	r18
     b44:	a7 95       	ror	r26
     b46:	f0 40       	sbci	r31, 0x00	; 0
     b48:	53 95       	inc	r21
     b4a:	c9 f7       	brne	.-14     	; 0xb3e <__addsf3x+0x52>
     b4c:	7e f4       	brtc	.+30     	; 0xb6c <__addsf3x+0x80>
     b4e:	1f 16       	cp	r1, r31
     b50:	ba 0b       	sbc	r27, r26
     b52:	62 0b       	sbc	r22, r18
     b54:	73 0b       	sbc	r23, r19
     b56:	84 0b       	sbc	r24, r20
     b58:	ba f0       	brmi	.+46     	; 0xb88 <__addsf3x+0x9c>
     b5a:	91 50       	subi	r25, 0x01	; 1
     b5c:	a1 f0       	breq	.+40     	; 0xb86 <__addsf3x+0x9a>
     b5e:	ff 0f       	add	r31, r31
     b60:	bb 1f       	adc	r27, r27
     b62:	66 1f       	adc	r22, r22
     b64:	77 1f       	adc	r23, r23
     b66:	88 1f       	adc	r24, r24
     b68:	c2 f7       	brpl	.-16     	; 0xb5a <__addsf3x+0x6e>
     b6a:	0e c0       	rjmp	.+28     	; 0xb88 <__addsf3x+0x9c>
     b6c:	ba 0f       	add	r27, r26
     b6e:	62 1f       	adc	r22, r18
     b70:	73 1f       	adc	r23, r19
     b72:	84 1f       	adc	r24, r20
     b74:	48 f4       	brcc	.+18     	; 0xb88 <__addsf3x+0x9c>
     b76:	87 95       	ror	r24
     b78:	77 95       	ror	r23
     b7a:	67 95       	ror	r22
     b7c:	b7 95       	ror	r27
     b7e:	f7 95       	ror	r31
     b80:	9e 3f       	cpi	r25, 0xFE	; 254
     b82:	08 f0       	brcs	.+2      	; 0xb86 <__addsf3x+0x9a>
     b84:	b0 cf       	rjmp	.-160    	; 0xae6 <__addsf3+0x28>
     b86:	93 95       	inc	r25
     b88:	88 0f       	add	r24, r24
     b8a:	08 f0       	brcs	.+2      	; 0xb8e <__addsf3x+0xa2>
     b8c:	99 27       	eor	r25, r25
     b8e:	ee 0f       	add	r30, r30
     b90:	97 95       	ror	r25
     b92:	87 95       	ror	r24
     b94:	08 95       	ret

00000b96 <__fixsfsi>:
     b96:	0e 94 d2 05 	call	0xba4	; 0xba4 <__fixunssfsi>
     b9a:	68 94       	set
     b9c:	b1 11       	cpse	r27, r1
     b9e:	0c 94 89 06 	jmp	0xd12	; 0xd12 <__fp_szero>
     ba2:	08 95       	ret

00000ba4 <__fixunssfsi>:
     ba4:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__fp_splitA>
     ba8:	88 f0       	brcs	.+34     	; 0xbcc <__fixunssfsi+0x28>
     baa:	9f 57       	subi	r25, 0x7F	; 127
     bac:	98 f0       	brcs	.+38     	; 0xbd4 <__fixunssfsi+0x30>
     bae:	b9 2f       	mov	r27, r25
     bb0:	99 27       	eor	r25, r25
     bb2:	b7 51       	subi	r27, 0x17	; 23
     bb4:	b0 f0       	brcs	.+44     	; 0xbe2 <__fixunssfsi+0x3e>
     bb6:	e1 f0       	breq	.+56     	; 0xbf0 <__fixunssfsi+0x4c>
     bb8:	66 0f       	add	r22, r22
     bba:	77 1f       	adc	r23, r23
     bbc:	88 1f       	adc	r24, r24
     bbe:	99 1f       	adc	r25, r25
     bc0:	1a f0       	brmi	.+6      	; 0xbc8 <__fixunssfsi+0x24>
     bc2:	ba 95       	dec	r27
     bc4:	c9 f7       	brne	.-14     	; 0xbb8 <__fixunssfsi+0x14>
     bc6:	14 c0       	rjmp	.+40     	; 0xbf0 <__fixunssfsi+0x4c>
     bc8:	b1 30       	cpi	r27, 0x01	; 1
     bca:	91 f0       	breq	.+36     	; 0xbf0 <__fixunssfsi+0x4c>
     bcc:	0e 94 88 06 	call	0xd10	; 0xd10 <__fp_zero>
     bd0:	b1 e0       	ldi	r27, 0x01	; 1
     bd2:	08 95       	ret
     bd4:	0c 94 88 06 	jmp	0xd10	; 0xd10 <__fp_zero>
     bd8:	67 2f       	mov	r22, r23
     bda:	78 2f       	mov	r23, r24
     bdc:	88 27       	eor	r24, r24
     bde:	b8 5f       	subi	r27, 0xF8	; 248
     be0:	39 f0       	breq	.+14     	; 0xbf0 <__fixunssfsi+0x4c>
     be2:	b9 3f       	cpi	r27, 0xF9	; 249
     be4:	cc f3       	brlt	.-14     	; 0xbd8 <__fixunssfsi+0x34>
     be6:	86 95       	lsr	r24
     be8:	77 95       	ror	r23
     bea:	67 95       	ror	r22
     bec:	b3 95       	inc	r27
     bee:	d9 f7       	brne	.-10     	; 0xbe6 <__fixunssfsi+0x42>
     bf0:	3e f4       	brtc	.+14     	; 0xc00 <__fixunssfsi+0x5c>
     bf2:	90 95       	com	r25
     bf4:	80 95       	com	r24
     bf6:	70 95       	com	r23
     bf8:	61 95       	neg	r22
     bfa:	7f 4f       	sbci	r23, 0xFF	; 255
     bfc:	8f 4f       	sbci	r24, 0xFF	; 255
     bfe:	9f 4f       	sbci	r25, 0xFF	; 255
     c00:	08 95       	ret

00000c02 <__floatunsisf>:
     c02:	e8 94       	clt
     c04:	09 c0       	rjmp	.+18     	; 0xc18 <__floatsisf+0x12>

00000c06 <__floatsisf>:
     c06:	97 fb       	bst	r25, 7
     c08:	3e f4       	brtc	.+14     	; 0xc18 <__floatsisf+0x12>
     c0a:	90 95       	com	r25
     c0c:	80 95       	com	r24
     c0e:	70 95       	com	r23
     c10:	61 95       	neg	r22
     c12:	7f 4f       	sbci	r23, 0xFF	; 255
     c14:	8f 4f       	sbci	r24, 0xFF	; 255
     c16:	9f 4f       	sbci	r25, 0xFF	; 255
     c18:	99 23       	and	r25, r25
     c1a:	a9 f0       	breq	.+42     	; 0xc46 <__floatsisf+0x40>
     c1c:	f9 2f       	mov	r31, r25
     c1e:	96 e9       	ldi	r25, 0x96	; 150
     c20:	bb 27       	eor	r27, r27
     c22:	93 95       	inc	r25
     c24:	f6 95       	lsr	r31
     c26:	87 95       	ror	r24
     c28:	77 95       	ror	r23
     c2a:	67 95       	ror	r22
     c2c:	b7 95       	ror	r27
     c2e:	f1 11       	cpse	r31, r1
     c30:	f8 cf       	rjmp	.-16     	; 0xc22 <__floatsisf+0x1c>
     c32:	fa f4       	brpl	.+62     	; 0xc72 <__floatsisf+0x6c>
     c34:	bb 0f       	add	r27, r27
     c36:	11 f4       	brne	.+4      	; 0xc3c <__floatsisf+0x36>
     c38:	60 ff       	sbrs	r22, 0
     c3a:	1b c0       	rjmp	.+54     	; 0xc72 <__floatsisf+0x6c>
     c3c:	6f 5f       	subi	r22, 0xFF	; 255
     c3e:	7f 4f       	sbci	r23, 0xFF	; 255
     c40:	8f 4f       	sbci	r24, 0xFF	; 255
     c42:	9f 4f       	sbci	r25, 0xFF	; 255
     c44:	16 c0       	rjmp	.+44     	; 0xc72 <__floatsisf+0x6c>
     c46:	88 23       	and	r24, r24
     c48:	11 f0       	breq	.+4      	; 0xc4e <__floatsisf+0x48>
     c4a:	96 e9       	ldi	r25, 0x96	; 150
     c4c:	11 c0       	rjmp	.+34     	; 0xc70 <__floatsisf+0x6a>
     c4e:	77 23       	and	r23, r23
     c50:	21 f0       	breq	.+8      	; 0xc5a <__floatsisf+0x54>
     c52:	9e e8       	ldi	r25, 0x8E	; 142
     c54:	87 2f       	mov	r24, r23
     c56:	76 2f       	mov	r23, r22
     c58:	05 c0       	rjmp	.+10     	; 0xc64 <__floatsisf+0x5e>
     c5a:	66 23       	and	r22, r22
     c5c:	71 f0       	breq	.+28     	; 0xc7a <__floatsisf+0x74>
     c5e:	96 e8       	ldi	r25, 0x86	; 134
     c60:	86 2f       	mov	r24, r22
     c62:	70 e0       	ldi	r23, 0x00	; 0
     c64:	60 e0       	ldi	r22, 0x00	; 0
     c66:	2a f0       	brmi	.+10     	; 0xc72 <__floatsisf+0x6c>
     c68:	9a 95       	dec	r25
     c6a:	66 0f       	add	r22, r22
     c6c:	77 1f       	adc	r23, r23
     c6e:	88 1f       	adc	r24, r24
     c70:	da f7       	brpl	.-10     	; 0xc68 <__floatsisf+0x62>
     c72:	88 0f       	add	r24, r24
     c74:	96 95       	lsr	r25
     c76:	87 95       	ror	r24
     c78:	97 f9       	bld	r25, 7
     c7a:	08 95       	ret

00000c7c <__fp_inf>:
     c7c:	97 f9       	bld	r25, 7
     c7e:	9f 67       	ori	r25, 0x7F	; 127
     c80:	80 e8       	ldi	r24, 0x80	; 128
     c82:	70 e0       	ldi	r23, 0x00	; 0
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	08 95       	ret

00000c88 <__fp_nan>:
     c88:	9f ef       	ldi	r25, 0xFF	; 255
     c8a:	80 ec       	ldi	r24, 0xC0	; 192
     c8c:	08 95       	ret

00000c8e <__fp_pscA>:
     c8e:	00 24       	eor	r0, r0
     c90:	0a 94       	dec	r0
     c92:	16 16       	cp	r1, r22
     c94:	17 06       	cpc	r1, r23
     c96:	18 06       	cpc	r1, r24
     c98:	09 06       	cpc	r0, r25
     c9a:	08 95       	ret

00000c9c <__fp_pscB>:
     c9c:	00 24       	eor	r0, r0
     c9e:	0a 94       	dec	r0
     ca0:	12 16       	cp	r1, r18
     ca2:	13 06       	cpc	r1, r19
     ca4:	14 06       	cpc	r1, r20
     ca6:	05 06       	cpc	r0, r21
     ca8:	08 95       	ret

00000caa <__fp_round>:
     caa:	09 2e       	mov	r0, r25
     cac:	03 94       	inc	r0
     cae:	00 0c       	add	r0, r0
     cb0:	11 f4       	brne	.+4      	; 0xcb6 <__fp_round+0xc>
     cb2:	88 23       	and	r24, r24
     cb4:	52 f0       	brmi	.+20     	; 0xcca <__fp_round+0x20>
     cb6:	bb 0f       	add	r27, r27
     cb8:	40 f4       	brcc	.+16     	; 0xcca <__fp_round+0x20>
     cba:	bf 2b       	or	r27, r31
     cbc:	11 f4       	brne	.+4      	; 0xcc2 <__fp_round+0x18>
     cbe:	60 ff       	sbrs	r22, 0
     cc0:	04 c0       	rjmp	.+8      	; 0xcca <__fp_round+0x20>
     cc2:	6f 5f       	subi	r22, 0xFF	; 255
     cc4:	7f 4f       	sbci	r23, 0xFF	; 255
     cc6:	8f 4f       	sbci	r24, 0xFF	; 255
     cc8:	9f 4f       	sbci	r25, 0xFF	; 255
     cca:	08 95       	ret

00000ccc <__fp_split3>:
     ccc:	57 fd       	sbrc	r21, 7
     cce:	90 58       	subi	r25, 0x80	; 128
     cd0:	44 0f       	add	r20, r20
     cd2:	55 1f       	adc	r21, r21
     cd4:	59 f0       	breq	.+22     	; 0xcec <__fp_splitA+0x10>
     cd6:	5f 3f       	cpi	r21, 0xFF	; 255
     cd8:	71 f0       	breq	.+28     	; 0xcf6 <__fp_splitA+0x1a>
     cda:	47 95       	ror	r20

00000cdc <__fp_splitA>:
     cdc:	88 0f       	add	r24, r24
     cde:	97 fb       	bst	r25, 7
     ce0:	99 1f       	adc	r25, r25
     ce2:	61 f0       	breq	.+24     	; 0xcfc <__fp_splitA+0x20>
     ce4:	9f 3f       	cpi	r25, 0xFF	; 255
     ce6:	79 f0       	breq	.+30     	; 0xd06 <__fp_splitA+0x2a>
     ce8:	87 95       	ror	r24
     cea:	08 95       	ret
     cec:	12 16       	cp	r1, r18
     cee:	13 06       	cpc	r1, r19
     cf0:	14 06       	cpc	r1, r20
     cf2:	55 1f       	adc	r21, r21
     cf4:	f2 cf       	rjmp	.-28     	; 0xcda <__fp_split3+0xe>
     cf6:	46 95       	lsr	r20
     cf8:	f1 df       	rcall	.-30     	; 0xcdc <__fp_splitA>
     cfa:	08 c0       	rjmp	.+16     	; 0xd0c <__fp_splitA+0x30>
     cfc:	16 16       	cp	r1, r22
     cfe:	17 06       	cpc	r1, r23
     d00:	18 06       	cpc	r1, r24
     d02:	99 1f       	adc	r25, r25
     d04:	f1 cf       	rjmp	.-30     	; 0xce8 <__fp_splitA+0xc>
     d06:	86 95       	lsr	r24
     d08:	71 05       	cpc	r23, r1
     d0a:	61 05       	cpc	r22, r1
     d0c:	08 94       	sec
     d0e:	08 95       	ret

00000d10 <__fp_zero>:
     d10:	e8 94       	clt

00000d12 <__fp_szero>:
     d12:	bb 27       	eor	r27, r27
     d14:	66 27       	eor	r22, r22
     d16:	77 27       	eor	r23, r23
     d18:	cb 01       	movw	r24, r22
     d1a:	97 f9       	bld	r25, 7
     d1c:	08 95       	ret

00000d1e <__mulsf3>:
     d1e:	0e 94 a2 06 	call	0xd44	; 0xd44 <__mulsf3x>
     d22:	0c 94 55 06 	jmp	0xcaa	; 0xcaa <__fp_round>
     d26:	0e 94 47 06 	call	0xc8e	; 0xc8e <__fp_pscA>
     d2a:	38 f0       	brcs	.+14     	; 0xd3a <__mulsf3+0x1c>
     d2c:	0e 94 4e 06 	call	0xc9c	; 0xc9c <__fp_pscB>
     d30:	20 f0       	brcs	.+8      	; 0xd3a <__mulsf3+0x1c>
     d32:	95 23       	and	r25, r21
     d34:	11 f0       	breq	.+4      	; 0xd3a <__mulsf3+0x1c>
     d36:	0c 94 3e 06 	jmp	0xc7c	; 0xc7c <__fp_inf>
     d3a:	0c 94 44 06 	jmp	0xc88	; 0xc88 <__fp_nan>
     d3e:	11 24       	eor	r1, r1
     d40:	0c 94 89 06 	jmp	0xd12	; 0xd12 <__fp_szero>

00000d44 <__mulsf3x>:
     d44:	0e 94 66 06 	call	0xccc	; 0xccc <__fp_split3>
     d48:	70 f3       	brcs	.-36     	; 0xd26 <__mulsf3+0x8>

00000d4a <__mulsf3_pse>:
     d4a:	95 9f       	mul	r25, r21
     d4c:	c1 f3       	breq	.-16     	; 0xd3e <__mulsf3+0x20>
     d4e:	95 0f       	add	r25, r21
     d50:	50 e0       	ldi	r21, 0x00	; 0
     d52:	55 1f       	adc	r21, r21
     d54:	62 9f       	mul	r22, r18
     d56:	f0 01       	movw	r30, r0
     d58:	72 9f       	mul	r23, r18
     d5a:	bb 27       	eor	r27, r27
     d5c:	f0 0d       	add	r31, r0
     d5e:	b1 1d       	adc	r27, r1
     d60:	63 9f       	mul	r22, r19
     d62:	aa 27       	eor	r26, r26
     d64:	f0 0d       	add	r31, r0
     d66:	b1 1d       	adc	r27, r1
     d68:	aa 1f       	adc	r26, r26
     d6a:	64 9f       	mul	r22, r20
     d6c:	66 27       	eor	r22, r22
     d6e:	b0 0d       	add	r27, r0
     d70:	a1 1d       	adc	r26, r1
     d72:	66 1f       	adc	r22, r22
     d74:	82 9f       	mul	r24, r18
     d76:	22 27       	eor	r18, r18
     d78:	b0 0d       	add	r27, r0
     d7a:	a1 1d       	adc	r26, r1
     d7c:	62 1f       	adc	r22, r18
     d7e:	73 9f       	mul	r23, r19
     d80:	b0 0d       	add	r27, r0
     d82:	a1 1d       	adc	r26, r1
     d84:	62 1f       	adc	r22, r18
     d86:	83 9f       	mul	r24, r19
     d88:	a0 0d       	add	r26, r0
     d8a:	61 1d       	adc	r22, r1
     d8c:	22 1f       	adc	r18, r18
     d8e:	74 9f       	mul	r23, r20
     d90:	33 27       	eor	r19, r19
     d92:	a0 0d       	add	r26, r0
     d94:	61 1d       	adc	r22, r1
     d96:	23 1f       	adc	r18, r19
     d98:	84 9f       	mul	r24, r20
     d9a:	60 0d       	add	r22, r0
     d9c:	21 1d       	adc	r18, r1
     d9e:	82 2f       	mov	r24, r18
     da0:	76 2f       	mov	r23, r22
     da2:	6a 2f       	mov	r22, r26
     da4:	11 24       	eor	r1, r1
     da6:	9f 57       	subi	r25, 0x7F	; 127
     da8:	50 40       	sbci	r21, 0x00	; 0
     daa:	9a f0       	brmi	.+38     	; 0xdd2 <__mulsf3_pse+0x88>
     dac:	f1 f0       	breq	.+60     	; 0xdea <__mulsf3_pse+0xa0>
     dae:	88 23       	and	r24, r24
     db0:	4a f0       	brmi	.+18     	; 0xdc4 <__mulsf3_pse+0x7a>
     db2:	ee 0f       	add	r30, r30
     db4:	ff 1f       	adc	r31, r31
     db6:	bb 1f       	adc	r27, r27
     db8:	66 1f       	adc	r22, r22
     dba:	77 1f       	adc	r23, r23
     dbc:	88 1f       	adc	r24, r24
     dbe:	91 50       	subi	r25, 0x01	; 1
     dc0:	50 40       	sbci	r21, 0x00	; 0
     dc2:	a9 f7       	brne	.-22     	; 0xdae <__mulsf3_pse+0x64>
     dc4:	9e 3f       	cpi	r25, 0xFE	; 254
     dc6:	51 05       	cpc	r21, r1
     dc8:	80 f0       	brcs	.+32     	; 0xdea <__mulsf3_pse+0xa0>
     dca:	0c 94 3e 06 	jmp	0xc7c	; 0xc7c <__fp_inf>
     dce:	0c 94 89 06 	jmp	0xd12	; 0xd12 <__fp_szero>
     dd2:	5f 3f       	cpi	r21, 0xFF	; 255
     dd4:	e4 f3       	brlt	.-8      	; 0xdce <__mulsf3_pse+0x84>
     dd6:	98 3e       	cpi	r25, 0xE8	; 232
     dd8:	d4 f3       	brlt	.-12     	; 0xdce <__mulsf3_pse+0x84>
     dda:	86 95       	lsr	r24
     ddc:	77 95       	ror	r23
     dde:	67 95       	ror	r22
     de0:	b7 95       	ror	r27
     de2:	f7 95       	ror	r31
     de4:	e7 95       	ror	r30
     de6:	9f 5f       	subi	r25, 0xFF	; 255
     de8:	c1 f7       	brne	.-16     	; 0xdda <__mulsf3_pse+0x90>
     dea:	fe 2b       	or	r31, r30
     dec:	88 0f       	add	r24, r24
     dee:	91 1d       	adc	r25, r1
     df0:	96 95       	lsr	r25
     df2:	87 95       	ror	r24
     df4:	97 f9       	bld	r25, 7
     df6:	08 95       	ret

00000df8 <trunc>:
     df8:	0e 94 30 07 	call	0xe60	; 0xe60 <__fp_trunc>
     dfc:	30 f0       	brcs	.+12     	; 0xe0a <trunc+0x12>
     dfe:	9f 37       	cpi	r25, 0x7F	; 127
     e00:	10 f4       	brcc	.+4      	; 0xe06 <trunc+0xe>
     e02:	0c 94 89 06 	jmp	0xd12	; 0xd12 <__fp_szero>
     e06:	0c 94 07 07 	jmp	0xe0e	; 0xe0e <__fp_mintl>
     e0a:	0c 94 22 07 	jmp	0xe44	; 0xe44 <__fp_mpack>

00000e0e <__fp_mintl>:
     e0e:	88 23       	and	r24, r24
     e10:	71 f4       	brne	.+28     	; 0xe2e <__fp_mintl+0x20>
     e12:	77 23       	and	r23, r23
     e14:	21 f0       	breq	.+8      	; 0xe1e <__fp_mintl+0x10>
     e16:	98 50       	subi	r25, 0x08	; 8
     e18:	87 2b       	or	r24, r23
     e1a:	76 2f       	mov	r23, r22
     e1c:	07 c0       	rjmp	.+14     	; 0xe2c <__fp_mintl+0x1e>
     e1e:	66 23       	and	r22, r22
     e20:	11 f4       	brne	.+4      	; 0xe26 <__fp_mintl+0x18>
     e22:	99 27       	eor	r25, r25
     e24:	0d c0       	rjmp	.+26     	; 0xe40 <__fp_mintl+0x32>
     e26:	90 51       	subi	r25, 0x10	; 16
     e28:	86 2b       	or	r24, r22
     e2a:	70 e0       	ldi	r23, 0x00	; 0
     e2c:	60 e0       	ldi	r22, 0x00	; 0
     e2e:	2a f0       	brmi	.+10     	; 0xe3a <__fp_mintl+0x2c>
     e30:	9a 95       	dec	r25
     e32:	66 0f       	add	r22, r22
     e34:	77 1f       	adc	r23, r23
     e36:	88 1f       	adc	r24, r24
     e38:	da f7       	brpl	.-10     	; 0xe30 <__fp_mintl+0x22>
     e3a:	88 0f       	add	r24, r24
     e3c:	96 95       	lsr	r25
     e3e:	87 95       	ror	r24
     e40:	97 f9       	bld	r25, 7
     e42:	08 95       	ret

00000e44 <__fp_mpack>:
     e44:	9f 3f       	cpi	r25, 0xFF	; 255
     e46:	31 f0       	breq	.+12     	; 0xe54 <__fp_mpack_finite+0xc>

00000e48 <__fp_mpack_finite>:
     e48:	91 50       	subi	r25, 0x01	; 1
     e4a:	20 f4       	brcc	.+8      	; 0xe54 <__fp_mpack_finite+0xc>
     e4c:	87 95       	ror	r24
     e4e:	77 95       	ror	r23
     e50:	67 95       	ror	r22
     e52:	b7 95       	ror	r27
     e54:	88 0f       	add	r24, r24
     e56:	91 1d       	adc	r25, r1
     e58:	96 95       	lsr	r25
     e5a:	87 95       	ror	r24
     e5c:	97 f9       	bld	r25, 7
     e5e:	08 95       	ret

00000e60 <__fp_trunc>:
     e60:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__fp_splitA>
     e64:	a0 f0       	brcs	.+40     	; 0xe8e <__fp_trunc+0x2e>
     e66:	be e7       	ldi	r27, 0x7E	; 126
     e68:	b9 17       	cp	r27, r25
     e6a:	88 f4       	brcc	.+34     	; 0xe8e <__fp_trunc+0x2e>
     e6c:	bb 27       	eor	r27, r27
     e6e:	9f 38       	cpi	r25, 0x8F	; 143
     e70:	60 f4       	brcc	.+24     	; 0xe8a <__fp_trunc+0x2a>
     e72:	16 16       	cp	r1, r22
     e74:	b1 1d       	adc	r27, r1
     e76:	67 2f       	mov	r22, r23
     e78:	78 2f       	mov	r23, r24
     e7a:	88 27       	eor	r24, r24
     e7c:	98 5f       	subi	r25, 0xF8	; 248
     e7e:	f7 cf       	rjmp	.-18     	; 0xe6e <__fp_trunc+0xe>
     e80:	86 95       	lsr	r24
     e82:	77 95       	ror	r23
     e84:	67 95       	ror	r22
     e86:	b1 1d       	adc	r27, r1
     e88:	93 95       	inc	r25
     e8a:	96 39       	cpi	r25, 0x96	; 150
     e8c:	c8 f3       	brcs	.-14     	; 0xe80 <__fp_trunc+0x20>
     e8e:	08 95       	ret

00000e90 <__udivmodsi4>:
     e90:	a1 e2       	ldi	r26, 0x21	; 33
     e92:	1a 2e       	mov	r1, r26
     e94:	aa 1b       	sub	r26, r26
     e96:	bb 1b       	sub	r27, r27
     e98:	fd 01       	movw	r30, r26
     e9a:	0d c0       	rjmp	.+26     	; 0xeb6 <__udivmodsi4_ep>

00000e9c <__udivmodsi4_loop>:
     e9c:	aa 1f       	adc	r26, r26
     e9e:	bb 1f       	adc	r27, r27
     ea0:	ee 1f       	adc	r30, r30
     ea2:	ff 1f       	adc	r31, r31
     ea4:	a2 17       	cp	r26, r18
     ea6:	b3 07       	cpc	r27, r19
     ea8:	e4 07       	cpc	r30, r20
     eaa:	f5 07       	cpc	r31, r21
     eac:	20 f0       	brcs	.+8      	; 0xeb6 <__udivmodsi4_ep>
     eae:	a2 1b       	sub	r26, r18
     eb0:	b3 0b       	sbc	r27, r19
     eb2:	e4 0b       	sbc	r30, r20
     eb4:	f5 0b       	sbc	r31, r21

00000eb6 <__udivmodsi4_ep>:
     eb6:	66 1f       	adc	r22, r22
     eb8:	77 1f       	adc	r23, r23
     eba:	88 1f       	adc	r24, r24
     ebc:	99 1f       	adc	r25, r25
     ebe:	1a 94       	dec	r1
     ec0:	69 f7       	brne	.-38     	; 0xe9c <__udivmodsi4_loop>
     ec2:	60 95       	com	r22
     ec4:	70 95       	com	r23
     ec6:	80 95       	com	r24
     ec8:	90 95       	com	r25
     eca:	9b 01       	movw	r18, r22
     ecc:	ac 01       	movw	r20, r24
     ece:	bd 01       	movw	r22, r26
     ed0:	cf 01       	movw	r24, r30
     ed2:	08 95       	ret

00000ed4 <__tablejump2__>:
     ed4:	ee 0f       	add	r30, r30
     ed6:	ff 1f       	adc	r31, r31
     ed8:	05 90       	lpm	r0, Z+
     eda:	f4 91       	lpm	r31, Z
     edc:	e0 2d       	mov	r30, r0
     ede:	09 94       	ijmp

00000ee0 <sprintf>:
     ee0:	ae e0       	ldi	r26, 0x0E	; 14
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	e6 e7       	ldi	r30, 0x76	; 118
     ee6:	f7 e0       	ldi	r31, 0x07	; 7
     ee8:	0c 94 31 0a 	jmp	0x1462	; 0x1462 <__prologue_saves__+0x1c>
     eec:	0d 89       	ldd	r16, Y+21	; 0x15
     eee:	1e 89       	ldd	r17, Y+22	; 0x16
     ef0:	86 e0       	ldi	r24, 0x06	; 6
     ef2:	8c 83       	std	Y+4, r24	; 0x04
     ef4:	1a 83       	std	Y+2, r17	; 0x02
     ef6:	09 83       	std	Y+1, r16	; 0x01
     ef8:	8f ef       	ldi	r24, 0xFF	; 255
     efa:	9f e7       	ldi	r25, 0x7F	; 127
     efc:	9e 83       	std	Y+6, r25	; 0x06
     efe:	8d 83       	std	Y+5, r24	; 0x05
     f00:	ae 01       	movw	r20, r28
     f02:	47 5e       	subi	r20, 0xE7	; 231
     f04:	5f 4f       	sbci	r21, 0xFF	; 255
     f06:	6f 89       	ldd	r22, Y+23	; 0x17
     f08:	78 8d       	ldd	r23, Y+24	; 0x18
     f0a:	ce 01       	movw	r24, r28
     f0c:	01 96       	adiw	r24, 0x01	; 1
     f0e:	0e 94 92 07 	call	0xf24	; 0xf24 <vfprintf>
     f12:	ef 81       	ldd	r30, Y+7	; 0x07
     f14:	f8 85       	ldd	r31, Y+8	; 0x08
     f16:	e0 0f       	add	r30, r16
     f18:	f1 1f       	adc	r31, r17
     f1a:	10 82       	st	Z, r1
     f1c:	2e 96       	adiw	r28, 0x0e	; 14
     f1e:	e4 e0       	ldi	r30, 0x04	; 4
     f20:	0c 94 4d 0a 	jmp	0x149a	; 0x149a <__epilogue_restores__+0x1c>

00000f24 <vfprintf>:
     f24:	ab e0       	ldi	r26, 0x0B	; 11
     f26:	b0 e0       	ldi	r27, 0x00	; 0
     f28:	e8 e9       	ldi	r30, 0x98	; 152
     f2a:	f7 e0       	ldi	r31, 0x07	; 7
     f2c:	0c 94 23 0a 	jmp	0x1446	; 0x1446 <__prologue_saves__>
     f30:	6c 01       	movw	r12, r24
     f32:	7b 01       	movw	r14, r22
     f34:	8a 01       	movw	r16, r20
     f36:	fc 01       	movw	r30, r24
     f38:	17 82       	std	Z+7, r1	; 0x07
     f3a:	16 82       	std	Z+6, r1	; 0x06
     f3c:	83 81       	ldd	r24, Z+3	; 0x03
     f3e:	81 ff       	sbrs	r24, 1
     f40:	cc c1       	rjmp	.+920    	; 0x12da <vfprintf+0x3b6>
     f42:	ce 01       	movw	r24, r28
     f44:	01 96       	adiw	r24, 0x01	; 1
     f46:	3c 01       	movw	r6, r24
     f48:	f6 01       	movw	r30, r12
     f4a:	93 81       	ldd	r25, Z+3	; 0x03
     f4c:	f7 01       	movw	r30, r14
     f4e:	93 fd       	sbrc	r25, 3
     f50:	85 91       	lpm	r24, Z+
     f52:	93 ff       	sbrs	r25, 3
     f54:	81 91       	ld	r24, Z+
     f56:	7f 01       	movw	r14, r30
     f58:	88 23       	and	r24, r24
     f5a:	09 f4       	brne	.+2      	; 0xf5e <vfprintf+0x3a>
     f5c:	ba c1       	rjmp	.+884    	; 0x12d2 <vfprintf+0x3ae>
     f5e:	85 32       	cpi	r24, 0x25	; 37
     f60:	39 f4       	brne	.+14     	; 0xf70 <vfprintf+0x4c>
     f62:	93 fd       	sbrc	r25, 3
     f64:	85 91       	lpm	r24, Z+
     f66:	93 ff       	sbrs	r25, 3
     f68:	81 91       	ld	r24, Z+
     f6a:	7f 01       	movw	r14, r30
     f6c:	85 32       	cpi	r24, 0x25	; 37
     f6e:	29 f4       	brne	.+10     	; 0xf7a <vfprintf+0x56>
     f70:	b6 01       	movw	r22, r12
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	0e 94 89 09 	call	0x1312	; 0x1312 <fputc>
     f78:	e7 cf       	rjmp	.-50     	; 0xf48 <vfprintf+0x24>
     f7a:	91 2c       	mov	r9, r1
     f7c:	21 2c       	mov	r2, r1
     f7e:	31 2c       	mov	r3, r1
     f80:	ff e1       	ldi	r31, 0x1F	; 31
     f82:	f3 15       	cp	r31, r3
     f84:	d8 f0       	brcs	.+54     	; 0xfbc <vfprintf+0x98>
     f86:	8b 32       	cpi	r24, 0x2B	; 43
     f88:	79 f0       	breq	.+30     	; 0xfa8 <vfprintf+0x84>
     f8a:	38 f4       	brcc	.+14     	; 0xf9a <vfprintf+0x76>
     f8c:	80 32       	cpi	r24, 0x20	; 32
     f8e:	79 f0       	breq	.+30     	; 0xfae <vfprintf+0x8a>
     f90:	83 32       	cpi	r24, 0x23	; 35
     f92:	a1 f4       	brne	.+40     	; 0xfbc <vfprintf+0x98>
     f94:	23 2d       	mov	r18, r3
     f96:	20 61       	ori	r18, 0x10	; 16
     f98:	1d c0       	rjmp	.+58     	; 0xfd4 <vfprintf+0xb0>
     f9a:	8d 32       	cpi	r24, 0x2D	; 45
     f9c:	61 f0       	breq	.+24     	; 0xfb6 <vfprintf+0x92>
     f9e:	80 33       	cpi	r24, 0x30	; 48
     fa0:	69 f4       	brne	.+26     	; 0xfbc <vfprintf+0x98>
     fa2:	23 2d       	mov	r18, r3
     fa4:	21 60       	ori	r18, 0x01	; 1
     fa6:	16 c0       	rjmp	.+44     	; 0xfd4 <vfprintf+0xb0>
     fa8:	83 2d       	mov	r24, r3
     faa:	82 60       	ori	r24, 0x02	; 2
     fac:	38 2e       	mov	r3, r24
     fae:	e3 2d       	mov	r30, r3
     fb0:	e4 60       	ori	r30, 0x04	; 4
     fb2:	3e 2e       	mov	r3, r30
     fb4:	2a c0       	rjmp	.+84     	; 0x100a <vfprintf+0xe6>
     fb6:	f3 2d       	mov	r31, r3
     fb8:	f8 60       	ori	r31, 0x08	; 8
     fba:	1d c0       	rjmp	.+58     	; 0xff6 <vfprintf+0xd2>
     fbc:	37 fc       	sbrc	r3, 7
     fbe:	2d c0       	rjmp	.+90     	; 0x101a <vfprintf+0xf6>
     fc0:	20 ed       	ldi	r18, 0xD0	; 208
     fc2:	28 0f       	add	r18, r24
     fc4:	2a 30       	cpi	r18, 0x0A	; 10
     fc6:	40 f0       	brcs	.+16     	; 0xfd8 <vfprintf+0xb4>
     fc8:	8e 32       	cpi	r24, 0x2E	; 46
     fca:	b9 f4       	brne	.+46     	; 0xffa <vfprintf+0xd6>
     fcc:	36 fc       	sbrc	r3, 6
     fce:	81 c1       	rjmp	.+770    	; 0x12d2 <vfprintf+0x3ae>
     fd0:	23 2d       	mov	r18, r3
     fd2:	20 64       	ori	r18, 0x40	; 64
     fd4:	32 2e       	mov	r3, r18
     fd6:	19 c0       	rjmp	.+50     	; 0x100a <vfprintf+0xe6>
     fd8:	36 fe       	sbrs	r3, 6
     fda:	06 c0       	rjmp	.+12     	; 0xfe8 <vfprintf+0xc4>
     fdc:	8a e0       	ldi	r24, 0x0A	; 10
     fde:	98 9e       	mul	r9, r24
     fe0:	20 0d       	add	r18, r0
     fe2:	11 24       	eor	r1, r1
     fe4:	92 2e       	mov	r9, r18
     fe6:	11 c0       	rjmp	.+34     	; 0x100a <vfprintf+0xe6>
     fe8:	ea e0       	ldi	r30, 0x0A	; 10
     fea:	2e 9e       	mul	r2, r30
     fec:	20 0d       	add	r18, r0
     fee:	11 24       	eor	r1, r1
     ff0:	22 2e       	mov	r2, r18
     ff2:	f3 2d       	mov	r31, r3
     ff4:	f0 62       	ori	r31, 0x20	; 32
     ff6:	3f 2e       	mov	r3, r31
     ff8:	08 c0       	rjmp	.+16     	; 0x100a <vfprintf+0xe6>
     ffa:	8c 36       	cpi	r24, 0x6C	; 108
     ffc:	21 f4       	brne	.+8      	; 0x1006 <vfprintf+0xe2>
     ffe:	83 2d       	mov	r24, r3
    1000:	80 68       	ori	r24, 0x80	; 128
    1002:	38 2e       	mov	r3, r24
    1004:	02 c0       	rjmp	.+4      	; 0x100a <vfprintf+0xe6>
    1006:	88 36       	cpi	r24, 0x68	; 104
    1008:	41 f4       	brne	.+16     	; 0x101a <vfprintf+0xf6>
    100a:	f7 01       	movw	r30, r14
    100c:	93 fd       	sbrc	r25, 3
    100e:	85 91       	lpm	r24, Z+
    1010:	93 ff       	sbrs	r25, 3
    1012:	81 91       	ld	r24, Z+
    1014:	7f 01       	movw	r14, r30
    1016:	81 11       	cpse	r24, r1
    1018:	b3 cf       	rjmp	.-154    	; 0xf80 <vfprintf+0x5c>
    101a:	98 2f       	mov	r25, r24
    101c:	9f 7d       	andi	r25, 0xDF	; 223
    101e:	95 54       	subi	r25, 0x45	; 69
    1020:	93 30       	cpi	r25, 0x03	; 3
    1022:	28 f4       	brcc	.+10     	; 0x102e <vfprintf+0x10a>
    1024:	0c 5f       	subi	r16, 0xFC	; 252
    1026:	1f 4f       	sbci	r17, 0xFF	; 255
    1028:	9f e3       	ldi	r25, 0x3F	; 63
    102a:	99 83       	std	Y+1, r25	; 0x01
    102c:	0d c0       	rjmp	.+26     	; 0x1048 <vfprintf+0x124>
    102e:	83 36       	cpi	r24, 0x63	; 99
    1030:	31 f0       	breq	.+12     	; 0x103e <vfprintf+0x11a>
    1032:	83 37       	cpi	r24, 0x73	; 115
    1034:	71 f0       	breq	.+28     	; 0x1052 <vfprintf+0x12e>
    1036:	83 35       	cpi	r24, 0x53	; 83
    1038:	09 f0       	breq	.+2      	; 0x103c <vfprintf+0x118>
    103a:	59 c0       	rjmp	.+178    	; 0x10ee <vfprintf+0x1ca>
    103c:	21 c0       	rjmp	.+66     	; 0x1080 <vfprintf+0x15c>
    103e:	f8 01       	movw	r30, r16
    1040:	80 81       	ld	r24, Z
    1042:	89 83       	std	Y+1, r24	; 0x01
    1044:	0e 5f       	subi	r16, 0xFE	; 254
    1046:	1f 4f       	sbci	r17, 0xFF	; 255
    1048:	88 24       	eor	r8, r8
    104a:	83 94       	inc	r8
    104c:	91 2c       	mov	r9, r1
    104e:	53 01       	movw	r10, r6
    1050:	13 c0       	rjmp	.+38     	; 0x1078 <vfprintf+0x154>
    1052:	28 01       	movw	r4, r16
    1054:	f2 e0       	ldi	r31, 0x02	; 2
    1056:	4f 0e       	add	r4, r31
    1058:	51 1c       	adc	r5, r1
    105a:	f8 01       	movw	r30, r16
    105c:	a0 80       	ld	r10, Z
    105e:	b1 80       	ldd	r11, Z+1	; 0x01
    1060:	36 fe       	sbrs	r3, 6
    1062:	03 c0       	rjmp	.+6      	; 0x106a <vfprintf+0x146>
    1064:	69 2d       	mov	r22, r9
    1066:	70 e0       	ldi	r23, 0x00	; 0
    1068:	02 c0       	rjmp	.+4      	; 0x106e <vfprintf+0x14a>
    106a:	6f ef       	ldi	r22, 0xFF	; 255
    106c:	7f ef       	ldi	r23, 0xFF	; 255
    106e:	c5 01       	movw	r24, r10
    1070:	0e 94 7e 09 	call	0x12fc	; 0x12fc <strnlen>
    1074:	4c 01       	movw	r8, r24
    1076:	82 01       	movw	r16, r4
    1078:	f3 2d       	mov	r31, r3
    107a:	ff 77       	andi	r31, 0x7F	; 127
    107c:	3f 2e       	mov	r3, r31
    107e:	16 c0       	rjmp	.+44     	; 0x10ac <vfprintf+0x188>
    1080:	28 01       	movw	r4, r16
    1082:	22 e0       	ldi	r18, 0x02	; 2
    1084:	42 0e       	add	r4, r18
    1086:	51 1c       	adc	r5, r1
    1088:	f8 01       	movw	r30, r16
    108a:	a0 80       	ld	r10, Z
    108c:	b1 80       	ldd	r11, Z+1	; 0x01
    108e:	36 fe       	sbrs	r3, 6
    1090:	03 c0       	rjmp	.+6      	; 0x1098 <vfprintf+0x174>
    1092:	69 2d       	mov	r22, r9
    1094:	70 e0       	ldi	r23, 0x00	; 0
    1096:	02 c0       	rjmp	.+4      	; 0x109c <vfprintf+0x178>
    1098:	6f ef       	ldi	r22, 0xFF	; 255
    109a:	7f ef       	ldi	r23, 0xFF	; 255
    109c:	c5 01       	movw	r24, r10
    109e:	0e 94 73 09 	call	0x12e6	; 0x12e6 <strnlen_P>
    10a2:	4c 01       	movw	r8, r24
    10a4:	f3 2d       	mov	r31, r3
    10a6:	f0 68       	ori	r31, 0x80	; 128
    10a8:	3f 2e       	mov	r3, r31
    10aa:	82 01       	movw	r16, r4
    10ac:	33 fc       	sbrc	r3, 3
    10ae:	1b c0       	rjmp	.+54     	; 0x10e6 <vfprintf+0x1c2>
    10b0:	82 2d       	mov	r24, r2
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	88 16       	cp	r8, r24
    10b6:	99 06       	cpc	r9, r25
    10b8:	b0 f4       	brcc	.+44     	; 0x10e6 <vfprintf+0x1c2>
    10ba:	b6 01       	movw	r22, r12
    10bc:	80 e2       	ldi	r24, 0x20	; 32
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	0e 94 89 09 	call	0x1312	; 0x1312 <fputc>
    10c4:	2a 94       	dec	r2
    10c6:	f4 cf       	rjmp	.-24     	; 0x10b0 <vfprintf+0x18c>
    10c8:	f5 01       	movw	r30, r10
    10ca:	37 fc       	sbrc	r3, 7
    10cc:	85 91       	lpm	r24, Z+
    10ce:	37 fe       	sbrs	r3, 7
    10d0:	81 91       	ld	r24, Z+
    10d2:	5f 01       	movw	r10, r30
    10d4:	b6 01       	movw	r22, r12
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	0e 94 89 09 	call	0x1312	; 0x1312 <fputc>
    10dc:	21 10       	cpse	r2, r1
    10de:	2a 94       	dec	r2
    10e0:	21 e0       	ldi	r18, 0x01	; 1
    10e2:	82 1a       	sub	r8, r18
    10e4:	91 08       	sbc	r9, r1
    10e6:	81 14       	cp	r8, r1
    10e8:	91 04       	cpc	r9, r1
    10ea:	71 f7       	brne	.-36     	; 0x10c8 <vfprintf+0x1a4>
    10ec:	e8 c0       	rjmp	.+464    	; 0x12be <vfprintf+0x39a>
    10ee:	84 36       	cpi	r24, 0x64	; 100
    10f0:	11 f0       	breq	.+4      	; 0x10f6 <vfprintf+0x1d2>
    10f2:	89 36       	cpi	r24, 0x69	; 105
    10f4:	41 f5       	brne	.+80     	; 0x1146 <vfprintf+0x222>
    10f6:	f8 01       	movw	r30, r16
    10f8:	37 fe       	sbrs	r3, 7
    10fa:	07 c0       	rjmp	.+14     	; 0x110a <vfprintf+0x1e6>
    10fc:	60 81       	ld	r22, Z
    10fe:	71 81       	ldd	r23, Z+1	; 0x01
    1100:	82 81       	ldd	r24, Z+2	; 0x02
    1102:	93 81       	ldd	r25, Z+3	; 0x03
    1104:	0c 5f       	subi	r16, 0xFC	; 252
    1106:	1f 4f       	sbci	r17, 0xFF	; 255
    1108:	08 c0       	rjmp	.+16     	; 0x111a <vfprintf+0x1f6>
    110a:	60 81       	ld	r22, Z
    110c:	71 81       	ldd	r23, Z+1	; 0x01
    110e:	07 2e       	mov	r0, r23
    1110:	00 0c       	add	r0, r0
    1112:	88 0b       	sbc	r24, r24
    1114:	99 0b       	sbc	r25, r25
    1116:	0e 5f       	subi	r16, 0xFE	; 254
    1118:	1f 4f       	sbci	r17, 0xFF	; 255
    111a:	f3 2d       	mov	r31, r3
    111c:	ff 76       	andi	r31, 0x6F	; 111
    111e:	3f 2e       	mov	r3, r31
    1120:	97 ff       	sbrs	r25, 7
    1122:	09 c0       	rjmp	.+18     	; 0x1136 <vfprintf+0x212>
    1124:	90 95       	com	r25
    1126:	80 95       	com	r24
    1128:	70 95       	com	r23
    112a:	61 95       	neg	r22
    112c:	7f 4f       	sbci	r23, 0xFF	; 255
    112e:	8f 4f       	sbci	r24, 0xFF	; 255
    1130:	9f 4f       	sbci	r25, 0xFF	; 255
    1132:	f0 68       	ori	r31, 0x80	; 128
    1134:	3f 2e       	mov	r3, r31
    1136:	2a e0       	ldi	r18, 0x0A	; 10
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	a3 01       	movw	r20, r6
    113c:	0e 94 c5 09 	call	0x138a	; 0x138a <__ultoa_invert>
    1140:	88 2e       	mov	r8, r24
    1142:	86 18       	sub	r8, r6
    1144:	45 c0       	rjmp	.+138    	; 0x11d0 <vfprintf+0x2ac>
    1146:	85 37       	cpi	r24, 0x75	; 117
    1148:	31 f4       	brne	.+12     	; 0x1156 <vfprintf+0x232>
    114a:	23 2d       	mov	r18, r3
    114c:	2f 7e       	andi	r18, 0xEF	; 239
    114e:	b2 2e       	mov	r11, r18
    1150:	2a e0       	ldi	r18, 0x0A	; 10
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	25 c0       	rjmp	.+74     	; 0x11a0 <vfprintf+0x27c>
    1156:	93 2d       	mov	r25, r3
    1158:	99 7f       	andi	r25, 0xF9	; 249
    115a:	b9 2e       	mov	r11, r25
    115c:	8f 36       	cpi	r24, 0x6F	; 111
    115e:	c1 f0       	breq	.+48     	; 0x1190 <vfprintf+0x26c>
    1160:	18 f4       	brcc	.+6      	; 0x1168 <vfprintf+0x244>
    1162:	88 35       	cpi	r24, 0x58	; 88
    1164:	79 f0       	breq	.+30     	; 0x1184 <vfprintf+0x260>
    1166:	b5 c0       	rjmp	.+362    	; 0x12d2 <vfprintf+0x3ae>
    1168:	80 37       	cpi	r24, 0x70	; 112
    116a:	19 f0       	breq	.+6      	; 0x1172 <vfprintf+0x24e>
    116c:	88 37       	cpi	r24, 0x78	; 120
    116e:	21 f0       	breq	.+8      	; 0x1178 <vfprintf+0x254>
    1170:	b0 c0       	rjmp	.+352    	; 0x12d2 <vfprintf+0x3ae>
    1172:	e9 2f       	mov	r30, r25
    1174:	e0 61       	ori	r30, 0x10	; 16
    1176:	be 2e       	mov	r11, r30
    1178:	b4 fe       	sbrs	r11, 4
    117a:	0d c0       	rjmp	.+26     	; 0x1196 <vfprintf+0x272>
    117c:	fb 2d       	mov	r31, r11
    117e:	f4 60       	ori	r31, 0x04	; 4
    1180:	bf 2e       	mov	r11, r31
    1182:	09 c0       	rjmp	.+18     	; 0x1196 <vfprintf+0x272>
    1184:	34 fe       	sbrs	r3, 4
    1186:	0a c0       	rjmp	.+20     	; 0x119c <vfprintf+0x278>
    1188:	29 2f       	mov	r18, r25
    118a:	26 60       	ori	r18, 0x06	; 6
    118c:	b2 2e       	mov	r11, r18
    118e:	06 c0       	rjmp	.+12     	; 0x119c <vfprintf+0x278>
    1190:	28 e0       	ldi	r18, 0x08	; 8
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	05 c0       	rjmp	.+10     	; 0x11a0 <vfprintf+0x27c>
    1196:	20 e1       	ldi	r18, 0x10	; 16
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	02 c0       	rjmp	.+4      	; 0x11a0 <vfprintf+0x27c>
    119c:	20 e1       	ldi	r18, 0x10	; 16
    119e:	32 e0       	ldi	r19, 0x02	; 2
    11a0:	f8 01       	movw	r30, r16
    11a2:	b7 fe       	sbrs	r11, 7
    11a4:	07 c0       	rjmp	.+14     	; 0x11b4 <vfprintf+0x290>
    11a6:	60 81       	ld	r22, Z
    11a8:	71 81       	ldd	r23, Z+1	; 0x01
    11aa:	82 81       	ldd	r24, Z+2	; 0x02
    11ac:	93 81       	ldd	r25, Z+3	; 0x03
    11ae:	0c 5f       	subi	r16, 0xFC	; 252
    11b0:	1f 4f       	sbci	r17, 0xFF	; 255
    11b2:	06 c0       	rjmp	.+12     	; 0x11c0 <vfprintf+0x29c>
    11b4:	60 81       	ld	r22, Z
    11b6:	71 81       	ldd	r23, Z+1	; 0x01
    11b8:	80 e0       	ldi	r24, 0x00	; 0
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	0e 5f       	subi	r16, 0xFE	; 254
    11be:	1f 4f       	sbci	r17, 0xFF	; 255
    11c0:	a3 01       	movw	r20, r6
    11c2:	0e 94 c5 09 	call	0x138a	; 0x138a <__ultoa_invert>
    11c6:	88 2e       	mov	r8, r24
    11c8:	86 18       	sub	r8, r6
    11ca:	fb 2d       	mov	r31, r11
    11cc:	ff 77       	andi	r31, 0x7F	; 127
    11ce:	3f 2e       	mov	r3, r31
    11d0:	36 fe       	sbrs	r3, 6
    11d2:	0d c0       	rjmp	.+26     	; 0x11ee <vfprintf+0x2ca>
    11d4:	23 2d       	mov	r18, r3
    11d6:	2e 7f       	andi	r18, 0xFE	; 254
    11d8:	a2 2e       	mov	r10, r18
    11da:	89 14       	cp	r8, r9
    11dc:	58 f4       	brcc	.+22     	; 0x11f4 <vfprintf+0x2d0>
    11de:	34 fe       	sbrs	r3, 4
    11e0:	0b c0       	rjmp	.+22     	; 0x11f8 <vfprintf+0x2d4>
    11e2:	32 fc       	sbrc	r3, 2
    11e4:	09 c0       	rjmp	.+18     	; 0x11f8 <vfprintf+0x2d4>
    11e6:	83 2d       	mov	r24, r3
    11e8:	8e 7e       	andi	r24, 0xEE	; 238
    11ea:	a8 2e       	mov	r10, r24
    11ec:	05 c0       	rjmp	.+10     	; 0x11f8 <vfprintf+0x2d4>
    11ee:	b8 2c       	mov	r11, r8
    11f0:	a3 2c       	mov	r10, r3
    11f2:	03 c0       	rjmp	.+6      	; 0x11fa <vfprintf+0x2d6>
    11f4:	b8 2c       	mov	r11, r8
    11f6:	01 c0       	rjmp	.+2      	; 0x11fa <vfprintf+0x2d6>
    11f8:	b9 2c       	mov	r11, r9
    11fa:	a4 fe       	sbrs	r10, 4
    11fc:	0f c0       	rjmp	.+30     	; 0x121c <vfprintf+0x2f8>
    11fe:	fe 01       	movw	r30, r28
    1200:	e8 0d       	add	r30, r8
    1202:	f1 1d       	adc	r31, r1
    1204:	80 81       	ld	r24, Z
    1206:	80 33       	cpi	r24, 0x30	; 48
    1208:	21 f4       	brne	.+8      	; 0x1212 <vfprintf+0x2ee>
    120a:	9a 2d       	mov	r25, r10
    120c:	99 7e       	andi	r25, 0xE9	; 233
    120e:	a9 2e       	mov	r10, r25
    1210:	09 c0       	rjmp	.+18     	; 0x1224 <vfprintf+0x300>
    1212:	a2 fe       	sbrs	r10, 2
    1214:	06 c0       	rjmp	.+12     	; 0x1222 <vfprintf+0x2fe>
    1216:	b3 94       	inc	r11
    1218:	b3 94       	inc	r11
    121a:	04 c0       	rjmp	.+8      	; 0x1224 <vfprintf+0x300>
    121c:	8a 2d       	mov	r24, r10
    121e:	86 78       	andi	r24, 0x86	; 134
    1220:	09 f0       	breq	.+2      	; 0x1224 <vfprintf+0x300>
    1222:	b3 94       	inc	r11
    1224:	a3 fc       	sbrc	r10, 3
    1226:	11 c0       	rjmp	.+34     	; 0x124a <vfprintf+0x326>
    1228:	a0 fe       	sbrs	r10, 0
    122a:	06 c0       	rjmp	.+12     	; 0x1238 <vfprintf+0x314>
    122c:	b2 14       	cp	r11, r2
    122e:	88 f4       	brcc	.+34     	; 0x1252 <vfprintf+0x32e>
    1230:	28 0c       	add	r2, r8
    1232:	92 2c       	mov	r9, r2
    1234:	9b 18       	sub	r9, r11
    1236:	0e c0       	rjmp	.+28     	; 0x1254 <vfprintf+0x330>
    1238:	b2 14       	cp	r11, r2
    123a:	60 f4       	brcc	.+24     	; 0x1254 <vfprintf+0x330>
    123c:	b6 01       	movw	r22, r12
    123e:	80 e2       	ldi	r24, 0x20	; 32
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	0e 94 89 09 	call	0x1312	; 0x1312 <fputc>
    1246:	b3 94       	inc	r11
    1248:	f7 cf       	rjmp	.-18     	; 0x1238 <vfprintf+0x314>
    124a:	b2 14       	cp	r11, r2
    124c:	18 f4       	brcc	.+6      	; 0x1254 <vfprintf+0x330>
    124e:	2b 18       	sub	r2, r11
    1250:	02 c0       	rjmp	.+4      	; 0x1256 <vfprintf+0x332>
    1252:	98 2c       	mov	r9, r8
    1254:	21 2c       	mov	r2, r1
    1256:	a4 fe       	sbrs	r10, 4
    1258:	10 c0       	rjmp	.+32     	; 0x127a <vfprintf+0x356>
    125a:	b6 01       	movw	r22, r12
    125c:	80 e3       	ldi	r24, 0x30	; 48
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	0e 94 89 09 	call	0x1312	; 0x1312 <fputc>
    1264:	a2 fe       	sbrs	r10, 2
    1266:	17 c0       	rjmp	.+46     	; 0x1296 <vfprintf+0x372>
    1268:	a1 fc       	sbrc	r10, 1
    126a:	03 c0       	rjmp	.+6      	; 0x1272 <vfprintf+0x34e>
    126c:	88 e7       	ldi	r24, 0x78	; 120
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	02 c0       	rjmp	.+4      	; 0x1276 <vfprintf+0x352>
    1272:	88 e5       	ldi	r24, 0x58	; 88
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	b6 01       	movw	r22, r12
    1278:	0c c0       	rjmp	.+24     	; 0x1292 <vfprintf+0x36e>
    127a:	8a 2d       	mov	r24, r10
    127c:	86 78       	andi	r24, 0x86	; 134
    127e:	59 f0       	breq	.+22     	; 0x1296 <vfprintf+0x372>
    1280:	a1 fe       	sbrs	r10, 1
    1282:	02 c0       	rjmp	.+4      	; 0x1288 <vfprintf+0x364>
    1284:	8b e2       	ldi	r24, 0x2B	; 43
    1286:	01 c0       	rjmp	.+2      	; 0x128a <vfprintf+0x366>
    1288:	80 e2       	ldi	r24, 0x20	; 32
    128a:	a7 fc       	sbrc	r10, 7
    128c:	8d e2       	ldi	r24, 0x2D	; 45
    128e:	b6 01       	movw	r22, r12
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	0e 94 89 09 	call	0x1312	; 0x1312 <fputc>
    1296:	89 14       	cp	r8, r9
    1298:	38 f4       	brcc	.+14     	; 0x12a8 <vfprintf+0x384>
    129a:	b6 01       	movw	r22, r12
    129c:	80 e3       	ldi	r24, 0x30	; 48
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	0e 94 89 09 	call	0x1312	; 0x1312 <fputc>
    12a4:	9a 94       	dec	r9
    12a6:	f7 cf       	rjmp	.-18     	; 0x1296 <vfprintf+0x372>
    12a8:	8a 94       	dec	r8
    12aa:	f3 01       	movw	r30, r6
    12ac:	e8 0d       	add	r30, r8
    12ae:	f1 1d       	adc	r31, r1
    12b0:	80 81       	ld	r24, Z
    12b2:	b6 01       	movw	r22, r12
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	0e 94 89 09 	call	0x1312	; 0x1312 <fputc>
    12ba:	81 10       	cpse	r8, r1
    12bc:	f5 cf       	rjmp	.-22     	; 0x12a8 <vfprintf+0x384>
    12be:	22 20       	and	r2, r2
    12c0:	09 f4       	brne	.+2      	; 0x12c4 <vfprintf+0x3a0>
    12c2:	42 ce       	rjmp	.-892    	; 0xf48 <vfprintf+0x24>
    12c4:	b6 01       	movw	r22, r12
    12c6:	80 e2       	ldi	r24, 0x20	; 32
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	0e 94 89 09 	call	0x1312	; 0x1312 <fputc>
    12ce:	2a 94       	dec	r2
    12d0:	f6 cf       	rjmp	.-20     	; 0x12be <vfprintf+0x39a>
    12d2:	f6 01       	movw	r30, r12
    12d4:	86 81       	ldd	r24, Z+6	; 0x06
    12d6:	97 81       	ldd	r25, Z+7	; 0x07
    12d8:	02 c0       	rjmp	.+4      	; 0x12de <vfprintf+0x3ba>
    12da:	8f ef       	ldi	r24, 0xFF	; 255
    12dc:	9f ef       	ldi	r25, 0xFF	; 255
    12de:	2b 96       	adiw	r28, 0x0b	; 11
    12e0:	e2 e1       	ldi	r30, 0x12	; 18
    12e2:	0c 94 3f 0a 	jmp	0x147e	; 0x147e <__epilogue_restores__>

000012e6 <strnlen_P>:
    12e6:	fc 01       	movw	r30, r24
    12e8:	05 90       	lpm	r0, Z+
    12ea:	61 50       	subi	r22, 0x01	; 1
    12ec:	70 40       	sbci	r23, 0x00	; 0
    12ee:	01 10       	cpse	r0, r1
    12f0:	d8 f7       	brcc	.-10     	; 0x12e8 <strnlen_P+0x2>
    12f2:	80 95       	com	r24
    12f4:	90 95       	com	r25
    12f6:	8e 0f       	add	r24, r30
    12f8:	9f 1f       	adc	r25, r31
    12fa:	08 95       	ret

000012fc <strnlen>:
    12fc:	fc 01       	movw	r30, r24
    12fe:	61 50       	subi	r22, 0x01	; 1
    1300:	70 40       	sbci	r23, 0x00	; 0
    1302:	01 90       	ld	r0, Z+
    1304:	01 10       	cpse	r0, r1
    1306:	d8 f7       	brcc	.-10     	; 0x12fe <strnlen+0x2>
    1308:	80 95       	com	r24
    130a:	90 95       	com	r25
    130c:	8e 0f       	add	r24, r30
    130e:	9f 1f       	adc	r25, r31
    1310:	08 95       	ret

00001312 <fputc>:
    1312:	0f 93       	push	r16
    1314:	1f 93       	push	r17
    1316:	cf 93       	push	r28
    1318:	df 93       	push	r29
    131a:	fb 01       	movw	r30, r22
    131c:	23 81       	ldd	r18, Z+3	; 0x03
    131e:	21 fd       	sbrc	r18, 1
    1320:	03 c0       	rjmp	.+6      	; 0x1328 <fputc+0x16>
    1322:	8f ef       	ldi	r24, 0xFF	; 255
    1324:	9f ef       	ldi	r25, 0xFF	; 255
    1326:	2c c0       	rjmp	.+88     	; 0x1380 <fputc+0x6e>
    1328:	22 ff       	sbrs	r18, 2
    132a:	16 c0       	rjmp	.+44     	; 0x1358 <fputc+0x46>
    132c:	46 81       	ldd	r20, Z+6	; 0x06
    132e:	57 81       	ldd	r21, Z+7	; 0x07
    1330:	24 81       	ldd	r18, Z+4	; 0x04
    1332:	35 81       	ldd	r19, Z+5	; 0x05
    1334:	42 17       	cp	r20, r18
    1336:	53 07       	cpc	r21, r19
    1338:	44 f4       	brge	.+16     	; 0x134a <fputc+0x38>
    133a:	a0 81       	ld	r26, Z
    133c:	b1 81       	ldd	r27, Z+1	; 0x01
    133e:	9d 01       	movw	r18, r26
    1340:	2f 5f       	subi	r18, 0xFF	; 255
    1342:	3f 4f       	sbci	r19, 0xFF	; 255
    1344:	31 83       	std	Z+1, r19	; 0x01
    1346:	20 83       	st	Z, r18
    1348:	8c 93       	st	X, r24
    134a:	26 81       	ldd	r18, Z+6	; 0x06
    134c:	37 81       	ldd	r19, Z+7	; 0x07
    134e:	2f 5f       	subi	r18, 0xFF	; 255
    1350:	3f 4f       	sbci	r19, 0xFF	; 255
    1352:	37 83       	std	Z+7, r19	; 0x07
    1354:	26 83       	std	Z+6, r18	; 0x06
    1356:	14 c0       	rjmp	.+40     	; 0x1380 <fputc+0x6e>
    1358:	8b 01       	movw	r16, r22
    135a:	ec 01       	movw	r28, r24
    135c:	fb 01       	movw	r30, r22
    135e:	00 84       	ldd	r0, Z+8	; 0x08
    1360:	f1 85       	ldd	r31, Z+9	; 0x09
    1362:	e0 2d       	mov	r30, r0
    1364:	09 95       	icall
    1366:	89 2b       	or	r24, r25
    1368:	e1 f6       	brne	.-72     	; 0x1322 <fputc+0x10>
    136a:	d8 01       	movw	r26, r16
    136c:	16 96       	adiw	r26, 0x06	; 6
    136e:	8d 91       	ld	r24, X+
    1370:	9c 91       	ld	r25, X
    1372:	17 97       	sbiw	r26, 0x07	; 7
    1374:	01 96       	adiw	r24, 0x01	; 1
    1376:	17 96       	adiw	r26, 0x07	; 7
    1378:	9c 93       	st	X, r25
    137a:	8e 93       	st	-X, r24
    137c:	16 97       	sbiw	r26, 0x06	; 6
    137e:	ce 01       	movw	r24, r28
    1380:	df 91       	pop	r29
    1382:	cf 91       	pop	r28
    1384:	1f 91       	pop	r17
    1386:	0f 91       	pop	r16
    1388:	08 95       	ret

0000138a <__ultoa_invert>:
    138a:	fa 01       	movw	r30, r20
    138c:	aa 27       	eor	r26, r26
    138e:	28 30       	cpi	r18, 0x08	; 8
    1390:	51 f1       	breq	.+84     	; 0x13e6 <__ultoa_invert+0x5c>
    1392:	20 31       	cpi	r18, 0x10	; 16
    1394:	81 f1       	breq	.+96     	; 0x13f6 <__ultoa_invert+0x6c>
    1396:	e8 94       	clt
    1398:	6f 93       	push	r22
    139a:	6e 7f       	andi	r22, 0xFE	; 254
    139c:	6e 5f       	subi	r22, 0xFE	; 254
    139e:	7f 4f       	sbci	r23, 0xFF	; 255
    13a0:	8f 4f       	sbci	r24, 0xFF	; 255
    13a2:	9f 4f       	sbci	r25, 0xFF	; 255
    13a4:	af 4f       	sbci	r26, 0xFF	; 255
    13a6:	b1 e0       	ldi	r27, 0x01	; 1
    13a8:	3e d0       	rcall	.+124    	; 0x1426 <__ultoa_invert+0x9c>
    13aa:	b4 e0       	ldi	r27, 0x04	; 4
    13ac:	3c d0       	rcall	.+120    	; 0x1426 <__ultoa_invert+0x9c>
    13ae:	67 0f       	add	r22, r23
    13b0:	78 1f       	adc	r23, r24
    13b2:	89 1f       	adc	r24, r25
    13b4:	9a 1f       	adc	r25, r26
    13b6:	a1 1d       	adc	r26, r1
    13b8:	68 0f       	add	r22, r24
    13ba:	79 1f       	adc	r23, r25
    13bc:	8a 1f       	adc	r24, r26
    13be:	91 1d       	adc	r25, r1
    13c0:	a1 1d       	adc	r26, r1
    13c2:	6a 0f       	add	r22, r26
    13c4:	71 1d       	adc	r23, r1
    13c6:	81 1d       	adc	r24, r1
    13c8:	91 1d       	adc	r25, r1
    13ca:	a1 1d       	adc	r26, r1
    13cc:	20 d0       	rcall	.+64     	; 0x140e <__ultoa_invert+0x84>
    13ce:	09 f4       	brne	.+2      	; 0x13d2 <__ultoa_invert+0x48>
    13d0:	68 94       	set
    13d2:	3f 91       	pop	r19
    13d4:	2a e0       	ldi	r18, 0x0A	; 10
    13d6:	26 9f       	mul	r18, r22
    13d8:	11 24       	eor	r1, r1
    13da:	30 19       	sub	r19, r0
    13dc:	30 5d       	subi	r19, 0xD0	; 208
    13de:	31 93       	st	Z+, r19
    13e0:	de f6       	brtc	.-74     	; 0x1398 <__ultoa_invert+0xe>
    13e2:	cf 01       	movw	r24, r30
    13e4:	08 95       	ret
    13e6:	46 2f       	mov	r20, r22
    13e8:	47 70       	andi	r20, 0x07	; 7
    13ea:	40 5d       	subi	r20, 0xD0	; 208
    13ec:	41 93       	st	Z+, r20
    13ee:	b3 e0       	ldi	r27, 0x03	; 3
    13f0:	0f d0       	rcall	.+30     	; 0x1410 <__ultoa_invert+0x86>
    13f2:	c9 f7       	brne	.-14     	; 0x13e6 <__ultoa_invert+0x5c>
    13f4:	f6 cf       	rjmp	.-20     	; 0x13e2 <__ultoa_invert+0x58>
    13f6:	46 2f       	mov	r20, r22
    13f8:	4f 70       	andi	r20, 0x0F	; 15
    13fa:	40 5d       	subi	r20, 0xD0	; 208
    13fc:	4a 33       	cpi	r20, 0x3A	; 58
    13fe:	18 f0       	brcs	.+6      	; 0x1406 <__ultoa_invert+0x7c>
    1400:	49 5d       	subi	r20, 0xD9	; 217
    1402:	31 fd       	sbrc	r19, 1
    1404:	40 52       	subi	r20, 0x20	; 32
    1406:	41 93       	st	Z+, r20
    1408:	02 d0       	rcall	.+4      	; 0x140e <__ultoa_invert+0x84>
    140a:	a9 f7       	brne	.-22     	; 0x13f6 <__ultoa_invert+0x6c>
    140c:	ea cf       	rjmp	.-44     	; 0x13e2 <__ultoa_invert+0x58>
    140e:	b4 e0       	ldi	r27, 0x04	; 4
    1410:	a6 95       	lsr	r26
    1412:	97 95       	ror	r25
    1414:	87 95       	ror	r24
    1416:	77 95       	ror	r23
    1418:	67 95       	ror	r22
    141a:	ba 95       	dec	r27
    141c:	c9 f7       	brne	.-14     	; 0x1410 <__ultoa_invert+0x86>
    141e:	00 97       	sbiw	r24, 0x00	; 0
    1420:	61 05       	cpc	r22, r1
    1422:	71 05       	cpc	r23, r1
    1424:	08 95       	ret
    1426:	9b 01       	movw	r18, r22
    1428:	ac 01       	movw	r20, r24
    142a:	0a 2e       	mov	r0, r26
    142c:	06 94       	lsr	r0
    142e:	57 95       	ror	r21
    1430:	47 95       	ror	r20
    1432:	37 95       	ror	r19
    1434:	27 95       	ror	r18
    1436:	ba 95       	dec	r27
    1438:	c9 f7       	brne	.-14     	; 0x142c <__ultoa_invert+0xa2>
    143a:	62 0f       	add	r22, r18
    143c:	73 1f       	adc	r23, r19
    143e:	84 1f       	adc	r24, r20
    1440:	95 1f       	adc	r25, r21
    1442:	a0 1d       	adc	r26, r0
    1444:	08 95       	ret

00001446 <__prologue_saves__>:
    1446:	2f 92       	push	r2
    1448:	3f 92       	push	r3
    144a:	4f 92       	push	r4
    144c:	5f 92       	push	r5
    144e:	6f 92       	push	r6
    1450:	7f 92       	push	r7
    1452:	8f 92       	push	r8
    1454:	9f 92       	push	r9
    1456:	af 92       	push	r10
    1458:	bf 92       	push	r11
    145a:	cf 92       	push	r12
    145c:	df 92       	push	r13
    145e:	ef 92       	push	r14
    1460:	ff 92       	push	r15
    1462:	0f 93       	push	r16
    1464:	1f 93       	push	r17
    1466:	cf 93       	push	r28
    1468:	df 93       	push	r29
    146a:	cd b7       	in	r28, 0x3d	; 61
    146c:	de b7       	in	r29, 0x3e	; 62
    146e:	ca 1b       	sub	r28, r26
    1470:	db 0b       	sbc	r29, r27
    1472:	0f b6       	in	r0, 0x3f	; 63
    1474:	f8 94       	cli
    1476:	de bf       	out	0x3e, r29	; 62
    1478:	0f be       	out	0x3f, r0	; 63
    147a:	cd bf       	out	0x3d, r28	; 61
    147c:	09 94       	ijmp

0000147e <__epilogue_restores__>:
    147e:	2a 88       	ldd	r2, Y+18	; 0x12
    1480:	39 88       	ldd	r3, Y+17	; 0x11
    1482:	48 88       	ldd	r4, Y+16	; 0x10
    1484:	5f 84       	ldd	r5, Y+15	; 0x0f
    1486:	6e 84       	ldd	r6, Y+14	; 0x0e
    1488:	7d 84       	ldd	r7, Y+13	; 0x0d
    148a:	8c 84       	ldd	r8, Y+12	; 0x0c
    148c:	9b 84       	ldd	r9, Y+11	; 0x0b
    148e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1490:	b9 84       	ldd	r11, Y+9	; 0x09
    1492:	c8 84       	ldd	r12, Y+8	; 0x08
    1494:	df 80       	ldd	r13, Y+7	; 0x07
    1496:	ee 80       	ldd	r14, Y+6	; 0x06
    1498:	fd 80       	ldd	r15, Y+5	; 0x05
    149a:	0c 81       	ldd	r16, Y+4	; 0x04
    149c:	1b 81       	ldd	r17, Y+3	; 0x03
    149e:	aa 81       	ldd	r26, Y+2	; 0x02
    14a0:	b9 81       	ldd	r27, Y+1	; 0x01
    14a2:	ce 0f       	add	r28, r30
    14a4:	d1 1d       	adc	r29, r1
    14a6:	0f b6       	in	r0, 0x3f	; 63
    14a8:	f8 94       	cli
    14aa:	de bf       	out	0x3e, r29	; 62
    14ac:	0f be       	out	0x3f, r0	; 63
    14ae:	cd bf       	out	0x3d, r28	; 61
    14b0:	ed 01       	movw	r28, r26
    14b2:	08 95       	ret

000014b4 <__do_global_dtors>:
    14b4:	10 e0       	ldi	r17, 0x00	; 0
    14b6:	c3 e4       	ldi	r28, 0x43	; 67
    14b8:	d0 e0       	ldi	r29, 0x00	; 0
    14ba:	04 c0       	rjmp	.+8      	; 0x14c4 <__do_global_dtors+0x10>
    14bc:	fe 01       	movw	r30, r28
    14be:	0e 94 6a 07 	call	0xed4	; 0xed4 <__tablejump2__>
    14c2:	21 96       	adiw	r28, 0x01	; 1
    14c4:	c4 34       	cpi	r28, 0x44	; 68
    14c6:	d1 07       	cpc	r29, r17
    14c8:	c9 f7       	brne	.-14     	; 0x14bc <__do_global_dtors+0x8>
    14ca:	f8 94       	cli

000014cc <__stop_program>:
    14cc:	ff cf       	rjmp	.-2      	; 0x14cc <__stop_program>
