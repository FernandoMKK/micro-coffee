
Serial-debugger.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000066  00800100  00000244  000002d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000244  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800166  00800166  0000033e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000033e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000370  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ada  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007de  00000000  00000000  00000ef2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004ab  00000000  00000000  000016d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ac  00000000  00000000  00001b7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000455  00000000  00000000  00001c28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000084  00000000  00000000  0000207d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002101  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e4       	ldi	r30, 0x44	; 68
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 36       	cpi	r26, 0x66	; 102
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e6       	ldi	r26, 0x66	; 102
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 36       	cpi	r26, 0x6A	; 106
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 8b 00 	call	0x116	; 0x116 <main>
  9e:	0c 94 20 01 	jmp	0x240	; 0x240 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_18>:
unsigned char debug_mode = 0;
volatile unsigned char show_OK = 0;


ISR(USART_RX_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
	command_OK = 0;
  b4:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <command_OK>
	show_OK = 0;
  b8:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <__data_end>
	char receivedByte = UDR0;
  bc:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		
	if (receivedByte == '0')
  c0:	80 33       	cpi	r24, 0x30	; 48
  c2:	11 f4       	brne	.+4      	; 0xc8 <__vector_18+0x22>
		_command = 0;
  c4:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <_command>
	if (receivedByte == '1')
  c8:	81 33       	cpi	r24, 0x31	; 49
  ca:	19 f4       	brne	.+6      	; 0xd2 <__vector_18+0x2c>
		_command = 1;
  cc:	91 e0       	ldi	r25, 0x01	; 1
  ce:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <_command>
	if (receivedByte == '2')
  d2:	82 33       	cpi	r24, 0x32	; 50
  d4:	19 f4       	brne	.+6      	; 0xdc <__vector_18+0x36>
		_command = 2;
  d6:	82 e0       	ldi	r24, 0x02	; 2
  d8:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <_command>
	command_OK = 1;
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <command_OK>
}
  e2:	9f 91       	pop	r25
  e4:	8f 91       	pop	r24
  e6:	0f 90       	pop	r0
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	0f 90       	pop	r0
  ec:	1f 90       	pop	r1
  ee:	18 95       	reti

000000f0 <setup>:
void setup()
{
	/*-- Setting direction registers --*/
	DDRD = 0b00000010;
  f0:	82 e0       	ldi	r24, 0x02	; 2
  f2:	8a b9       	out	0x0a, r24	; 10
	/*--Setting the USART registers--*/
	UCSR0B = (1<<TXEN0) | (1<<RXEN0); //Enables the TX and RX
  f4:	e1 ec       	ldi	r30, 0xC1	; 193
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	88 e1       	ldi	r24, 0x18	; 24
  fa:	80 83       	st	Z, r24
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00); //Sets bytesize 8
  fc:	86 e0       	ldi	r24, 0x06	; 6
  fe:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	UCSR0B |= (1<<RXCIE0); //Enables the RX interrupt
 102:	80 81       	ld	r24, Z
 104:	80 68       	ori	r24, 0x80	; 128
 106:	80 83       	st	Z, r24
	
	//Sets the baudrate
	UBRR0H = (BAUD_PRESCALE >> 8);
 108:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = BAUD_PRESCALE;
 10c:	87 e6       	ldi	r24, 0x67	; 103
 10e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	//Enables global interrupt
	sei();
 112:	78 94       	sei
 114:	08 95       	ret

00000116 <main>:
}

int main(void)
{
	setup();
 116:	0e 94 78 00 	call	0xf0	; 0xf0 <setup>
    show_menu();
 11a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <show_menu>
    while (1) 
    {
		if(command_OK)
 11e:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <command_OK>
 122:	88 23       	and	r24, r24
 124:	b9 f1       	breq	.+110    	; 0x194 <main+0x7e>
		{
			switch(_command){
 126:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <_command>
 12a:	81 30       	cpi	r24, 0x01	; 1
 12c:	c9 f0       	breq	.+50     	; 0x160 <main+0x4a>
 12e:	18 f0       	brcs	.+6      	; 0x136 <main+0x20>
 130:	82 30       	cpi	r24, 0x02	; 2
 132:	29 f1       	breq	.+74     	; 0x17e <main+0x68>
 134:	2f c0       	rjmp	.+94     	; 0x194 <main+0x7e>
				case SHOW_PROFIT:
				if(debug_mode == 1){
 136:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <debug_mode>
 13a:	81 30       	cpi	r24, 0x01	; 1
 13c:	39 f4       	brne	.+14     	; 0x14c <main+0x36>
					USART_Transmit("mostrando profit");
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	91 e0       	ldi	r25, 0x01	; 1
 142:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <USART_Transmit>
					USART_TransmitChar(NEWLINE);
 146:	8d e0       	ldi	r24, 0x0D	; 13
 148:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <USART_TransmitChar>
				}
				if(show_OK == 0)
 14c:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <__data_end>
 150:	81 11       	cpse	r24, r1
 152:	02 c0       	rjmp	.+4      	; 0x158 <main+0x42>
					show_profit();
 154:	0e 94 fe 00 	call	0x1fc	; 0x1fc <show_profit>
					show_OK = 1;
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <__data_end>
				break;
 15e:	1a c0       	rjmp	.+52     	; 0x194 <main+0x7e>
				
				case DEBUG_MODE:
				if(debug_mode == 1){
 160:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <debug_mode>
 164:	81 30       	cpi	r24, 0x01	; 1
 166:	39 f4       	brne	.+14     	; 0x176 <main+0x60>
					USART_Transmit("Modo debug");
 168:	81 e1       	ldi	r24, 0x11	; 17
 16a:	91 e0       	ldi	r25, 0x01	; 1
 16c:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <USART_Transmit>
					USART_TransmitChar(NEWLINE);
 170:	8d e0       	ldi	r24, 0x0D	; 13
 172:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <USART_TransmitChar>
				}
				debug_mode = 1;
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <debug_mode>
				break;
 17c:	0b c0       	rjmp	.+22     	; 0x194 <main+0x7e>
				
				case EXIT:
				debug_mode = 0;
 17e:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <debug_mode>
				if(show_OK == 0)
 182:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <__data_end>
 186:	81 11       	cpse	r24, r1
 188:	02 c0       	rjmp	.+4      	; 0x18e <main+0x78>
					show_menu();
 18a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <show_menu>
					show_OK = 1;
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <__data_end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 194:	2f ef       	ldi	r18, 0xFF	; 255
 196:	84 e3       	ldi	r24, 0x34	; 52
 198:	9c e0       	ldi	r25, 0x0C	; 12
 19a:	21 50       	subi	r18, 0x01	; 1
 19c:	80 40       	sbci	r24, 0x00	; 0
 19e:	90 40       	sbci	r25, 0x00	; 0
 1a0:	e1 f7       	brne	.-8      	; 0x19a <main+0x84>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <main+0x8e>
 1a4:	00 00       	nop
 1a6:	bb cf       	rjmp	.-138    	; 0x11e <main+0x8>

000001a8 <USART_Transmit>:
 */ 

#include "USART.h"

void USART_Transmit(char *data)
{
 1a8:	fc 01       	movw	r30, r24
	while(*data != '\0'){
 1aa:	07 c0       	rjmp	.+14     	; 0x1ba <USART_Transmit+0x12>
		while(!(UCSR0A & (1<<UDRE0))); //Waits for empty buffer to transmit
 1ac:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 1b0:	95 ff       	sbrs	r25, 5
 1b2:	fc cf       	rjmp	.-8      	; 0x1ac <USART_Transmit+0x4>
		
		//Put data into buffer and send data
		UDR0 = *data;
 1b4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		data++;
 1b8:	31 96       	adiw	r30, 0x01	; 1

#include "USART.h"

void USART_Transmit(char *data)
{
	while(*data != '\0'){
 1ba:	80 81       	ld	r24, Z
 1bc:	81 11       	cpse	r24, r1
 1be:	f6 cf       	rjmp	.-20     	; 0x1ac <USART_Transmit+0x4>
		
		//Put data into buffer and send data
		UDR0 = *data;
		data++;
	}
}
 1c0:	08 95       	ret

000001c2 <USART_TransmitChar>:

void USART_TransmitChar(char data)
{
	while(!(UCSR0A & (1<<UDRE0))); //Waits for empty buffer to transmit
 1c2:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 1c6:	95 ff       	sbrs	r25, 5
 1c8:	fc cf       	rjmp	.-8      	; 0x1c2 <USART_TransmitChar>
	UDR0 = data; //Put data into buffer and send data
 1ca:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1ce:	08 95       	ret

000001d0 <show_menu>:
}

void show_menu()
{
	USART_Transmit("0 - Mostrar Lucro");
 1d0:	8c e1       	ldi	r24, 0x1C	; 28
 1d2:	91 e0       	ldi	r25, 0x01	; 1
 1d4:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <USART_Transmit>
	USART_TransmitChar(NEWLINE);
 1d8:	8d e0       	ldi	r24, 0x0D	; 13
 1da:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <USART_TransmitChar>
	
	USART_Transmit("1 - Debug");
 1de:	8e e2       	ldi	r24, 0x2E	; 46
 1e0:	91 e0       	ldi	r25, 0x01	; 1
 1e2:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <USART_Transmit>
	USART_TransmitChar(NEWLINE);
 1e6:	8d e0       	ldi	r24, 0x0D	; 13
 1e8:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <USART_TransmitChar>
	
	USART_Transmit("2 - Sair Debug");
 1ec:	88 e3       	ldi	r24, 0x38	; 56
 1ee:	91 e0       	ldi	r25, 0x01	; 1
 1f0:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <USART_Transmit>
	USART_TransmitChar(NEWLINE);
 1f4:	8d e0       	ldi	r24, 0x0D	; 13
 1f6:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <USART_TransmitChar>
 1fa:	08 95       	ret

000001fc <show_profit>:
}

void show_profit()
{
	USART_Transmit("Peca 1: ");
 1fc:	87 e4       	ldi	r24, 0x47	; 71
 1fe:	91 e0       	ldi	r25, 0x01	; 1
 200:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <USART_Transmit>
	USART_Transmit("xx");
 204:	80 e5       	ldi	r24, 0x50	; 80
 206:	91 e0       	ldi	r25, 0x01	; 1
 208:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <USART_Transmit>
	USART_TransmitChar(NEWLINE);
 20c:	8d e0       	ldi	r24, 0x0D	; 13
 20e:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <USART_TransmitChar>
	USART_Transmit("Peca 2: ");
 212:	83 e5       	ldi	r24, 0x53	; 83
 214:	91 e0       	ldi	r25, 0x01	; 1
 216:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <USART_Transmit>
	USART_Transmit("xx");
 21a:	80 e5       	ldi	r24, 0x50	; 80
 21c:	91 e0       	ldi	r25, 0x01	; 1
 21e:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <USART_Transmit>
	USART_TransmitChar(NEWLINE);
 222:	8d e0       	ldi	r24, 0x0D	; 13
 224:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <USART_TransmitChar>
	USART_Transmit("Peca 3: ");
 228:	8c e5       	ldi	r24, 0x5C	; 92
 22a:	91 e0       	ldi	r25, 0x01	; 1
 22c:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <USART_Transmit>
	USART_Transmit("xx");
 230:	80 e5       	ldi	r24, 0x50	; 80
 232:	91 e0       	ldi	r25, 0x01	; 1
 234:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <USART_Transmit>
	USART_TransmitChar(NEWLINE);
 238:	8d e0       	ldi	r24, 0x0D	; 13
 23a:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <USART_TransmitChar>
 23e:	08 95       	ret

00000240 <_exit>:
 240:	f8 94       	cli

00000242 <__stop_program>:
 242:	ff cf       	rjmp	.-2      	; 0x242 <__stop_program>
