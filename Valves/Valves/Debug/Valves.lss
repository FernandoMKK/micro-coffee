
Valves.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000164  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b58  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007cd  00000000  00000000  00000de8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000295  00000000  00000000  000015b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  0000184c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000046b  00000000  00000000  000018f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000098  00000000  00000000  00001d5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001df7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 b0 00 	jmp	0x160	; 0x160 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:

#include "valve.h"


int main(void)
{
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	00 d0       	rcall	.+0      	; 0x86 <main+0x6>
  86:	00 d0       	rcall	.+0      	; 0x88 <main+0x8>
  88:	00 d0       	rcall	.+0      	; 0x8a <main+0xa>
  8a:	cd b7       	in	r28, 0x3d	; 61
  8c:	de b7       	in	r29, 0x3e	; 62
    DDRD = 0x00;
  8e:	1a b8       	out	0x0a, r1	; 10
	
	Valve valve1, valve2, valve3;
  90:	ce 01       	movw	r24, r28
  92:	01 96       	adiw	r24, 0x01	; 1
  94:	0e 94 84 00 	call	0x108	; 0x108 <_ZN5ValveC1Ev>
  98:	ce 01       	movw	r24, r28
  9a:	03 96       	adiw	r24, 0x03	; 3
  9c:	0e 94 84 00 	call	0x108	; 0x108 <_ZN5ValveC1Ev>
  a0:	ce 01       	movw	r24, r28
  a2:	05 96       	adiw	r24, 0x05	; 5
  a4:	0e 94 84 00 	call	0x108	; 0x108 <_ZN5ValveC1Ev>
	valve1.attachToPort(PORTB2);
  a8:	62 e0       	ldi	r22, 0x02	; 2
  aa:	ce 01       	movw	r24, r28
  ac:	01 96       	adiw	r24, 0x01	; 1
  ae:	0e 94 85 00 	call	0x10a	; 0x10a <_ZN5Valve12attachToPortEh>
	valve2.attachToPort(PORTB4);
  b2:	64 e0       	ldi	r22, 0x04	; 4
  b4:	ce 01       	movw	r24, r28
  b6:	03 96       	adiw	r24, 0x03	; 3
  b8:	0e 94 85 00 	call	0x10a	; 0x10a <_ZN5Valve12attachToPortEh>
	valve3.attachToPort(PORTB5);
  bc:	65 e0       	ldi	r22, 0x05	; 5
  be:	ce 01       	movw	r24, r28
  c0:	05 96       	adiw	r24, 0x05	; 5
  c2:	0e 94 85 00 	call	0x10a	; 0x10a <_ZN5Valve12attachToPortEh>
	
    while (1) 
    {
		if(tst_bit(PIND, PORTD2) > 0)
  c6:	4a 9b       	sbis	0x09, 2	; 9
  c8:	04 c0       	rjmp	.+8      	; 0xd2 <main+0x52>
			valve1.turnOn();
  ca:	ce 01       	movw	r24, r28
  cc:	01 96       	adiw	r24, 0x01	; 1
  ce:	0e 94 92 00 	call	0x124	; 0x124 <_ZN5Valve6turnOnEv>
		if(tst_bit(PIND, PORTD3) > 0)
  d2:	4b 9b       	sbis	0x09, 3	; 9
  d4:	04 c0       	rjmp	.+8      	; 0xde <main+0x5e>
			valve2.turnOn();
  d6:	ce 01       	movw	r24, r28
  d8:	03 96       	adiw	r24, 0x03	; 3
  da:	0e 94 92 00 	call	0x124	; 0x124 <_ZN5Valve6turnOnEv>
		if(tst_bit(PIND, PORTD4) > 0)
  de:	4c 9b       	sbis	0x09, 4	; 9
  e0:	04 c0       	rjmp	.+8      	; 0xea <main+0x6a>
			valve3.turnOn();
  e2:	ce 01       	movw	r24, r28
  e4:	05 96       	adiw	r24, 0x05	; 5
  e6:	0e 94 92 00 	call	0x124	; 0x124 <_ZN5Valve6turnOnEv>
		if(tst_bit(PIND, PORTD5) > 0){
  ea:	4d 9b       	sbis	0x09, 5	; 9
  ec:	ec cf       	rjmp	.-40     	; 0xc6 <main+0x46>
			valve1.turnOff();
  ee:	ce 01       	movw	r24, r28
  f0:	01 96       	adiw	r24, 0x01	; 1
  f2:	0e 94 a1 00 	call	0x142	; 0x142 <_ZN5Valve7turnOffEv>
			valve2.turnOff();
  f6:	ce 01       	movw	r24, r28
  f8:	03 96       	adiw	r24, 0x03	; 3
  fa:	0e 94 a1 00 	call	0x142	; 0x142 <_ZN5Valve7turnOffEv>
			valve3.turnOff();
  fe:	ce 01       	movw	r24, r28
 100:	05 96       	adiw	r24, 0x05	; 5
 102:	0e 94 a1 00 	call	0x142	; 0x142 <_ZN5Valve7turnOffEv>
 106:	df cf       	rjmp	.-66     	; 0xc6 <main+0x46>

00000108 <_ZN5ValveC1Ev>:
Valve::Valve()
{
	//ctor
}

Valve::~Valve()
 108:	08 95       	ret

0000010a <_ZN5Valve12attachToPortEh>:
	//dtor
}

void Valve::attachToPort(unsigned char port)
{
	this->port = port;
 10a:	fc 01       	movw	r30, r24
 10c:	60 83       	st	Z, r22
	set_bit(DDRB, port);
 10e:	24 b1       	in	r18, 0x04	; 4
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	02 c0       	rjmp	.+4      	; 0x11a <_ZN5Valve12attachToPortEh+0x10>
 116:	88 0f       	add	r24, r24
 118:	99 1f       	adc	r25, r25
 11a:	6a 95       	dec	r22
 11c:	e2 f7       	brpl	.-8      	; 0x116 <_ZN5Valve12attachToPortEh+0xc>
 11e:	82 2b       	or	r24, r18
 120:	84 b9       	out	0x04, r24	; 4
 122:	08 95       	ret

00000124 <_ZN5Valve6turnOnEv>:
}

void Valve::turnOn()
{
	set_bit(PORTB, this->port);
 124:	45 b1       	in	r20, 0x05	; 5
 126:	21 e0       	ldi	r18, 0x01	; 1
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	fc 01       	movw	r30, r24
 12c:	00 80       	ld	r0, Z
 12e:	02 c0       	rjmp	.+4      	; 0x134 <_ZN5Valve6turnOnEv+0x10>
 130:	22 0f       	add	r18, r18
 132:	33 1f       	adc	r19, r19
 134:	0a 94       	dec	r0
 136:	e2 f7       	brpl	.-8      	; 0x130 <_ZN5Valve6turnOnEv+0xc>
 138:	24 2b       	or	r18, r20
 13a:	25 b9       	out	0x05, r18	; 5
	this->state = true;
 13c:	21 e0       	ldi	r18, 0x01	; 1
 13e:	21 83       	std	Z+1, r18	; 0x01
 140:	08 95       	ret

00000142 <_ZN5Valve7turnOffEv>:
}

void Valve::turnOff()
{
 142:	fc 01       	movw	r30, r24
	clr_bit(PORTB, this->port);
 144:	95 b1       	in	r25, 0x05	; 5
 146:	21 e0       	ldi	r18, 0x01	; 1
 148:	30 e0       	ldi	r19, 0x00	; 0
 14a:	00 80       	ld	r0, Z
 14c:	02 c0       	rjmp	.+4      	; 0x152 <_ZN5Valve7turnOffEv+0x10>
 14e:	22 0f       	add	r18, r18
 150:	33 1f       	adc	r19, r19
 152:	0a 94       	dec	r0
 154:	e2 f7       	brpl	.-8      	; 0x14e <_ZN5Valve7turnOffEv+0xc>
 156:	20 95       	com	r18
 158:	29 23       	and	r18, r25
 15a:	25 b9       	out	0x05, r18	; 5
	this->state = false;
 15c:	11 82       	std	Z+1, r1	; 0x01
 15e:	08 95       	ret

00000160 <_exit>:
 160:	f8 94       	cli

00000162 <__stop_program>:
 162:	ff cf       	rjmp	.-2      	; 0x162 <__stop_program>
