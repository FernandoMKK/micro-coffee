
micro-coffee-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000108  00800100  000013aa  0000143e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800208  00800208  00001546  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001546  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000015a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  000015e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001935  00000000  00000000  000016d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b01  00000000  00000000  00003009  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000996  00000000  00000000  00003b0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000288  00000000  00000000  000044a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007b6  00000000  00000000  00004728  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000087f  00000000  00000000  00004ede  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  0000575d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 44 00 	jmp	0x88	; 0x88 <__dtors_end>
       4:	0c 94 30 01 	jmp	0x260	; 0x260 <__vector_1>
       8:	0c 94 49 01 	jmp	0x292	; 0x292 <__vector_2>
       c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      48:	0c 94 88 02 	jmp	0x510	; 0x510 <__vector_18>
      4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      68:	a9 00       	.word	0x00a9	; ????
      6a:	b6 00       	.word	0x00b6	; ????
      6c:	c3 00       	.word	0x00c3	; ????
      6e:	d0 00       	.word	0x00d0	; ????
      70:	dd 00       	.word	0x00dd	; ????
      72:	ea 00       	.word	0x00ea	; ????
      74:	f7 00       	.word	0x00f7	; ????
      76:	6a 01       	movw	r12, r20
      78:	8c 01       	movw	r16, r24
      7a:	ae 01       	movw	r20, r28
      7c:	d0 01       	movw	r26, r0
      7e:	f2 01       	movw	r30, r4
      80:	14 02       	muls	r17, r20
      82:	36 02       	muls	r19, r22

00000084 <__ctors_start>:
      84:	29 03       	fmul	r18, r17

00000086 <__ctors_end>:
      86:	30 03       	mulsu	r19, r16

00000088 <__dtors_end>:
      88:	11 24       	eor	r1, r1
      8a:	1f be       	out	0x3f, r1	; 63
      8c:	cf ef       	ldi	r28, 0xFF	; 255
      8e:	d8 e0       	ldi	r29, 0x08	; 8
      90:	de bf       	out	0x3e, r29	; 62
      92:	cd bf       	out	0x3d, r28	; 61

00000094 <__do_copy_data>:
      94:	12 e0       	ldi	r17, 0x02	; 2
      96:	a0 e0       	ldi	r26, 0x00	; 0
      98:	b1 e0       	ldi	r27, 0x01	; 1
      9a:	ea ea       	ldi	r30, 0xAA	; 170
      9c:	f3 e1       	ldi	r31, 0x13	; 19
      9e:	02 c0       	rjmp	.+4      	; 0xa4 <__do_copy_data+0x10>
      a0:	05 90       	lpm	r0, Z+
      a2:	0d 92       	st	X+, r0
      a4:	a8 30       	cpi	r26, 0x08	; 8
      a6:	b1 07       	cpc	r27, r17
      a8:	d9 f7       	brne	.-10     	; 0xa0 <__do_copy_data+0xc>

000000aa <__do_clear_bss>:
      aa:	22 e0       	ldi	r18, 0x02	; 2
      ac:	a8 e0       	ldi	r26, 0x08	; 8
      ae:	b2 e0       	ldi	r27, 0x02	; 2
      b0:	01 c0       	rjmp	.+2      	; 0xb4 <.do_clear_bss_start>

000000b2 <.do_clear_bss_loop>:
      b2:	1d 92       	st	X+, r1

000000b4 <.do_clear_bss_start>:
      b4:	a9 31       	cpi	r26, 0x19	; 25
      b6:	b2 07       	cpc	r27, r18
      b8:	e1 f7       	brne	.-8      	; 0xb2 <.do_clear_bss_loop>

000000ba <__do_global_ctors>:
      ba:	10 e0       	ldi	r17, 0x00	; 0
      bc:	c3 e4       	ldi	r28, 0x43	; 67
      be:	d0 e0       	ldi	r29, 0x00	; 0
      c0:	04 c0       	rjmp	.+8      	; 0xca <__do_global_ctors+0x10>
      c2:	21 97       	sbiw	r28, 0x01	; 1
      c4:	fe 01       	movw	r30, r28
      c6:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__tablejump2__>
      ca:	c2 34       	cpi	r28, 0x42	; 66
      cc:	d1 07       	cpc	r29, r17
      ce:	c9 f7       	brne	.-14     	; 0xc2 <__do_global_ctors+0x8>
      d0:	0e 94 ad 02 	call	0x55a	; 0x55a <main>
      d4:	0c 94 c8 09 	jmp	0x1390	; 0x1390 <__do_global_dtors>

000000d8 <__bad_interrupt>:
      d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <_ZN11Display7segC1Ev>:
 *  Author: Fernando Kirchner
 */ 

#include "display7seg.h"

Display7seg::Display7seg()
      dc:	08 95       	ret

000000de <_ZN11Display7segD1Ev>:
{
	//ctor
}

Display7seg::~Display7seg()
      de:	08 95       	ret

000000e0 <_ZN11Display7seg13attachToPortsEhhhh>:
{
	//dtor
}

void Display7seg::attachToPorts(unsigned char d0, unsigned char d1, unsigned char d2, unsigned char d3)
{
      e0:	0f 93       	push	r16
	set_bit(DDRC, d0);
      e2:	37 b1       	in	r19, 0x07	; 7
      e4:	81 e0       	ldi	r24, 0x01	; 1
      e6:	90 e0       	ldi	r25, 0x00	; 0
      e8:	fc 01       	movw	r30, r24
      ea:	02 c0       	rjmp	.+4      	; 0xf0 <_ZN11Display7seg13attachToPortsEhhhh+0x10>
      ec:	ee 0f       	add	r30, r30
      ee:	ff 1f       	adc	r31, r31
      f0:	6a 95       	dec	r22
      f2:	e2 f7       	brpl	.-8      	; 0xec <_ZN11Display7seg13attachToPortsEhhhh+0xc>
      f4:	bf 01       	movw	r22, r30
      f6:	63 2b       	or	r22, r19
      f8:	67 b9       	out	0x07, r22	; 7
	set_bit(DDRC, d1);
      fa:	37 b1       	in	r19, 0x07	; 7
      fc:	bc 01       	movw	r22, r24
      fe:	02 c0       	rjmp	.+4      	; 0x104 <_ZN11Display7seg13attachToPortsEhhhh+0x24>
     100:	66 0f       	add	r22, r22
     102:	77 1f       	adc	r23, r23
     104:	4a 95       	dec	r20
     106:	e2 f7       	brpl	.-8      	; 0x100 <_ZN11Display7seg13attachToPortsEhhhh+0x20>
     108:	ab 01       	movw	r20, r22
     10a:	43 2b       	or	r20, r19
     10c:	47 b9       	out	0x07, r20	; 7
	set_bit(DDRC, d2);
     10e:	47 b1       	in	r20, 0x07	; 7
     110:	fc 01       	movw	r30, r24
     112:	02 c0       	rjmp	.+4      	; 0x118 <_ZN11Display7seg13attachToPortsEhhhh+0x38>
     114:	ee 0f       	add	r30, r30
     116:	ff 1f       	adc	r31, r31
     118:	2a 95       	dec	r18
     11a:	e2 f7       	brpl	.-8      	; 0x114 <_ZN11Display7seg13attachToPortsEhhhh+0x34>
     11c:	9f 01       	movw	r18, r30
     11e:	24 2b       	or	r18, r20
     120:	27 b9       	out	0x07, r18	; 7
	set_bit(DDRC, d3);
     122:	27 b1       	in	r18, 0x07	; 7
     124:	02 c0       	rjmp	.+4      	; 0x12a <_ZN11Display7seg13attachToPortsEhhhh+0x4a>
     126:	88 0f       	add	r24, r24
     128:	99 1f       	adc	r25, r25
     12a:	0a 95       	dec	r16
     12c:	e2 f7       	brpl	.-8      	; 0x126 <_ZN11Display7seg13attachToPortsEhhhh+0x46>
     12e:	82 2b       	or	r24, r18
     130:	87 b9       	out	0x07, r24	; 7
}
     132:	0f 91       	pop	r16
     134:	08 95       	ret

00000136 <_ZN11Display7seg13updateDisplayEPVh>:

void Display7seg::updateDisplay(volatile unsigned char *num)
{
	switch(*num){
     136:	db 01       	movw	r26, r22
     138:	ec 91       	ld	r30, X
     13a:	8e 2f       	mov	r24, r30
     13c:	90 e0       	ldi	r25, 0x00	; 0
     13e:	fc 01       	movw	r30, r24
     140:	31 97       	sbiw	r30, 0x01	; 1
     142:	e7 30       	cpi	r30, 0x07	; 7
     144:	f1 05       	cpc	r31, r1
     146:	08 f0       	brcs	.+2      	; 0x14a <_ZN11Display7seg13updateDisplayEPVh+0x14>
     148:	5e c0       	rjmp	.+188    	; 0x206 <_ZN11Display7seg13updateDisplayEPVh+0xd0>
     14a:	ec 5c       	subi	r30, 0xCC	; 204
     14c:	ff 4f       	sbci	r31, 0xFF	; 255
     14e:	0c 94 d8 06 	jmp	0xdb0	; 0xdb0 <__tablejump2__>
		case 1:
		set_bit(PORTC, PORTC0);
     152:	88 b1       	in	r24, 0x08	; 8
     154:	81 60       	ori	r24, 0x01	; 1
     156:	88 b9       	out	0x08, r24	; 8
		clr_bit(PORTC, PORTC1);
     158:	88 b1       	in	r24, 0x08	; 8
     15a:	8d 7f       	andi	r24, 0xFD	; 253
     15c:	88 b9       	out	0x08, r24	; 8
		clr_bit(PORTC, PORTC2);
     15e:	88 b1       	in	r24, 0x08	; 8
     160:	8b 7f       	andi	r24, 0xFB	; 251
     162:	88 b9       	out	0x08, r24	; 8
		clr_bit(PORTC, PORTC3);
     164:	88 b1       	in	r24, 0x08	; 8
     166:	87 7f       	andi	r24, 0xF7	; 247
     168:	88 b9       	out	0x08, r24	; 8
		break;
     16a:	08 95       	ret
		
		case 2:
		clr_bit(PORTC, PORTC0);
     16c:	88 b1       	in	r24, 0x08	; 8
     16e:	8e 7f       	andi	r24, 0xFE	; 254
     170:	88 b9       	out	0x08, r24	; 8
		set_bit(PORTC, PORTC1);
     172:	88 b1       	in	r24, 0x08	; 8
     174:	82 60       	ori	r24, 0x02	; 2
     176:	88 b9       	out	0x08, r24	; 8
		clr_bit(PORTC, PORTC2);
     178:	88 b1       	in	r24, 0x08	; 8
     17a:	8b 7f       	andi	r24, 0xFB	; 251
     17c:	88 b9       	out	0x08, r24	; 8
		clr_bit(PORTC, PORTC3);
     17e:	88 b1       	in	r24, 0x08	; 8
     180:	87 7f       	andi	r24, 0xF7	; 247
     182:	88 b9       	out	0x08, r24	; 8
		break;
     184:	08 95       	ret
		
		case 3:
		set_bit(PORTC, PORTC0);
     186:	88 b1       	in	r24, 0x08	; 8
     188:	81 60       	ori	r24, 0x01	; 1
     18a:	88 b9       	out	0x08, r24	; 8
		set_bit(PORTC, PORTC1);
     18c:	88 b1       	in	r24, 0x08	; 8
     18e:	82 60       	ori	r24, 0x02	; 2
     190:	88 b9       	out	0x08, r24	; 8
		clr_bit(PORTC, PORTC2);
     192:	88 b1       	in	r24, 0x08	; 8
     194:	8b 7f       	andi	r24, 0xFB	; 251
     196:	88 b9       	out	0x08, r24	; 8
		clr_bit(PORTC, PORTC3);
     198:	88 b1       	in	r24, 0x08	; 8
     19a:	87 7f       	andi	r24, 0xF7	; 247
     19c:	88 b9       	out	0x08, r24	; 8
		break;
     19e:	08 95       	ret
		
		case 4:
		clr_bit(PORTC, PORTC0);
     1a0:	88 b1       	in	r24, 0x08	; 8
     1a2:	8e 7f       	andi	r24, 0xFE	; 254
     1a4:	88 b9       	out	0x08, r24	; 8
		clr_bit(PORTC, PORTC1);
     1a6:	88 b1       	in	r24, 0x08	; 8
     1a8:	8d 7f       	andi	r24, 0xFD	; 253
     1aa:	88 b9       	out	0x08, r24	; 8
		set_bit(PORTC, PORTC2);
     1ac:	88 b1       	in	r24, 0x08	; 8
     1ae:	84 60       	ori	r24, 0x04	; 4
     1b0:	88 b9       	out	0x08, r24	; 8
		clr_bit(PORTC, PORTC3);
     1b2:	88 b1       	in	r24, 0x08	; 8
     1b4:	87 7f       	andi	r24, 0xF7	; 247
     1b6:	88 b9       	out	0x08, r24	; 8
		break;
     1b8:	08 95       	ret
		
		case 5:
		set_bit(PORTC, PORTC0);
     1ba:	88 b1       	in	r24, 0x08	; 8
     1bc:	81 60       	ori	r24, 0x01	; 1
     1be:	88 b9       	out	0x08, r24	; 8
		clr_bit(PORTC, PORTC1);
     1c0:	88 b1       	in	r24, 0x08	; 8
     1c2:	8d 7f       	andi	r24, 0xFD	; 253
     1c4:	88 b9       	out	0x08, r24	; 8
		set_bit(PORTC, PORTC2);
     1c6:	88 b1       	in	r24, 0x08	; 8
     1c8:	84 60       	ori	r24, 0x04	; 4
     1ca:	88 b9       	out	0x08, r24	; 8
		clr_bit(PORTC, PORTC3);
     1cc:	88 b1       	in	r24, 0x08	; 8
     1ce:	87 7f       	andi	r24, 0xF7	; 247
     1d0:	88 b9       	out	0x08, r24	; 8
		break;
     1d2:	08 95       	ret
		
		case 6:
		clr_bit(PORTC, PORTC0);
     1d4:	88 b1       	in	r24, 0x08	; 8
     1d6:	8e 7f       	andi	r24, 0xFE	; 254
     1d8:	88 b9       	out	0x08, r24	; 8
		set_bit(PORTC, PORTC1);
     1da:	88 b1       	in	r24, 0x08	; 8
     1dc:	82 60       	ori	r24, 0x02	; 2
     1de:	88 b9       	out	0x08, r24	; 8
		set_bit(PORTC, PORTC2);
     1e0:	88 b1       	in	r24, 0x08	; 8
     1e2:	84 60       	ori	r24, 0x04	; 4
     1e4:	88 b9       	out	0x08, r24	; 8
		clr_bit(PORTC, PORTC3);
     1e6:	88 b1       	in	r24, 0x08	; 8
     1e8:	87 7f       	andi	r24, 0xF7	; 247
     1ea:	88 b9       	out	0x08, r24	; 8
		break;
     1ec:	08 95       	ret
		
		case 7:
		set_bit(PORTC, PORTC0);
     1ee:	88 b1       	in	r24, 0x08	; 8
     1f0:	81 60       	ori	r24, 0x01	; 1
     1f2:	88 b9       	out	0x08, r24	; 8
		set_bit(PORTC, PORTC1);
     1f4:	88 b1       	in	r24, 0x08	; 8
     1f6:	82 60       	ori	r24, 0x02	; 2
     1f8:	88 b9       	out	0x08, r24	; 8
		set_bit(PORTC, PORTC2);
     1fa:	88 b1       	in	r24, 0x08	; 8
     1fc:	84 60       	ori	r24, 0x04	; 4
     1fe:	88 b9       	out	0x08, r24	; 8
		clr_bit(PORTC, PORTC3);
     200:	88 b1       	in	r24, 0x08	; 8
     202:	87 7f       	andi	r24, 0xF7	; 247
     204:	88 b9       	out	0x08, r24	; 8
     206:	08 95       	ret

00000208 <_Z41__static_initialization_and_destruction_0ii>:
				break;
			}
		}
		_delay_ms(250);
    }
}
     208:	ef 92       	push	r14
     20a:	ff 92       	push	r15
     20c:	0f 93       	push	r16
     20e:	cf 93       	push	r28
     210:	df 93       	push	r29
     212:	ec 01       	movw	r28, r24
     214:	7b 01       	movw	r14, r22
     216:	01 97       	sbiw	r24, 0x01	; 1
     218:	81 f4       	brne	.+32     	; 0x23a <_Z41__static_initialization_and_destruction_0ii+0x32>
     21a:	6f 3f       	cpi	r22, 0xFF	; 255
     21c:	7f 4f       	sbci	r23, 0xFF	; 255
     21e:	69 f4       	brne	.+26     	; 0x23a <_Z41__static_initialization_and_destruction_0ii+0x32>
#include "display7seg.h"
#include "serial.h"
#include <util/delay.h>

//Creates objetcs
Serial serial(9600, 1, 8, 'N');
     220:	0e e4       	ldi	r16, 0x4E	; 78
     222:	28 e0       	ldi	r18, 0x08	; 8
     224:	41 e0       	ldi	r20, 0x01	; 1
     226:	60 e8       	ldi	r22, 0x80	; 128
     228:	75 e2       	ldi	r23, 0x25	; 37
     22a:	84 e1       	ldi	r24, 0x14	; 20
     22c:	92 e0       	ldi	r25, 0x02	; 2
     22e:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <_ZN6SerialC1Ejhhh>
Display7seg _7seg;
     232:	80 e1       	ldi	r24, 0x10	; 16
     234:	92 e0       	ldi	r25, 0x02	; 2
     236:	0e 94 6e 00 	call	0xdc	; 0xdc <_ZN11Display7segC1Ev>
     23a:	cd 2b       	or	r28, r29
     23c:	59 f4       	brne	.+22     	; 0x254 <_Z41__static_initialization_and_destruction_0ii+0x4c>
     23e:	ef 20       	and	r14, r15
     240:	e0 94       	com	r14
     242:	41 f4       	brne	.+16     	; 0x254 <_Z41__static_initialization_and_destruction_0ii+0x4c>
     244:	80 e1       	ldi	r24, 0x10	; 16
     246:	92 e0       	ldi	r25, 0x02	; 2
     248:	0e 94 6f 00 	call	0xde	; 0xde <_ZN11Display7segD1Ev>
#include "display7seg.h"
#include "serial.h"
#include <util/delay.h>

//Creates objetcs
Serial serial(9600, 1, 8, 'N');
     24c:	84 e1       	ldi	r24, 0x14	; 20
     24e:	92 e0       	ldi	r25, 0x02	; 2
     250:	0e 94 37 03 	call	0x66e	; 0x66e <_ZN6SerialD1Ev>
				break;
			}
		}
		_delay_ms(250);
    }
}
     254:	df 91       	pop	r29
     256:	cf 91       	pop	r28
     258:	0f 91       	pop	r16
     25a:	ff 90       	pop	r15
     25c:	ef 90       	pop	r14
     25e:	08 95       	ret

00000260 <__vector_1>:
volatile bool command_OK = false;
bool debug_mode = false;
volatile bool show_OK = false;

ISR(INT0_vect)
{
     260:	1f 92       	push	r1
     262:	0f 92       	push	r0
     264:	0f b6       	in	r0, 0x3f	; 63
     266:	0f 92       	push	r0
     268:	11 24       	eor	r1, r1
     26a:	8f 93       	push	r24
	if(menu_index < 7)
     26c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     270:	87 30       	cpi	r24, 0x07	; 7
     272:	30 f4       	brcc	.+12     	; 0x280 <__vector_1+0x20>
		menu_index++;
     274:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     278:	8f 5f       	subi	r24, 0xFF	; 255
     27a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     27e:	03 c0       	rjmp	.+6      	; 0x286 <__vector_1+0x26>
	else
		menu_index = 1;
     280:	81 e0       	ldi	r24, 0x01	; 1
     282:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
     286:	8f 91       	pop	r24
     288:	0f 90       	pop	r0
     28a:	0f be       	out	0x3f, r0	; 63
     28c:	0f 90       	pop	r0
     28e:	1f 90       	pop	r1
     290:	18 95       	reti

00000292 <__vector_2>:

ISR(INT1_vect)
{
     292:	1f 92       	push	r1
     294:	0f 92       	push	r0
     296:	0f b6       	in	r0, 0x3f	; 63
     298:	0f 92       	push	r0
     29a:	11 24       	eor	r1, r1
     29c:	2f 93       	push	r18
     29e:	3f 93       	push	r19
     2a0:	4f 93       	push	r20
     2a2:	5f 93       	push	r21
     2a4:	6f 93       	push	r22
     2a6:	7f 93       	push	r23
     2a8:	8f 93       	push	r24
     2aa:	9f 93       	push	r25
     2ac:	af 93       	push	r26
     2ae:	bf 93       	push	r27
     2b0:	ef 93       	push	r30
     2b2:	ff 93       	push	r31
	if(tst_bit(PIND, PORTD2) == 0){
     2b4:	4a 99       	sbic	0x09, 2	; 9
     2b6:	08 c1       	rjmp	.+528    	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
		switch(menu_index){
     2b8:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     2bc:	8e 2f       	mov	r24, r30
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	fc 01       	movw	r30, r24
     2c2:	31 97       	sbiw	r30, 0x01	; 1
     2c4:	e7 30       	cpi	r30, 0x07	; 7
     2c6:	f1 05       	cpc	r31, r1
     2c8:	08 f0       	brcs	.+2      	; 0x2cc <__vector_2+0x3a>
     2ca:	f2 c0       	rjmp	.+484    	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
     2cc:	e5 5c       	subi	r30, 0xC5	; 197
     2ce:	ff 4f       	sbci	r31, 0xFF	; 255
     2d0:	0c 94 d8 06 	jmp	0xdb0	; 0xdb0 <__tablejump2__>
			case 1:
				serial.transmit("Opcao 1 Escolhida");
     2d4:	61 e0       	ldi	r22, 0x01	; 1
     2d6:	71 e0       	ldi	r23, 0x01	; 1
     2d8:	84 e1       	ldi	r24, 0x14	; 20
     2da:	92 e0       	ldi	r25, 0x02	; 2
     2dc:	0e 94 29 04 	call	0x852	; 0x852 <_ZN6Serial8transmitEPc>
				serial.transmitChar(NEWLINE);
     2e0:	6d e0       	ldi	r22, 0x0D	; 13
     2e2:	84 e1       	ldi	r24, 0x14	; 20
     2e4:	92 e0       	ldi	r25, 0x02	; 2
     2e6:	0e 94 36 04 	call	0x86c	; 0x86c <_ZN6Serial12transmitCharEc>
				money += 1.50;
     2ea:	60 91 0c 02 	lds	r22, 0x020C	; 0x80020c <money>
     2ee:	70 91 0d 02 	lds	r23, 0x020D	; 0x80020d <money+0x1>
     2f2:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <money+0x2>
     2f6:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <money+0x3>
     2fa:	20 e0       	ldi	r18, 0x00	; 0
     2fc:	30 e0       	ldi	r19, 0x00	; 0
     2fe:	40 ec       	ldi	r20, 0xC0	; 192
     300:	5f e3       	ldi	r21, 0x3F	; 63
     302:	0e 94 cd 04 	call	0x99a	; 0x99a <__addsf3>
     306:	60 93 0c 02 	sts	0x020C, r22	; 0x80020c <money>
     30a:	70 93 0d 02 	sts	0x020D, r23	; 0x80020d <money+0x1>
     30e:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <money+0x2>
     312:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <money+0x3>
				break;
     316:	eb c0       	rjmp	.+470    	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
			case 2:
				serial.transmit("Opcao 2 Escolhida");
     318:	63 e1       	ldi	r22, 0x13	; 19
     31a:	71 e0       	ldi	r23, 0x01	; 1
     31c:	84 e1       	ldi	r24, 0x14	; 20
     31e:	92 e0       	ldi	r25, 0x02	; 2
     320:	0e 94 29 04 	call	0x852	; 0x852 <_ZN6Serial8transmitEPc>
				serial.transmitChar(NEWLINE);
     324:	6d e0       	ldi	r22, 0x0D	; 13
     326:	84 e1       	ldi	r24, 0x14	; 20
     328:	92 e0       	ldi	r25, 0x02	; 2
     32a:	0e 94 36 04 	call	0x86c	; 0x86c <_ZN6Serial12transmitCharEc>
				money += 2.00;
     32e:	60 91 0c 02 	lds	r22, 0x020C	; 0x80020c <money>
     332:	70 91 0d 02 	lds	r23, 0x020D	; 0x80020d <money+0x1>
     336:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <money+0x2>
     33a:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <money+0x3>
     33e:	20 e0       	ldi	r18, 0x00	; 0
     340:	30 e0       	ldi	r19, 0x00	; 0
     342:	40 e0       	ldi	r20, 0x00	; 0
     344:	50 e4       	ldi	r21, 0x40	; 64
     346:	0e 94 cd 04 	call	0x99a	; 0x99a <__addsf3>
     34a:	60 93 0c 02 	sts	0x020C, r22	; 0x80020c <money>
     34e:	70 93 0d 02 	sts	0x020D, r23	; 0x80020d <money+0x1>
     352:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <money+0x2>
     356:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <money+0x3>
				break;
     35a:	c9 c0       	rjmp	.+402    	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
			case 3:
				serial.transmit("Opcao 3 Escolhida");
     35c:	65 e2       	ldi	r22, 0x25	; 37
     35e:	71 e0       	ldi	r23, 0x01	; 1
     360:	84 e1       	ldi	r24, 0x14	; 20
     362:	92 e0       	ldi	r25, 0x02	; 2
     364:	0e 94 29 04 	call	0x852	; 0x852 <_ZN6Serial8transmitEPc>
				serial.transmitChar(NEWLINE);
     368:	6d e0       	ldi	r22, 0x0D	; 13
     36a:	84 e1       	ldi	r24, 0x14	; 20
     36c:	92 e0       	ldi	r25, 0x02	; 2
     36e:	0e 94 36 04 	call	0x86c	; 0x86c <_ZN6Serial12transmitCharEc>
				money += 2.75;
     372:	60 91 0c 02 	lds	r22, 0x020C	; 0x80020c <money>
     376:	70 91 0d 02 	lds	r23, 0x020D	; 0x80020d <money+0x1>
     37a:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <money+0x2>
     37e:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <money+0x3>
     382:	20 e0       	ldi	r18, 0x00	; 0
     384:	30 e0       	ldi	r19, 0x00	; 0
     386:	40 e3       	ldi	r20, 0x30	; 48
     388:	50 e4       	ldi	r21, 0x40	; 64
     38a:	0e 94 cd 04 	call	0x99a	; 0x99a <__addsf3>
     38e:	60 93 0c 02 	sts	0x020C, r22	; 0x80020c <money>
     392:	70 93 0d 02 	sts	0x020D, r23	; 0x80020d <money+0x1>
     396:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <money+0x2>
     39a:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <money+0x3>
				break;
     39e:	a7 c0       	rjmp	.+334    	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
			case 4:
				serial.transmit("Opcao 4 Escolhida");
     3a0:	67 e3       	ldi	r22, 0x37	; 55
     3a2:	71 e0       	ldi	r23, 0x01	; 1
     3a4:	84 e1       	ldi	r24, 0x14	; 20
     3a6:	92 e0       	ldi	r25, 0x02	; 2
     3a8:	0e 94 29 04 	call	0x852	; 0x852 <_ZN6Serial8transmitEPc>
				serial.transmitChar(NEWLINE);
     3ac:	6d e0       	ldi	r22, 0x0D	; 13
     3ae:	84 e1       	ldi	r24, 0x14	; 20
     3b0:	92 e0       	ldi	r25, 0x02	; 2
     3b2:	0e 94 36 04 	call	0x86c	; 0x86c <_ZN6Serial12transmitCharEc>
				money += 1.00;
     3b6:	60 91 0c 02 	lds	r22, 0x020C	; 0x80020c <money>
     3ba:	70 91 0d 02 	lds	r23, 0x020D	; 0x80020d <money+0x1>
     3be:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <money+0x2>
     3c2:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <money+0x3>
     3c6:	20 e0       	ldi	r18, 0x00	; 0
     3c8:	30 e0       	ldi	r19, 0x00	; 0
     3ca:	40 e8       	ldi	r20, 0x80	; 128
     3cc:	5f e3       	ldi	r21, 0x3F	; 63
     3ce:	0e 94 cd 04 	call	0x99a	; 0x99a <__addsf3>
     3d2:	60 93 0c 02 	sts	0x020C, r22	; 0x80020c <money>
     3d6:	70 93 0d 02 	sts	0x020D, r23	; 0x80020d <money+0x1>
     3da:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <money+0x2>
     3de:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <money+0x3>
				break;
     3e2:	85 c0       	rjmp	.+266    	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
			case 5:
				serial.transmit("Opcao 5 Escolhida");
     3e4:	69 e4       	ldi	r22, 0x49	; 73
     3e6:	71 e0       	ldi	r23, 0x01	; 1
     3e8:	84 e1       	ldi	r24, 0x14	; 20
     3ea:	92 e0       	ldi	r25, 0x02	; 2
     3ec:	0e 94 29 04 	call	0x852	; 0x852 <_ZN6Serial8transmitEPc>
				serial.transmitChar(NEWLINE);
     3f0:	6d e0       	ldi	r22, 0x0D	; 13
     3f2:	84 e1       	ldi	r24, 0x14	; 20
     3f4:	92 e0       	ldi	r25, 0x02	; 2
     3f6:	0e 94 36 04 	call	0x86c	; 0x86c <_ZN6Serial12transmitCharEc>
				money += 1.80;
     3fa:	60 91 0c 02 	lds	r22, 0x020C	; 0x80020c <money>
     3fe:	70 91 0d 02 	lds	r23, 0x020D	; 0x80020d <money+0x1>
     402:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <money+0x2>
     406:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <money+0x3>
     40a:	26 e6       	ldi	r18, 0x66	; 102
     40c:	36 e6       	ldi	r19, 0x66	; 102
     40e:	46 ee       	ldi	r20, 0xE6	; 230
     410:	5f e3       	ldi	r21, 0x3F	; 63
     412:	0e 94 cd 04 	call	0x99a	; 0x99a <__addsf3>
     416:	60 93 0c 02 	sts	0x020C, r22	; 0x80020c <money>
     41a:	70 93 0d 02 	sts	0x020D, r23	; 0x80020d <money+0x1>
     41e:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <money+0x2>
     422:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <money+0x3>
				break;
     426:	63 c0       	rjmp	.+198    	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
			case 6:
				serial.transmit("Opcao 6 Escolhida");
     428:	6b e5       	ldi	r22, 0x5B	; 91
     42a:	71 e0       	ldi	r23, 0x01	; 1
     42c:	84 e1       	ldi	r24, 0x14	; 20
     42e:	92 e0       	ldi	r25, 0x02	; 2
     430:	0e 94 29 04 	call	0x852	; 0x852 <_ZN6Serial8transmitEPc>
				serial.transmitChar(NEWLINE);
     434:	6d e0       	ldi	r22, 0x0D	; 13
     436:	84 e1       	ldi	r24, 0x14	; 20
     438:	92 e0       	ldi	r25, 0x02	; 2
     43a:	0e 94 36 04 	call	0x86c	; 0x86c <_ZN6Serial12transmitCharEc>
				money += 1.50;
     43e:	60 91 0c 02 	lds	r22, 0x020C	; 0x80020c <money>
     442:	70 91 0d 02 	lds	r23, 0x020D	; 0x80020d <money+0x1>
     446:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <money+0x2>
     44a:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <money+0x3>
     44e:	20 e0       	ldi	r18, 0x00	; 0
     450:	30 e0       	ldi	r19, 0x00	; 0
     452:	40 ec       	ldi	r20, 0xC0	; 192
     454:	5f e3       	ldi	r21, 0x3F	; 63
     456:	0e 94 cd 04 	call	0x99a	; 0x99a <__addsf3>
     45a:	60 93 0c 02 	sts	0x020C, r22	; 0x80020c <money>
     45e:	70 93 0d 02 	sts	0x020D, r23	; 0x80020d <money+0x1>
     462:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <money+0x2>
     466:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <money+0x3>
				break;
     46a:	41 c0       	rjmp	.+130    	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
			case 7:
				serial.transmit("Opcao 7 Escolhida");
     46c:	6d e6       	ldi	r22, 0x6D	; 109
     46e:	71 e0       	ldi	r23, 0x01	; 1
     470:	84 e1       	ldi	r24, 0x14	; 20
     472:	92 e0       	ldi	r25, 0x02	; 2
     474:	0e 94 29 04 	call	0x852	; 0x852 <_ZN6Serial8transmitEPc>
				serial.transmitChar(NEWLINE);
     478:	6d e0       	ldi	r22, 0x0D	; 13
     47a:	84 e1       	ldi	r24, 0x14	; 20
     47c:	92 e0       	ldi	r25, 0x02	; 2
     47e:	0e 94 36 04 	call	0x86c	; 0x86c <_ZN6Serial12transmitCharEc>
				money += 2.10;
     482:	60 91 0c 02 	lds	r22, 0x020C	; 0x80020c <money>
     486:	70 91 0d 02 	lds	r23, 0x020D	; 0x80020d <money+0x1>
     48a:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <money+0x2>
     48e:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <money+0x3>
     492:	26 e6       	ldi	r18, 0x66	; 102
     494:	36 e6       	ldi	r19, 0x66	; 102
     496:	46 e0       	ldi	r20, 0x06	; 6
     498:	50 e4       	ldi	r21, 0x40	; 64
     49a:	0e 94 cd 04 	call	0x99a	; 0x99a <__addsf3>
     49e:	60 93 0c 02 	sts	0x020C, r22	; 0x80020c <money>
     4a2:	70 93 0d 02 	sts	0x020D, r23	; 0x80020d <money+0x1>
     4a6:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <money+0x2>
     4aa:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <money+0x3>
				break;
     4ae:	1f c0       	rjmp	.+62     	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
			default:
				serial.transmit("Opcao invalida");
     4b0:	6f e7       	ldi	r22, 0x7F	; 127
     4b2:	71 e0       	ldi	r23, 0x01	; 1
     4b4:	84 e1       	ldi	r24, 0x14	; 20
     4b6:	92 e0       	ldi	r25, 0x02	; 2
     4b8:	0e 94 29 04 	call	0x852	; 0x852 <_ZN6Serial8transmitEPc>
				serial.transmitChar(NEWLINE);
     4bc:	6d e0       	ldi	r22, 0x0D	; 13
     4be:	84 e1       	ldi	r24, 0x14	; 20
     4c0:	92 e0       	ldi	r25, 0x02	; 2
     4c2:	0e 94 36 04 	call	0x86c	; 0x86c <_ZN6Serial12transmitCharEc>
				break;
     4c6:	13 c0       	rjmp	.+38     	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
		}
	}
	else{
		serial.transmit("Maquina reabastecida");
     4c8:	6e e8       	ldi	r22, 0x8E	; 142
     4ca:	71 e0       	ldi	r23, 0x01	; 1
     4cc:	84 e1       	ldi	r24, 0x14	; 20
     4ce:	92 e0       	ldi	r25, 0x02	; 2
     4d0:	0e 94 29 04 	call	0x852	; 0x852 <_ZN6Serial8transmitEPc>
		serial.transmitChar(NEWLINE);
     4d4:	6d e0       	ldi	r22, 0x0D	; 13
     4d6:	84 e1       	ldi	r24, 0x14	; 20
     4d8:	92 e0       	ldi	r25, 0x02	; 2
     4da:	0e 94 36 04 	call	0x86c	; 0x86c <_ZN6Serial12transmitCharEc>
		money = 0;
     4de:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <money>
     4e2:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <money+0x1>
     4e6:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <money+0x2>
     4ea:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <money+0x3>
	}
	
}
     4ee:	ff 91       	pop	r31
     4f0:	ef 91       	pop	r30
     4f2:	bf 91       	pop	r27
     4f4:	af 91       	pop	r26
     4f6:	9f 91       	pop	r25
     4f8:	8f 91       	pop	r24
     4fa:	7f 91       	pop	r23
     4fc:	6f 91       	pop	r22
     4fe:	5f 91       	pop	r21
     500:	4f 91       	pop	r20
     502:	3f 91       	pop	r19
     504:	2f 91       	pop	r18
     506:	0f 90       	pop	r0
     508:	0f be       	out	0x3f, r0	; 63
     50a:	0f 90       	pop	r0
     50c:	1f 90       	pop	r1
     50e:	18 95       	reti

00000510 <__vector_18>:

ISR(USART_RX_vect)
{
     510:	1f 92       	push	r1
     512:	0f 92       	push	r0
     514:	0f b6       	in	r0, 0x3f	; 63
     516:	0f 92       	push	r0
     518:	11 24       	eor	r1, r1
     51a:	8f 93       	push	r24
     51c:	9f 93       	push	r25
	command_OK = false;
     51e:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <command_OK>
	show_OK = false;
     522:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <__data_end>
	char receivedByte = UDR0;
     526:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	
	if (receivedByte == '0')
     52a:	80 33       	cpi	r24, 0x30	; 48
     52c:	11 f4       	brne	.+4      	; 0x532 <__vector_18+0x22>
	_command = 0;
     52e:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <_command>
	if (receivedByte == '1')
     532:	81 33       	cpi	r24, 0x31	; 49
     534:	19 f4       	brne	.+6      	; 0x53c <__vector_18+0x2c>
	_command = 1;
     536:	91 e0       	ldi	r25, 0x01	; 1
     538:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <_command>
	if (receivedByte == '2')
     53c:	82 33       	cpi	r24, 0x32	; 50
     53e:	19 f4       	brne	.+6      	; 0x546 <__vector_18+0x36>
	_command = 2;
     540:	82 e0       	ldi	r24, 0x02	; 2
     542:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <_command>
	
	command_OK = true;
     546:	81 e0       	ldi	r24, 0x01	; 1
     548:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <command_OK>
}
     54c:	9f 91       	pop	r25
     54e:	8f 91       	pop	r24
     550:	0f 90       	pop	r0
     552:	0f be       	out	0x3f, r0	; 63
     554:	0f 90       	pop	r0
     556:	1f 90       	pop	r1
     558:	18 95       	reti

0000055a <main>:


int main(void)
{
	//Interrupts configuration
	EICRA = (1<<ISC11) | (1<<ISC10); //Rising edge to INT1
     55a:	e9 e6       	ldi	r30, 0x69	; 105
     55c:	f0 e0       	ldi	r31, 0x00	; 0
     55e:	8c e0       	ldi	r24, 0x0C	; 12
     560:	80 83       	st	Z, r24
	EICRA |= (1<<ISC01) | (1<<ISC00); //Rising edge to INT0
     562:	80 81       	ld	r24, Z
     564:	83 60       	ori	r24, 0x03	; 3
     566:	80 83       	st	Z, r24
	
	EIMSK = (1<<INT1) | (1<<INT0); //Enables INT0 and INT1
     568:	83 e0       	ldi	r24, 0x03	; 3
     56a:	8d bb       	out	0x1d, r24	; 29
	sei();
     56c:	78 94       	sei
	
	//Direction ports configuration
	clr_bit(DDRD, PORTD2); //D2 as input
     56e:	8a b1       	in	r24, 0x0a	; 10
     570:	8b 7f       	andi	r24, 0xFB	; 251
     572:	8a b9       	out	0x0a, r24	; 10
	clr_bit(DDRD, PORTD3); //D3 as input
     574:	8a b1       	in	r24, 0x0a	; 10
     576:	87 7f       	andi	r24, 0xF7	; 247
     578:	8a b9       	out	0x0a, r24	; 10
	
	_7seg.attachToPorts(PORTC0, PORTC1, PORTC2, PORTC3);
     57a:	03 e0       	ldi	r16, 0x03	; 3
     57c:	22 e0       	ldi	r18, 0x02	; 2
     57e:	41 e0       	ldi	r20, 0x01	; 1
     580:	60 e0       	ldi	r22, 0x00	; 0
     582:	80 e1       	ldi	r24, 0x10	; 16
     584:	92 e0       	ldi	r25, 0x02	; 2
     586:	0e 94 70 00 	call	0xe0	; 0xe0 <_ZN11Display7seg13attachToPortsEhhhh>
	serial.show_menu();
     58a:	84 e1       	ldi	r24, 0x14	; 20
     58c:	92 e0       	ldi	r25, 0x02	; 2
     58e:	0e 94 3d 04 	call	0x87a	; 0x87a <_ZN6Serial9show_menuEv>
	
    while (1) 
    {
		_7seg.updateDisplay(&menu_index);
     592:	60 e0       	ldi	r22, 0x00	; 0
     594:	71 e0       	ldi	r23, 0x01	; 1
     596:	80 e1       	ldi	r24, 0x10	; 16
     598:	92 e0       	ldi	r25, 0x02	; 2
     59a:	0e 94 9b 00 	call	0x136	; 0x136 <_ZN11Display7seg13updateDisplayEPVh>
		
		if(command_OK)
     59e:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <command_OK>
     5a2:	88 23       	and	r24, r24
     5a4:	09 f4       	brne	.+2      	; 0x5a8 <main+0x4e>
     5a6:	4b c0       	rjmp	.+150    	; 0x63e <main+0xe4>
		{
			switch(_command){
     5a8:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <_command>
     5ac:	81 30       	cpi	r24, 0x01	; 1
     5ae:	39 f1       	breq	.+78     	; 0x5fe <main+0xa4>
     5b0:	18 f0       	brcs	.+6      	; 0x5b8 <main+0x5e>
     5b2:	82 30       	cpi	r24, 0x02	; 2
     5b4:	b9 f1       	breq	.+110    	; 0x624 <main+0xca>
     5b6:	43 c0       	rjmp	.+134    	; 0x63e <main+0xe4>
				case SHOW_PROFIT:
				if(debug_mode == true){
     5b8:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <debug_mode>
     5bc:	88 23       	and	r24, r24
     5be:	59 f0       	breq	.+22     	; 0x5d6 <main+0x7c>
					serial.transmit("mostrando profit");
     5c0:	63 ea       	ldi	r22, 0xA3	; 163
     5c2:	71 e0       	ldi	r23, 0x01	; 1
     5c4:	84 e1       	ldi	r24, 0x14	; 20
     5c6:	92 e0       	ldi	r25, 0x02	; 2
     5c8:	0e 94 29 04 	call	0x852	; 0x852 <_ZN6Serial8transmitEPc>
					serial.transmitChar(NEWLINE);
     5cc:	6d e0       	ldi	r22, 0x0D	; 13
     5ce:	84 e1       	ldi	r24, 0x14	; 20
     5d0:	92 e0       	ldi	r25, 0x02	; 2
     5d2:	0e 94 36 04 	call	0x86c	; 0x86c <_ZN6Serial12transmitCharEc>
				}
				if(show_OK == false){
     5d6:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
     5da:	81 11       	cpse	r24, r1
     5dc:	30 c0       	rjmp	.+96     	; 0x63e <main+0xe4>
					serial.show_profit(money);
     5de:	40 91 0c 02 	lds	r20, 0x020C	; 0x80020c <money>
     5e2:	50 91 0d 02 	lds	r21, 0x020D	; 0x80020d <money+0x1>
     5e6:	60 91 0e 02 	lds	r22, 0x020E	; 0x80020e <money+0x2>
     5ea:	70 91 0f 02 	lds	r23, 0x020F	; 0x80020f <money+0x3>
     5ee:	84 e1       	ldi	r24, 0x14	; 20
     5f0:	92 e0       	ldi	r25, 0x02	; 2
     5f2:	0e 94 5d 04 	call	0x8ba	; 0x8ba <_ZN6Serial11show_profitEf>
					show_OK = true;
     5f6:	81 e0       	ldi	r24, 0x01	; 1
     5f8:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
     5fc:	20 c0       	rjmp	.+64     	; 0x63e <main+0xe4>
				}
				break;
				
				case DEBUG_MODE:
				if(debug_mode == true){
     5fe:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <debug_mode>
     602:	88 23       	and	r24, r24
     604:	59 f0       	breq	.+22     	; 0x61c <main+0xc2>
					serial.transmit("Modo debug");
     606:	64 eb       	ldi	r22, 0xB4	; 180
     608:	71 e0       	ldi	r23, 0x01	; 1
     60a:	84 e1       	ldi	r24, 0x14	; 20
     60c:	92 e0       	ldi	r25, 0x02	; 2
     60e:	0e 94 29 04 	call	0x852	; 0x852 <_ZN6Serial8transmitEPc>
					serial.transmitChar(NEWLINE);
     612:	6d e0       	ldi	r22, 0x0D	; 13
     614:	84 e1       	ldi	r24, 0x14	; 20
     616:	92 e0       	ldi	r25, 0x02	; 2
     618:	0e 94 36 04 	call	0x86c	; 0x86c <_ZN6Serial12transmitCharEc>
				}
				debug_mode = true;
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <debug_mode>
				break;
     622:	0d c0       	rjmp	.+26     	; 0x63e <main+0xe4>
				
				case EXIT:
				debug_mode = false;
     624:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <debug_mode>
				if(show_OK == false){
     628:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
     62c:	81 11       	cpse	r24, r1
     62e:	07 c0       	rjmp	.+14     	; 0x63e <main+0xe4>
					serial.show_menu();
     630:	84 e1       	ldi	r24, 0x14	; 20
     632:	92 e0       	ldi	r25, 0x02	; 2
     634:	0e 94 3d 04 	call	0x87a	; 0x87a <_ZN6Serial9show_menuEv>
					show_OK = true;
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     63e:	2f ef       	ldi	r18, 0xFF	; 255
     640:	84 e3       	ldi	r24, 0x34	; 52
     642:	9c e0       	ldi	r25, 0x0C	; 12
     644:	21 50       	subi	r18, 0x01	; 1
     646:	80 40       	sbci	r24, 0x00	; 0
     648:	90 40       	sbci	r25, 0x00	; 0
     64a:	e1 f7       	brne	.-8      	; 0x644 <main+0xea>
     64c:	00 c0       	rjmp	.+0      	; 0x64e <main+0xf4>
     64e:	00 00       	nop
     650:	a0 cf       	rjmp	.-192    	; 0x592 <main+0x38>

00000652 <_GLOBAL__sub_I_serial>:
				break;
			}
		}
		_delay_ms(250);
    }
}
     652:	6f ef       	ldi	r22, 0xFF	; 255
     654:	7f ef       	ldi	r23, 0xFF	; 255
     656:	81 e0       	ldi	r24, 0x01	; 1
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	0e 94 04 01 	call	0x208	; 0x208 <_Z41__static_initialization_and_destruction_0ii>
     65e:	08 95       	ret

00000660 <_GLOBAL__sub_D_serial>:
     660:	6f ef       	ldi	r22, 0xFF	; 255
     662:	7f ef       	ldi	r23, 0xFF	; 255
     664:	80 e0       	ldi	r24, 0x00	; 0
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	0e 94 04 01 	call	0x208	; 0x208 <_Z41__static_initialization_and_destruction_0ii>
     66c:	08 95       	ret

0000066e <_ZN6SerialD1Ev>:
	clr_bit(UCSR0C, UMSEL00);
	
	sei(); //Enables global interrupt
}

Serial::~Serial()
     66e:	08 95       	ret

00000670 <_ZN6Serial11setBaudRateEj>:
	//dtor
}

void Serial::setBaudRate(unsigned int baud_rate)
{
	this->bd = baud_rate;
     670:	fc 01       	movw	r30, r24
     672:	71 83       	std	Z+1, r23	; 0x01
     674:	60 83       	st	Z, r22
	unsigned int baud_prescale = (((F_CPU / (this->bd*16UL)))-1);
     676:	cb 01       	movw	r24, r22
     678:	a0 e0       	ldi	r26, 0x00	; 0
     67a:	b0 e0       	ldi	r27, 0x00	; 0
     67c:	88 0f       	add	r24, r24
     67e:	99 1f       	adc	r25, r25
     680:	aa 1f       	adc	r26, r26
     682:	bb 1f       	adc	r27, r27
     684:	88 0f       	add	r24, r24
     686:	99 1f       	adc	r25, r25
     688:	aa 1f       	adc	r26, r26
     68a:	bb 1f       	adc	r27, r27
     68c:	9c 01       	movw	r18, r24
     68e:	ad 01       	movw	r20, r26
     690:	22 0f       	add	r18, r18
     692:	33 1f       	adc	r19, r19
     694:	44 1f       	adc	r20, r20
     696:	55 1f       	adc	r21, r21
     698:	22 0f       	add	r18, r18
     69a:	33 1f       	adc	r19, r19
     69c:	44 1f       	adc	r20, r20
     69e:	55 1f       	adc	r21, r21
     6a0:	60 e0       	ldi	r22, 0x00	; 0
     6a2:	74 e2       	ldi	r23, 0x24	; 36
     6a4:	84 ef       	ldi	r24, 0xF4	; 244
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__udivmodsi4>
     6ac:	21 50       	subi	r18, 0x01	; 1
     6ae:	31 09       	sbc	r19, r1
	
	UBRR0H = (baud_prescale >> 8);
     6b0:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = baud_prescale;
     6b4:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     6b8:	08 95       	ret

000006ba <_ZN6Serial10setStopBitEh>:
}

void Serial::setStopBit(unsigned char stop_bit)
{
	this->sb = stop_bit;
     6ba:	fc 01       	movw	r30, r24
     6bc:	62 83       	std	Z+2, r22	; 0x02
	
	switch(this->sb){
     6be:	61 30       	cpi	r22, 0x01	; 1
     6c0:	19 f0       	breq	.+6      	; 0x6c8 <_ZN6Serial10setStopBitEh+0xe>
     6c2:	62 30       	cpi	r22, 0x02	; 2
     6c4:	39 f0       	breq	.+14     	; 0x6d4 <_ZN6Serial10setStopBitEh+0x1a>
     6c6:	0c c0       	rjmp	.+24     	; 0x6e0 <_ZN6Serial10setStopBitEh+0x26>
		case 1:
			clr_bit(UCSR0C, USBS0);
     6c8:	e2 ec       	ldi	r30, 0xC2	; 194
     6ca:	f0 e0       	ldi	r31, 0x00	; 0
     6cc:	80 81       	ld	r24, Z
     6ce:	87 7f       	andi	r24, 0xF7	; 247
     6d0:	80 83       	st	Z, r24
			break;
     6d2:	08 95       	ret
		
		case 2:
			set_bit(UCSR0C, USBS0);
     6d4:	e2 ec       	ldi	r30, 0xC2	; 194
     6d6:	f0 e0       	ldi	r31, 0x00	; 0
     6d8:	80 81       	ld	r24, Z
     6da:	88 60       	ori	r24, 0x08	; 8
     6dc:	80 83       	st	Z, r24
			break;
     6de:	08 95       	ret
			
		default:
			clr_bit(UCSR0C, USBS0);
     6e0:	e2 ec       	ldi	r30, 0xC2	; 194
     6e2:	f0 e0       	ldi	r31, 0x00	; 0
     6e4:	80 81       	ld	r24, Z
     6e6:	87 7f       	andi	r24, 0xF7	; 247
     6e8:	80 83       	st	Z, r24
     6ea:	08 95       	ret

000006ec <_ZN6Serial11setByteSizeEh>:
		
}

void Serial::setByteSize(unsigned char byte_size)
{
	this->bs = byte_size;
     6ec:	fc 01       	movw	r30, r24
     6ee:	63 83       	std	Z+3, r22	; 0x03
	
	switch(this->bs){
     6f0:	67 30       	cpi	r22, 0x07	; 7
     6f2:	19 f1       	breq	.+70     	; 0x73a <_ZN6Serial11setByteSizeEh+0x4e>
     6f4:	28 f4       	brcc	.+10     	; 0x700 <_ZN6Serial11setByteSizeEh+0x14>
     6f6:	65 30       	cpi	r22, 0x05	; 5
     6f8:	41 f0       	breq	.+16     	; 0x70a <_ZN6Serial11setByteSizeEh+0x1e>
     6fa:	66 30       	cpi	r22, 0x06	; 6
     6fc:	91 f0       	breq	.+36     	; 0x722 <_ZN6Serial11setByteSizeEh+0x36>
     6fe:	41 c0       	rjmp	.+130    	; 0x782 <_ZN6Serial11setByteSizeEh+0x96>
     700:	68 30       	cpi	r22, 0x08	; 8
     702:	39 f1       	breq	.+78     	; 0x752 <_ZN6Serial11setByteSizeEh+0x66>
     704:	69 30       	cpi	r22, 0x09	; 9
     706:	89 f1       	breq	.+98     	; 0x76a <_ZN6Serial11setByteSizeEh+0x7e>
     708:	3c c0       	rjmp	.+120    	; 0x782 <_ZN6Serial11setByteSizeEh+0x96>
		case 5:
			clr_bit(UCSR0C, UCSZ02);
     70a:	e2 ec       	ldi	r30, 0xC2	; 194
     70c:	f0 e0       	ldi	r31, 0x00	; 0
     70e:	80 81       	ld	r24, Z
     710:	8b 7f       	andi	r24, 0xFB	; 251
     712:	80 83       	st	Z, r24
			clr_bit(UCSR0C, UCSZ01);
     714:	80 81       	ld	r24, Z
     716:	8b 7f       	andi	r24, 0xFB	; 251
     718:	80 83       	st	Z, r24
			clr_bit(UCSR0C, UCSZ00);
     71a:	80 81       	ld	r24, Z
     71c:	8d 7f       	andi	r24, 0xFD	; 253
     71e:	80 83       	st	Z, r24
			break;
     720:	08 95       	ret
			
		case 6:
			clr_bit(UCSR0C, UCSZ02);
     722:	e2 ec       	ldi	r30, 0xC2	; 194
     724:	f0 e0       	ldi	r31, 0x00	; 0
     726:	80 81       	ld	r24, Z
     728:	8b 7f       	andi	r24, 0xFB	; 251
     72a:	80 83       	st	Z, r24
			clr_bit(UCSR0C, UCSZ01);
     72c:	80 81       	ld	r24, Z
     72e:	8b 7f       	andi	r24, 0xFB	; 251
     730:	80 83       	st	Z, r24
			set_bit(UCSR0C, UCSZ00);
     732:	80 81       	ld	r24, Z
     734:	82 60       	ori	r24, 0x02	; 2
     736:	80 83       	st	Z, r24
			break;
     738:	08 95       	ret
			
		case 7:
			clr_bit(UCSR0C, UCSZ02);
     73a:	e2 ec       	ldi	r30, 0xC2	; 194
     73c:	f0 e0       	ldi	r31, 0x00	; 0
     73e:	80 81       	ld	r24, Z
     740:	8b 7f       	andi	r24, 0xFB	; 251
     742:	80 83       	st	Z, r24
			set_bit(UCSR0C, UCSZ01);
     744:	80 81       	ld	r24, Z
     746:	84 60       	ori	r24, 0x04	; 4
     748:	80 83       	st	Z, r24
			clr_bit(UCSR0C, UCSZ00);
     74a:	80 81       	ld	r24, Z
     74c:	8d 7f       	andi	r24, 0xFD	; 253
     74e:	80 83       	st	Z, r24
			break;
     750:	08 95       	ret
			
		case 8:
			clr_bit(UCSR0C, UCSZ02);
     752:	e2 ec       	ldi	r30, 0xC2	; 194
     754:	f0 e0       	ldi	r31, 0x00	; 0
     756:	80 81       	ld	r24, Z
     758:	8b 7f       	andi	r24, 0xFB	; 251
     75a:	80 83       	st	Z, r24
			set_bit(UCSR0C, UCSZ01);
     75c:	80 81       	ld	r24, Z
     75e:	84 60       	ori	r24, 0x04	; 4
     760:	80 83       	st	Z, r24
			set_bit(UCSR0C, UCSZ00);
     762:	80 81       	ld	r24, Z
     764:	82 60       	ori	r24, 0x02	; 2
     766:	80 83       	st	Z, r24
			break;
     768:	08 95       	ret
			
		case 9:
			set_bit(UCSR0C, UCSZ02);
     76a:	e2 ec       	ldi	r30, 0xC2	; 194
     76c:	f0 e0       	ldi	r31, 0x00	; 0
     76e:	80 81       	ld	r24, Z
     770:	84 60       	ori	r24, 0x04	; 4
     772:	80 83       	st	Z, r24
			set_bit(UCSR0C, UCSZ01);
     774:	80 81       	ld	r24, Z
     776:	84 60       	ori	r24, 0x04	; 4
     778:	80 83       	st	Z, r24
			set_bit(UCSR0C, UCSZ00);
     77a:	80 81       	ld	r24, Z
     77c:	82 60       	ori	r24, 0x02	; 2
     77e:	80 83       	st	Z, r24
			break;
     780:	08 95       	ret
			
		default:
			clr_bit(UCSR0C, UCSZ02);
     782:	e2 ec       	ldi	r30, 0xC2	; 194
     784:	f0 e0       	ldi	r31, 0x00	; 0
     786:	80 81       	ld	r24, Z
     788:	8b 7f       	andi	r24, 0xFB	; 251
     78a:	80 83       	st	Z, r24
			set_bit(UCSR0C, UCSZ01);
     78c:	80 81       	ld	r24, Z
     78e:	84 60       	ori	r24, 0x04	; 4
     790:	80 83       	st	Z, r24
			set_bit(UCSR0C, UCSZ00);
     792:	80 81       	ld	r24, Z
     794:	82 60       	ori	r24, 0x02	; 2
     796:	80 83       	st	Z, r24
     798:	08 95       	ret

0000079a <_ZN6Serial9setParityEh>:
	}
}

void Serial::setParity(unsigned char parity)
{
	this->pr = parity;
     79a:	fc 01       	movw	r30, r24
     79c:	64 83       	std	Z+4, r22	; 0x04
	
	switch(this->pr){
     79e:	6e 34       	cpi	r22, 0x4E	; 78
     7a0:	29 f0       	breq	.+10     	; 0x7ac <_ZN6Serial9setParityEh+0x12>
     7a2:	6f 34       	cpi	r22, 0x4F	; 79
     7a4:	a9 f0       	breq	.+42     	; 0x7d0 <_ZN6Serial9setParityEh+0x36>
     7a6:	65 34       	cpi	r22, 0x45	; 69
     7a8:	e1 f4       	brne	.+56     	; 0x7e2 <_ZN6Serial9setParityEh+0x48>
     7aa:	09 c0       	rjmp	.+18     	; 0x7be <_ZN6Serial9setParityEh+0x24>
		case 'N':
			clr_bit(UCSR0C, UPM01);
     7ac:	e2 ec       	ldi	r30, 0xC2	; 194
     7ae:	f0 e0       	ldi	r31, 0x00	; 0
     7b0:	80 81       	ld	r24, Z
     7b2:	8f 7d       	andi	r24, 0xDF	; 223
     7b4:	80 83       	st	Z, r24
			clr_bit(UCSR0C, UPM00);
     7b6:	80 81       	ld	r24, Z
     7b8:	8f 7e       	andi	r24, 0xEF	; 239
     7ba:	80 83       	st	Z, r24
			break;
     7bc:	08 95       	ret
		
		case 'E':
			set_bit(UCSR0C, UPM01);
     7be:	e2 ec       	ldi	r30, 0xC2	; 194
     7c0:	f0 e0       	ldi	r31, 0x00	; 0
     7c2:	80 81       	ld	r24, Z
     7c4:	80 62       	ori	r24, 0x20	; 32
     7c6:	80 83       	st	Z, r24
			set_bit(UCSR0C, UPM00);
     7c8:	80 81       	ld	r24, Z
     7ca:	80 61       	ori	r24, 0x10	; 16
     7cc:	80 83       	st	Z, r24
			break;
     7ce:	08 95       	ret
		
		case 'O':
			set_bit(UCSR0C, UPM01);
     7d0:	e2 ec       	ldi	r30, 0xC2	; 194
     7d2:	f0 e0       	ldi	r31, 0x00	; 0
     7d4:	80 81       	ld	r24, Z
     7d6:	80 62       	ori	r24, 0x20	; 32
     7d8:	80 83       	st	Z, r24
			clr_bit(UCSR0C, UPM00);
     7da:	80 81       	ld	r24, Z
     7dc:	8f 7e       	andi	r24, 0xEF	; 239
     7de:	80 83       	st	Z, r24
			break;
     7e0:	08 95       	ret
		default:
			clr_bit(UCSR0C, UPM01);
     7e2:	e2 ec       	ldi	r30, 0xC2	; 194
     7e4:	f0 e0       	ldi	r31, 0x00	; 0
     7e6:	80 81       	ld	r24, Z
     7e8:	8f 7d       	andi	r24, 0xDF	; 223
     7ea:	80 83       	st	Z, r24
			clr_bit(UCSR0C, UPM00);
     7ec:	80 81       	ld	r24, Z
     7ee:	8f 7e       	andi	r24, 0xEF	; 239
     7f0:	80 83       	st	Z, r24
     7f2:	08 95       	ret

000007f4 <_ZN6SerialC1Ejhhh>:
 *  Author: Fernando Kirchner
 */ 

#include "serial.h"

Serial::Serial(unsigned int baud_rate, unsigned char stop_bit, unsigned char byte_size, unsigned char parity)
     7f4:	ff 92       	push	r15
     7f6:	0f 93       	push	r16
     7f8:	1f 93       	push	r17
     7fa:	cf 93       	push	r28
     7fc:	df 93       	push	r29
     7fe:	ec 01       	movw	r28, r24
     800:	f4 2e       	mov	r15, r20
     802:	12 2f       	mov	r17, r18
{
	setBaudRate(baud_rate);
     804:	0e 94 38 03 	call	0x670	; 0x670 <_ZN6Serial11setBaudRateEj>
	setStopBit(stop_bit);
     808:	6f 2d       	mov	r22, r15
     80a:	ce 01       	movw	r24, r28
     80c:	0e 94 5d 03 	call	0x6ba	; 0x6ba <_ZN6Serial10setStopBitEh>
	setByteSize(byte_size);
     810:	61 2f       	mov	r22, r17
     812:	ce 01       	movw	r24, r28
     814:	0e 94 76 03 	call	0x6ec	; 0x6ec <_ZN6Serial11setByteSizeEh>
	setParity(parity);
     818:	60 2f       	mov	r22, r16
     81a:	ce 01       	movw	r24, r28
     81c:	0e 94 cd 03 	call	0x79a	; 0x79a <_ZN6Serial9setParityEh>
	
	/*-- Setting direction registers --*/
	DDRD |= 0b00000010;
     820:	8a b1       	in	r24, 0x0a	; 10
     822:	82 60       	ori	r24, 0x02	; 2
     824:	8a b9       	out	0x0a, r24	; 10
	
	/* -- Setting serial registers --*/
	UCSR0B = (1<<TXEN0) | (1<<RXEN0); //Enables the TX and RX
     826:	e1 ec       	ldi	r30, 0xC1	; 193
     828:	f0 e0       	ldi	r31, 0x00	; 0
     82a:	88 e1       	ldi	r24, 0x18	; 24
     82c:	80 83       	st	Z, r24
	UCSR0B |= (1<<RXCIE0); //Enables the RX interrupt
     82e:	80 81       	ld	r24, Z
     830:	80 68       	ori	r24, 0x80	; 128
     832:	80 83       	st	Z, r24
	
	//Sets assync mode
	clr_bit(UCSR0C, UMSEL01);
     834:	e2 ec       	ldi	r30, 0xC2	; 194
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	80 81       	ld	r24, Z
     83a:	8f 77       	andi	r24, 0x7F	; 127
     83c:	80 83       	st	Z, r24
	clr_bit(UCSR0C, UMSEL00);
     83e:	80 81       	ld	r24, Z
     840:	8f 7b       	andi	r24, 0xBF	; 191
     842:	80 83       	st	Z, r24
	
	sei(); //Enables global interrupt
     844:	78 94       	sei
}
     846:	df 91       	pop	r29
     848:	cf 91       	pop	r28
     84a:	1f 91       	pop	r17
     84c:	0f 91       	pop	r16
     84e:	ff 90       	pop	r15
     850:	08 95       	ret

00000852 <_ZN6Serial8transmitEPc>:
			break;
	}
}

void Serial::transmit(char *data)
{
     852:	fb 01       	movw	r30, r22
	while(*data != '\0'){
     854:	90 81       	ld	r25, Z
     856:	99 23       	and	r25, r25
     858:	41 f0       	breq	.+16     	; 0x86a <_ZN6Serial8transmitEPc+0x18>
		while(!(UCSR0A & (1<<UDRE0))); //Waits for empty buffer to transmit
     85a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     85e:	85 ff       	sbrs	r24, 5
     860:	fc cf       	rjmp	.-8      	; 0x85a <_ZN6Serial8transmitEPc+0x8>
		
		//Put data into buffer and send data
		UDR0 = *data;
     862:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		data++;
     866:	31 96       	adiw	r30, 0x01	; 1
	}
}

void Serial::transmit(char *data)
{
	while(*data != '\0'){
     868:	f5 cf       	rjmp	.-22     	; 0x854 <_ZN6Serial8transmitEPc+0x2>
     86a:	08 95       	ret

0000086c <_ZN6Serial12transmitCharEc>:
	}
}

void Serial::transmitChar(char data)
{
	while(!(UCSR0A & (1<<UDRE0))); //Waits for empty buffer to transmit
     86c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     870:	85 ff       	sbrs	r24, 5
     872:	fc cf       	rjmp	.-8      	; 0x86c <_ZN6Serial12transmitCharEc>
	UDR0 = data; //Put data into buffer and send data
     874:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     878:	08 95       	ret

0000087a <_ZN6Serial9show_menuEv>:
}

void Serial::show_menu()
{
     87a:	cf 93       	push	r28
     87c:	df 93       	push	r29
     87e:	ec 01       	movw	r28, r24
	this->transmit("0 - Mostrar Lucro");
     880:	6f eb       	ldi	r22, 0xBF	; 191
     882:	71 e0       	ldi	r23, 0x01	; 1
     884:	0e 94 29 04 	call	0x852	; 0x852 <_ZN6Serial8transmitEPc>
	this->transmitChar(NEWLINE);
     888:	6d e0       	ldi	r22, 0x0D	; 13
     88a:	ce 01       	movw	r24, r28
     88c:	0e 94 36 04 	call	0x86c	; 0x86c <_ZN6Serial12transmitCharEc>
	
	this->transmit("1 - Debug");
     890:	61 ed       	ldi	r22, 0xD1	; 209
     892:	71 e0       	ldi	r23, 0x01	; 1
     894:	ce 01       	movw	r24, r28
     896:	0e 94 29 04 	call	0x852	; 0x852 <_ZN6Serial8transmitEPc>
	this->transmitChar(NEWLINE);
     89a:	6d e0       	ldi	r22, 0x0D	; 13
     89c:	ce 01       	movw	r24, r28
     89e:	0e 94 36 04 	call	0x86c	; 0x86c <_ZN6Serial12transmitCharEc>
	
	this->transmit("2 - Sair Debug");
     8a2:	6b ed       	ldi	r22, 0xDB	; 219
     8a4:	71 e0       	ldi	r23, 0x01	; 1
     8a6:	ce 01       	movw	r24, r28
     8a8:	0e 94 29 04 	call	0x852	; 0x852 <_ZN6Serial8transmitEPc>
	this->transmitChar(NEWLINE);
     8ac:	6d e0       	ldi	r22, 0x0D	; 13
     8ae:	ce 01       	movw	r24, r28
     8b0:	0e 94 36 04 	call	0x86c	; 0x86c <_ZN6Serial12transmitCharEc>
}
     8b4:	df 91       	pop	r29
     8b6:	cf 91       	pop	r28
     8b8:	08 95       	ret

000008ba <_ZN6Serial11show_profitEf>:

void Serial::show_profit(volatile float money)
{
     8ba:	8f 92       	push	r8
     8bc:	9f 92       	push	r9
     8be:	af 92       	push	r10
     8c0:	bf 92       	push	r11
     8c2:	cf 92       	push	r12
     8c4:	df 92       	push	r13
     8c6:	ef 92       	push	r14
     8c8:	ff 92       	push	r15
     8ca:	0f 93       	push	r16
     8cc:	1f 93       	push	r17
     8ce:	cf 93       	push	r28
     8d0:	df 93       	push	r29
     8d2:	cd b7       	in	r28, 0x3d	; 61
     8d4:	de b7       	in	r29, 0x3e	; 62
     8d6:	2e 97       	sbiw	r28, 0x0e	; 14
     8d8:	0f b6       	in	r0, 0x3f	; 63
     8da:	f8 94       	cli
     8dc:	de bf       	out	0x3e, r29	; 62
     8de:	0f be       	out	0x3f, r0	; 63
     8e0:	cd bf       	out	0x3d, r28	; 61
     8e2:	8c 01       	movw	r16, r24
     8e4:	4b 87       	std	Y+11, r20	; 0x0b
     8e6:	5c 87       	std	Y+12, r21	; 0x0c
     8e8:	6d 87       	std	Y+13, r22	; 0x0d
     8ea:	7e 87       	std	Y+14, r23	; 0x0e
	int moneyInt = int(money);
     8ec:	6b 85       	ldd	r22, Y+11	; 0x0b
     8ee:	7c 85       	ldd	r23, Y+12	; 0x0c
     8f0:	8d 85       	ldd	r24, Y+13	; 0x0d
     8f2:	9e 85       	ldd	r25, Y+14	; 0x0e
     8f4:	0e 94 39 05 	call	0xa72	; 0xa72 <__fixsfsi>
     8f8:	6b 01       	movw	r12, r22
     8fa:	7c 01       	movw	r14, r24
	float moneyFrac = money - moneyInt;
     8fc:	8b 84       	ldd	r8, Y+11	; 0x0b
     8fe:	9c 84       	ldd	r9, Y+12	; 0x0c
     900:	ad 84       	ldd	r10, Y+13	; 0x0d
     902:	be 84       	ldd	r11, Y+14	; 0x0e
     904:	07 2e       	mov	r0, r23
     906:	00 0c       	add	r0, r0
     908:	88 0b       	sbc	r24, r24
     90a:	99 0b       	sbc	r25, r25
     90c:	0e 94 71 05 	call	0xae2	; 0xae2 <__floatsisf>
     910:	9b 01       	movw	r18, r22
     912:	ac 01       	movw	r20, r24
     914:	c5 01       	movw	r24, r10
     916:	b4 01       	movw	r22, r8
     918:	0e 94 cc 04 	call	0x998	; 0x998 <__subsf3>
	int moneyIntFrac = trunc(moneyFrac*100);
     91c:	20 e0       	ldi	r18, 0x00	; 0
     91e:	30 e0       	ldi	r19, 0x00	; 0
     920:	48 ec       	ldi	r20, 0xC8	; 200
     922:	52 e4       	ldi	r21, 0x42	; 66
     924:	0e 94 fd 05 	call	0xbfa	; 0xbfa <__mulsf3>
     928:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <trunc>
     92c:	0e 94 39 05 	call	0xa72	; 0xa72 <__fixsfsi>
	
	char buf[10];
	sprintf(buf, "R$ %d.%02d", moneyInt, moneyIntFrac);
     930:	7f 93       	push	r23
     932:	6f 93       	push	r22
     934:	df 92       	push	r13
     936:	cf 92       	push	r12
     938:	8a ee       	ldi	r24, 0xEA	; 234
     93a:	91 e0       	ldi	r25, 0x01	; 1
     93c:	9f 93       	push	r25
     93e:	8f 93       	push	r24
     940:	ce 01       	movw	r24, r28
     942:	01 96       	adiw	r24, 0x01	; 1
     944:	7c 01       	movw	r14, r24
     946:	9f 93       	push	r25
     948:	8f 93       	push	r24
     94a:	0e 94 de 06 	call	0xdbc	; 0xdbc <sprintf>
	this->transmit("Valor Arrecadado: ");
     94e:	65 ef       	ldi	r22, 0xF5	; 245
     950:	71 e0       	ldi	r23, 0x01	; 1
     952:	c8 01       	movw	r24, r16
     954:	0e 94 29 04 	call	0x852	; 0x852 <_ZN6Serial8transmitEPc>
	this->transmit(buf);
     958:	b7 01       	movw	r22, r14
     95a:	c8 01       	movw	r24, r16
     95c:	0e 94 29 04 	call	0x852	; 0x852 <_ZN6Serial8transmitEPc>
	this->transmitChar(NEWLINE);
     960:	6d e0       	ldi	r22, 0x0D	; 13
     962:	c8 01       	movw	r24, r16
     964:	0e 94 36 04 	call	0x86c	; 0x86c <_ZN6Serial12transmitCharEc>
     968:	0f b6       	in	r0, 0x3f	; 63
     96a:	f8 94       	cli
     96c:	de bf       	out	0x3e, r29	; 62
     96e:	0f be       	out	0x3f, r0	; 63
     970:	cd bf       	out	0x3d, r28	; 61
     972:	2e 96       	adiw	r28, 0x0e	; 14
     974:	0f b6       	in	r0, 0x3f	; 63
     976:	f8 94       	cli
     978:	de bf       	out	0x3e, r29	; 62
     97a:	0f be       	out	0x3f, r0	; 63
     97c:	cd bf       	out	0x3d, r28	; 61
     97e:	df 91       	pop	r29
     980:	cf 91       	pop	r28
     982:	1f 91       	pop	r17
     984:	0f 91       	pop	r16
     986:	ff 90       	pop	r15
     988:	ef 90       	pop	r14
     98a:	df 90       	pop	r13
     98c:	cf 90       	pop	r12
     98e:	bf 90       	pop	r11
     990:	af 90       	pop	r10
     992:	9f 90       	pop	r9
     994:	8f 90       	pop	r8
     996:	08 95       	ret

00000998 <__subsf3>:
     998:	50 58       	subi	r21, 0x80	; 128

0000099a <__addsf3>:
     99a:	bb 27       	eor	r27, r27
     99c:	aa 27       	eor	r26, r26
     99e:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <__addsf3x>
     9a2:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__fp_round>
     9a6:	0e 94 b5 05 	call	0xb6a	; 0xb6a <__fp_pscA>
     9aa:	38 f0       	brcs	.+14     	; 0x9ba <__addsf3+0x20>
     9ac:	0e 94 bc 05 	call	0xb78	; 0xb78 <__fp_pscB>
     9b0:	20 f0       	brcs	.+8      	; 0x9ba <__addsf3+0x20>
     9b2:	39 f4       	brne	.+14     	; 0x9c2 <__addsf3+0x28>
     9b4:	9f 3f       	cpi	r25, 0xFF	; 255
     9b6:	19 f4       	brne	.+6      	; 0x9be <__addsf3+0x24>
     9b8:	26 f4       	brtc	.+8      	; 0x9c2 <__addsf3+0x28>
     9ba:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__fp_nan>
     9be:	0e f4       	brtc	.+2      	; 0x9c2 <__addsf3+0x28>
     9c0:	e0 95       	com	r30
     9c2:	e7 fb       	bst	r30, 7
     9c4:	0c 94 ac 05 	jmp	0xb58	; 0xb58 <__fp_inf>

000009c8 <__addsf3x>:
     9c8:	e9 2f       	mov	r30, r25
     9ca:	0e 94 d4 05 	call	0xba8	; 0xba8 <__fp_split3>
     9ce:	58 f3       	brcs	.-42     	; 0x9a6 <__addsf3+0xc>
     9d0:	ba 17       	cp	r27, r26
     9d2:	62 07       	cpc	r22, r18
     9d4:	73 07       	cpc	r23, r19
     9d6:	84 07       	cpc	r24, r20
     9d8:	95 07       	cpc	r25, r21
     9da:	20 f0       	brcs	.+8      	; 0x9e4 <__addsf3x+0x1c>
     9dc:	79 f4       	brne	.+30     	; 0x9fc <__addsf3x+0x34>
     9de:	a6 f5       	brtc	.+104    	; 0xa48 <__addsf3x+0x80>
     9e0:	0c 94 f6 05 	jmp	0xbec	; 0xbec <__fp_zero>
     9e4:	0e f4       	brtc	.+2      	; 0x9e8 <__addsf3x+0x20>
     9e6:	e0 95       	com	r30
     9e8:	0b 2e       	mov	r0, r27
     9ea:	ba 2f       	mov	r27, r26
     9ec:	a0 2d       	mov	r26, r0
     9ee:	0b 01       	movw	r0, r22
     9f0:	b9 01       	movw	r22, r18
     9f2:	90 01       	movw	r18, r0
     9f4:	0c 01       	movw	r0, r24
     9f6:	ca 01       	movw	r24, r20
     9f8:	a0 01       	movw	r20, r0
     9fa:	11 24       	eor	r1, r1
     9fc:	ff 27       	eor	r31, r31
     9fe:	59 1b       	sub	r21, r25
     a00:	99 f0       	breq	.+38     	; 0xa28 <__addsf3x+0x60>
     a02:	59 3f       	cpi	r21, 0xF9	; 249
     a04:	50 f4       	brcc	.+20     	; 0xa1a <__addsf3x+0x52>
     a06:	50 3e       	cpi	r21, 0xE0	; 224
     a08:	68 f1       	brcs	.+90     	; 0xa64 <__addsf3x+0x9c>
     a0a:	1a 16       	cp	r1, r26
     a0c:	f0 40       	sbci	r31, 0x00	; 0
     a0e:	a2 2f       	mov	r26, r18
     a10:	23 2f       	mov	r18, r19
     a12:	34 2f       	mov	r19, r20
     a14:	44 27       	eor	r20, r20
     a16:	58 5f       	subi	r21, 0xF8	; 248
     a18:	f3 cf       	rjmp	.-26     	; 0xa00 <__addsf3x+0x38>
     a1a:	46 95       	lsr	r20
     a1c:	37 95       	ror	r19
     a1e:	27 95       	ror	r18
     a20:	a7 95       	ror	r26
     a22:	f0 40       	sbci	r31, 0x00	; 0
     a24:	53 95       	inc	r21
     a26:	c9 f7       	brne	.-14     	; 0xa1a <__addsf3x+0x52>
     a28:	7e f4       	brtc	.+30     	; 0xa48 <__addsf3x+0x80>
     a2a:	1f 16       	cp	r1, r31
     a2c:	ba 0b       	sbc	r27, r26
     a2e:	62 0b       	sbc	r22, r18
     a30:	73 0b       	sbc	r23, r19
     a32:	84 0b       	sbc	r24, r20
     a34:	ba f0       	brmi	.+46     	; 0xa64 <__addsf3x+0x9c>
     a36:	91 50       	subi	r25, 0x01	; 1
     a38:	a1 f0       	breq	.+40     	; 0xa62 <__addsf3x+0x9a>
     a3a:	ff 0f       	add	r31, r31
     a3c:	bb 1f       	adc	r27, r27
     a3e:	66 1f       	adc	r22, r22
     a40:	77 1f       	adc	r23, r23
     a42:	88 1f       	adc	r24, r24
     a44:	c2 f7       	brpl	.-16     	; 0xa36 <__addsf3x+0x6e>
     a46:	0e c0       	rjmp	.+28     	; 0xa64 <__addsf3x+0x9c>
     a48:	ba 0f       	add	r27, r26
     a4a:	62 1f       	adc	r22, r18
     a4c:	73 1f       	adc	r23, r19
     a4e:	84 1f       	adc	r24, r20
     a50:	48 f4       	brcc	.+18     	; 0xa64 <__addsf3x+0x9c>
     a52:	87 95       	ror	r24
     a54:	77 95       	ror	r23
     a56:	67 95       	ror	r22
     a58:	b7 95       	ror	r27
     a5a:	f7 95       	ror	r31
     a5c:	9e 3f       	cpi	r25, 0xFE	; 254
     a5e:	08 f0       	brcs	.+2      	; 0xa62 <__addsf3x+0x9a>
     a60:	b0 cf       	rjmp	.-160    	; 0x9c2 <__addsf3+0x28>
     a62:	93 95       	inc	r25
     a64:	88 0f       	add	r24, r24
     a66:	08 f0       	brcs	.+2      	; 0xa6a <__addsf3x+0xa2>
     a68:	99 27       	eor	r25, r25
     a6a:	ee 0f       	add	r30, r30
     a6c:	97 95       	ror	r25
     a6e:	87 95       	ror	r24
     a70:	08 95       	ret

00000a72 <__fixsfsi>:
     a72:	0e 94 40 05 	call	0xa80	; 0xa80 <__fixunssfsi>
     a76:	68 94       	set
     a78:	b1 11       	cpse	r27, r1
     a7a:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__fp_szero>
     a7e:	08 95       	ret

00000a80 <__fixunssfsi>:
     a80:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <__fp_splitA>
     a84:	88 f0       	brcs	.+34     	; 0xaa8 <__fixunssfsi+0x28>
     a86:	9f 57       	subi	r25, 0x7F	; 127
     a88:	98 f0       	brcs	.+38     	; 0xab0 <__fixunssfsi+0x30>
     a8a:	b9 2f       	mov	r27, r25
     a8c:	99 27       	eor	r25, r25
     a8e:	b7 51       	subi	r27, 0x17	; 23
     a90:	b0 f0       	brcs	.+44     	; 0xabe <__fixunssfsi+0x3e>
     a92:	e1 f0       	breq	.+56     	; 0xacc <__fixunssfsi+0x4c>
     a94:	66 0f       	add	r22, r22
     a96:	77 1f       	adc	r23, r23
     a98:	88 1f       	adc	r24, r24
     a9a:	99 1f       	adc	r25, r25
     a9c:	1a f0       	brmi	.+6      	; 0xaa4 <__fixunssfsi+0x24>
     a9e:	ba 95       	dec	r27
     aa0:	c9 f7       	brne	.-14     	; 0xa94 <__fixunssfsi+0x14>
     aa2:	14 c0       	rjmp	.+40     	; 0xacc <__fixunssfsi+0x4c>
     aa4:	b1 30       	cpi	r27, 0x01	; 1
     aa6:	91 f0       	breq	.+36     	; 0xacc <__fixunssfsi+0x4c>
     aa8:	0e 94 f6 05 	call	0xbec	; 0xbec <__fp_zero>
     aac:	b1 e0       	ldi	r27, 0x01	; 1
     aae:	08 95       	ret
     ab0:	0c 94 f6 05 	jmp	0xbec	; 0xbec <__fp_zero>
     ab4:	67 2f       	mov	r22, r23
     ab6:	78 2f       	mov	r23, r24
     ab8:	88 27       	eor	r24, r24
     aba:	b8 5f       	subi	r27, 0xF8	; 248
     abc:	39 f0       	breq	.+14     	; 0xacc <__fixunssfsi+0x4c>
     abe:	b9 3f       	cpi	r27, 0xF9	; 249
     ac0:	cc f3       	brlt	.-14     	; 0xab4 <__fixunssfsi+0x34>
     ac2:	86 95       	lsr	r24
     ac4:	77 95       	ror	r23
     ac6:	67 95       	ror	r22
     ac8:	b3 95       	inc	r27
     aca:	d9 f7       	brne	.-10     	; 0xac2 <__fixunssfsi+0x42>
     acc:	3e f4       	brtc	.+14     	; 0xadc <__fixunssfsi+0x5c>
     ace:	90 95       	com	r25
     ad0:	80 95       	com	r24
     ad2:	70 95       	com	r23
     ad4:	61 95       	neg	r22
     ad6:	7f 4f       	sbci	r23, 0xFF	; 255
     ad8:	8f 4f       	sbci	r24, 0xFF	; 255
     ada:	9f 4f       	sbci	r25, 0xFF	; 255
     adc:	08 95       	ret

00000ade <__floatunsisf>:
     ade:	e8 94       	clt
     ae0:	09 c0       	rjmp	.+18     	; 0xaf4 <__floatsisf+0x12>

00000ae2 <__floatsisf>:
     ae2:	97 fb       	bst	r25, 7
     ae4:	3e f4       	brtc	.+14     	; 0xaf4 <__floatsisf+0x12>
     ae6:	90 95       	com	r25
     ae8:	80 95       	com	r24
     aea:	70 95       	com	r23
     aec:	61 95       	neg	r22
     aee:	7f 4f       	sbci	r23, 0xFF	; 255
     af0:	8f 4f       	sbci	r24, 0xFF	; 255
     af2:	9f 4f       	sbci	r25, 0xFF	; 255
     af4:	99 23       	and	r25, r25
     af6:	a9 f0       	breq	.+42     	; 0xb22 <__floatsisf+0x40>
     af8:	f9 2f       	mov	r31, r25
     afa:	96 e9       	ldi	r25, 0x96	; 150
     afc:	bb 27       	eor	r27, r27
     afe:	93 95       	inc	r25
     b00:	f6 95       	lsr	r31
     b02:	87 95       	ror	r24
     b04:	77 95       	ror	r23
     b06:	67 95       	ror	r22
     b08:	b7 95       	ror	r27
     b0a:	f1 11       	cpse	r31, r1
     b0c:	f8 cf       	rjmp	.-16     	; 0xafe <__floatsisf+0x1c>
     b0e:	fa f4       	brpl	.+62     	; 0xb4e <__floatsisf+0x6c>
     b10:	bb 0f       	add	r27, r27
     b12:	11 f4       	brne	.+4      	; 0xb18 <__floatsisf+0x36>
     b14:	60 ff       	sbrs	r22, 0
     b16:	1b c0       	rjmp	.+54     	; 0xb4e <__floatsisf+0x6c>
     b18:	6f 5f       	subi	r22, 0xFF	; 255
     b1a:	7f 4f       	sbci	r23, 0xFF	; 255
     b1c:	8f 4f       	sbci	r24, 0xFF	; 255
     b1e:	9f 4f       	sbci	r25, 0xFF	; 255
     b20:	16 c0       	rjmp	.+44     	; 0xb4e <__floatsisf+0x6c>
     b22:	88 23       	and	r24, r24
     b24:	11 f0       	breq	.+4      	; 0xb2a <__floatsisf+0x48>
     b26:	96 e9       	ldi	r25, 0x96	; 150
     b28:	11 c0       	rjmp	.+34     	; 0xb4c <__floatsisf+0x6a>
     b2a:	77 23       	and	r23, r23
     b2c:	21 f0       	breq	.+8      	; 0xb36 <__floatsisf+0x54>
     b2e:	9e e8       	ldi	r25, 0x8E	; 142
     b30:	87 2f       	mov	r24, r23
     b32:	76 2f       	mov	r23, r22
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__floatsisf+0x5e>
     b36:	66 23       	and	r22, r22
     b38:	71 f0       	breq	.+28     	; 0xb56 <__floatsisf+0x74>
     b3a:	96 e8       	ldi	r25, 0x86	; 134
     b3c:	86 2f       	mov	r24, r22
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	60 e0       	ldi	r22, 0x00	; 0
     b42:	2a f0       	brmi	.+10     	; 0xb4e <__floatsisf+0x6c>
     b44:	9a 95       	dec	r25
     b46:	66 0f       	add	r22, r22
     b48:	77 1f       	adc	r23, r23
     b4a:	88 1f       	adc	r24, r24
     b4c:	da f7       	brpl	.-10     	; 0xb44 <__floatsisf+0x62>
     b4e:	88 0f       	add	r24, r24
     b50:	96 95       	lsr	r25
     b52:	87 95       	ror	r24
     b54:	97 f9       	bld	r25, 7
     b56:	08 95       	ret

00000b58 <__fp_inf>:
     b58:	97 f9       	bld	r25, 7
     b5a:	9f 67       	ori	r25, 0x7F	; 127
     b5c:	80 e8       	ldi	r24, 0x80	; 128
     b5e:	70 e0       	ldi	r23, 0x00	; 0
     b60:	60 e0       	ldi	r22, 0x00	; 0
     b62:	08 95       	ret

00000b64 <__fp_nan>:
     b64:	9f ef       	ldi	r25, 0xFF	; 255
     b66:	80 ec       	ldi	r24, 0xC0	; 192
     b68:	08 95       	ret

00000b6a <__fp_pscA>:
     b6a:	00 24       	eor	r0, r0
     b6c:	0a 94       	dec	r0
     b6e:	16 16       	cp	r1, r22
     b70:	17 06       	cpc	r1, r23
     b72:	18 06       	cpc	r1, r24
     b74:	09 06       	cpc	r0, r25
     b76:	08 95       	ret

00000b78 <__fp_pscB>:
     b78:	00 24       	eor	r0, r0
     b7a:	0a 94       	dec	r0
     b7c:	12 16       	cp	r1, r18
     b7e:	13 06       	cpc	r1, r19
     b80:	14 06       	cpc	r1, r20
     b82:	05 06       	cpc	r0, r21
     b84:	08 95       	ret

00000b86 <__fp_round>:
     b86:	09 2e       	mov	r0, r25
     b88:	03 94       	inc	r0
     b8a:	00 0c       	add	r0, r0
     b8c:	11 f4       	brne	.+4      	; 0xb92 <__fp_round+0xc>
     b8e:	88 23       	and	r24, r24
     b90:	52 f0       	brmi	.+20     	; 0xba6 <__fp_round+0x20>
     b92:	bb 0f       	add	r27, r27
     b94:	40 f4       	brcc	.+16     	; 0xba6 <__fp_round+0x20>
     b96:	bf 2b       	or	r27, r31
     b98:	11 f4       	brne	.+4      	; 0xb9e <__fp_round+0x18>
     b9a:	60 ff       	sbrs	r22, 0
     b9c:	04 c0       	rjmp	.+8      	; 0xba6 <__fp_round+0x20>
     b9e:	6f 5f       	subi	r22, 0xFF	; 255
     ba0:	7f 4f       	sbci	r23, 0xFF	; 255
     ba2:	8f 4f       	sbci	r24, 0xFF	; 255
     ba4:	9f 4f       	sbci	r25, 0xFF	; 255
     ba6:	08 95       	ret

00000ba8 <__fp_split3>:
     ba8:	57 fd       	sbrc	r21, 7
     baa:	90 58       	subi	r25, 0x80	; 128
     bac:	44 0f       	add	r20, r20
     bae:	55 1f       	adc	r21, r21
     bb0:	59 f0       	breq	.+22     	; 0xbc8 <__fp_splitA+0x10>
     bb2:	5f 3f       	cpi	r21, 0xFF	; 255
     bb4:	71 f0       	breq	.+28     	; 0xbd2 <__fp_splitA+0x1a>
     bb6:	47 95       	ror	r20

00000bb8 <__fp_splitA>:
     bb8:	88 0f       	add	r24, r24
     bba:	97 fb       	bst	r25, 7
     bbc:	99 1f       	adc	r25, r25
     bbe:	61 f0       	breq	.+24     	; 0xbd8 <__fp_splitA+0x20>
     bc0:	9f 3f       	cpi	r25, 0xFF	; 255
     bc2:	79 f0       	breq	.+30     	; 0xbe2 <__fp_splitA+0x2a>
     bc4:	87 95       	ror	r24
     bc6:	08 95       	ret
     bc8:	12 16       	cp	r1, r18
     bca:	13 06       	cpc	r1, r19
     bcc:	14 06       	cpc	r1, r20
     bce:	55 1f       	adc	r21, r21
     bd0:	f2 cf       	rjmp	.-28     	; 0xbb6 <__fp_split3+0xe>
     bd2:	46 95       	lsr	r20
     bd4:	f1 df       	rcall	.-30     	; 0xbb8 <__fp_splitA>
     bd6:	08 c0       	rjmp	.+16     	; 0xbe8 <__fp_splitA+0x30>
     bd8:	16 16       	cp	r1, r22
     bda:	17 06       	cpc	r1, r23
     bdc:	18 06       	cpc	r1, r24
     bde:	99 1f       	adc	r25, r25
     be0:	f1 cf       	rjmp	.-30     	; 0xbc4 <__fp_splitA+0xc>
     be2:	86 95       	lsr	r24
     be4:	71 05       	cpc	r23, r1
     be6:	61 05       	cpc	r22, r1
     be8:	08 94       	sec
     bea:	08 95       	ret

00000bec <__fp_zero>:
     bec:	e8 94       	clt

00000bee <__fp_szero>:
     bee:	bb 27       	eor	r27, r27
     bf0:	66 27       	eor	r22, r22
     bf2:	77 27       	eor	r23, r23
     bf4:	cb 01       	movw	r24, r22
     bf6:	97 f9       	bld	r25, 7
     bf8:	08 95       	ret

00000bfa <__mulsf3>:
     bfa:	0e 94 10 06 	call	0xc20	; 0xc20 <__mulsf3x>
     bfe:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__fp_round>
     c02:	0e 94 b5 05 	call	0xb6a	; 0xb6a <__fp_pscA>
     c06:	38 f0       	brcs	.+14     	; 0xc16 <__mulsf3+0x1c>
     c08:	0e 94 bc 05 	call	0xb78	; 0xb78 <__fp_pscB>
     c0c:	20 f0       	brcs	.+8      	; 0xc16 <__mulsf3+0x1c>
     c0e:	95 23       	and	r25, r21
     c10:	11 f0       	breq	.+4      	; 0xc16 <__mulsf3+0x1c>
     c12:	0c 94 ac 05 	jmp	0xb58	; 0xb58 <__fp_inf>
     c16:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__fp_nan>
     c1a:	11 24       	eor	r1, r1
     c1c:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__fp_szero>

00000c20 <__mulsf3x>:
     c20:	0e 94 d4 05 	call	0xba8	; 0xba8 <__fp_split3>
     c24:	70 f3       	brcs	.-36     	; 0xc02 <__mulsf3+0x8>

00000c26 <__mulsf3_pse>:
     c26:	95 9f       	mul	r25, r21
     c28:	c1 f3       	breq	.-16     	; 0xc1a <__mulsf3+0x20>
     c2a:	95 0f       	add	r25, r21
     c2c:	50 e0       	ldi	r21, 0x00	; 0
     c2e:	55 1f       	adc	r21, r21
     c30:	62 9f       	mul	r22, r18
     c32:	f0 01       	movw	r30, r0
     c34:	72 9f       	mul	r23, r18
     c36:	bb 27       	eor	r27, r27
     c38:	f0 0d       	add	r31, r0
     c3a:	b1 1d       	adc	r27, r1
     c3c:	63 9f       	mul	r22, r19
     c3e:	aa 27       	eor	r26, r26
     c40:	f0 0d       	add	r31, r0
     c42:	b1 1d       	adc	r27, r1
     c44:	aa 1f       	adc	r26, r26
     c46:	64 9f       	mul	r22, r20
     c48:	66 27       	eor	r22, r22
     c4a:	b0 0d       	add	r27, r0
     c4c:	a1 1d       	adc	r26, r1
     c4e:	66 1f       	adc	r22, r22
     c50:	82 9f       	mul	r24, r18
     c52:	22 27       	eor	r18, r18
     c54:	b0 0d       	add	r27, r0
     c56:	a1 1d       	adc	r26, r1
     c58:	62 1f       	adc	r22, r18
     c5a:	73 9f       	mul	r23, r19
     c5c:	b0 0d       	add	r27, r0
     c5e:	a1 1d       	adc	r26, r1
     c60:	62 1f       	adc	r22, r18
     c62:	83 9f       	mul	r24, r19
     c64:	a0 0d       	add	r26, r0
     c66:	61 1d       	adc	r22, r1
     c68:	22 1f       	adc	r18, r18
     c6a:	74 9f       	mul	r23, r20
     c6c:	33 27       	eor	r19, r19
     c6e:	a0 0d       	add	r26, r0
     c70:	61 1d       	adc	r22, r1
     c72:	23 1f       	adc	r18, r19
     c74:	84 9f       	mul	r24, r20
     c76:	60 0d       	add	r22, r0
     c78:	21 1d       	adc	r18, r1
     c7a:	82 2f       	mov	r24, r18
     c7c:	76 2f       	mov	r23, r22
     c7e:	6a 2f       	mov	r22, r26
     c80:	11 24       	eor	r1, r1
     c82:	9f 57       	subi	r25, 0x7F	; 127
     c84:	50 40       	sbci	r21, 0x00	; 0
     c86:	9a f0       	brmi	.+38     	; 0xcae <__mulsf3_pse+0x88>
     c88:	f1 f0       	breq	.+60     	; 0xcc6 <__mulsf3_pse+0xa0>
     c8a:	88 23       	and	r24, r24
     c8c:	4a f0       	brmi	.+18     	; 0xca0 <__mulsf3_pse+0x7a>
     c8e:	ee 0f       	add	r30, r30
     c90:	ff 1f       	adc	r31, r31
     c92:	bb 1f       	adc	r27, r27
     c94:	66 1f       	adc	r22, r22
     c96:	77 1f       	adc	r23, r23
     c98:	88 1f       	adc	r24, r24
     c9a:	91 50       	subi	r25, 0x01	; 1
     c9c:	50 40       	sbci	r21, 0x00	; 0
     c9e:	a9 f7       	brne	.-22     	; 0xc8a <__mulsf3_pse+0x64>
     ca0:	9e 3f       	cpi	r25, 0xFE	; 254
     ca2:	51 05       	cpc	r21, r1
     ca4:	80 f0       	brcs	.+32     	; 0xcc6 <__mulsf3_pse+0xa0>
     ca6:	0c 94 ac 05 	jmp	0xb58	; 0xb58 <__fp_inf>
     caa:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__fp_szero>
     cae:	5f 3f       	cpi	r21, 0xFF	; 255
     cb0:	e4 f3       	brlt	.-8      	; 0xcaa <__mulsf3_pse+0x84>
     cb2:	98 3e       	cpi	r25, 0xE8	; 232
     cb4:	d4 f3       	brlt	.-12     	; 0xcaa <__mulsf3_pse+0x84>
     cb6:	86 95       	lsr	r24
     cb8:	77 95       	ror	r23
     cba:	67 95       	ror	r22
     cbc:	b7 95       	ror	r27
     cbe:	f7 95       	ror	r31
     cc0:	e7 95       	ror	r30
     cc2:	9f 5f       	subi	r25, 0xFF	; 255
     cc4:	c1 f7       	brne	.-16     	; 0xcb6 <__mulsf3_pse+0x90>
     cc6:	fe 2b       	or	r31, r30
     cc8:	88 0f       	add	r24, r24
     cca:	91 1d       	adc	r25, r1
     ccc:	96 95       	lsr	r25
     cce:	87 95       	ror	r24
     cd0:	97 f9       	bld	r25, 7
     cd2:	08 95       	ret

00000cd4 <trunc>:
     cd4:	0e 94 9e 06 	call	0xd3c	; 0xd3c <__fp_trunc>
     cd8:	30 f0       	brcs	.+12     	; 0xce6 <trunc+0x12>
     cda:	9f 37       	cpi	r25, 0x7F	; 127
     cdc:	10 f4       	brcc	.+4      	; 0xce2 <trunc+0xe>
     cde:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__fp_szero>
     ce2:	0c 94 75 06 	jmp	0xcea	; 0xcea <__fp_mintl>
     ce6:	0c 94 90 06 	jmp	0xd20	; 0xd20 <__fp_mpack>

00000cea <__fp_mintl>:
     cea:	88 23       	and	r24, r24
     cec:	71 f4       	brne	.+28     	; 0xd0a <__fp_mintl+0x20>
     cee:	77 23       	and	r23, r23
     cf0:	21 f0       	breq	.+8      	; 0xcfa <__fp_mintl+0x10>
     cf2:	98 50       	subi	r25, 0x08	; 8
     cf4:	87 2b       	or	r24, r23
     cf6:	76 2f       	mov	r23, r22
     cf8:	07 c0       	rjmp	.+14     	; 0xd08 <__fp_mintl+0x1e>
     cfa:	66 23       	and	r22, r22
     cfc:	11 f4       	brne	.+4      	; 0xd02 <__fp_mintl+0x18>
     cfe:	99 27       	eor	r25, r25
     d00:	0d c0       	rjmp	.+26     	; 0xd1c <__fp_mintl+0x32>
     d02:	90 51       	subi	r25, 0x10	; 16
     d04:	86 2b       	or	r24, r22
     d06:	70 e0       	ldi	r23, 0x00	; 0
     d08:	60 e0       	ldi	r22, 0x00	; 0
     d0a:	2a f0       	brmi	.+10     	; 0xd16 <__fp_mintl+0x2c>
     d0c:	9a 95       	dec	r25
     d0e:	66 0f       	add	r22, r22
     d10:	77 1f       	adc	r23, r23
     d12:	88 1f       	adc	r24, r24
     d14:	da f7       	brpl	.-10     	; 0xd0c <__fp_mintl+0x22>
     d16:	88 0f       	add	r24, r24
     d18:	96 95       	lsr	r25
     d1a:	87 95       	ror	r24
     d1c:	97 f9       	bld	r25, 7
     d1e:	08 95       	ret

00000d20 <__fp_mpack>:
     d20:	9f 3f       	cpi	r25, 0xFF	; 255
     d22:	31 f0       	breq	.+12     	; 0xd30 <__fp_mpack_finite+0xc>

00000d24 <__fp_mpack_finite>:
     d24:	91 50       	subi	r25, 0x01	; 1
     d26:	20 f4       	brcc	.+8      	; 0xd30 <__fp_mpack_finite+0xc>
     d28:	87 95       	ror	r24
     d2a:	77 95       	ror	r23
     d2c:	67 95       	ror	r22
     d2e:	b7 95       	ror	r27
     d30:	88 0f       	add	r24, r24
     d32:	91 1d       	adc	r25, r1
     d34:	96 95       	lsr	r25
     d36:	87 95       	ror	r24
     d38:	97 f9       	bld	r25, 7
     d3a:	08 95       	ret

00000d3c <__fp_trunc>:
     d3c:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <__fp_splitA>
     d40:	a0 f0       	brcs	.+40     	; 0xd6a <__fp_trunc+0x2e>
     d42:	be e7       	ldi	r27, 0x7E	; 126
     d44:	b9 17       	cp	r27, r25
     d46:	88 f4       	brcc	.+34     	; 0xd6a <__fp_trunc+0x2e>
     d48:	bb 27       	eor	r27, r27
     d4a:	9f 38       	cpi	r25, 0x8F	; 143
     d4c:	60 f4       	brcc	.+24     	; 0xd66 <__fp_trunc+0x2a>
     d4e:	16 16       	cp	r1, r22
     d50:	b1 1d       	adc	r27, r1
     d52:	67 2f       	mov	r22, r23
     d54:	78 2f       	mov	r23, r24
     d56:	88 27       	eor	r24, r24
     d58:	98 5f       	subi	r25, 0xF8	; 248
     d5a:	f7 cf       	rjmp	.-18     	; 0xd4a <__fp_trunc+0xe>
     d5c:	86 95       	lsr	r24
     d5e:	77 95       	ror	r23
     d60:	67 95       	ror	r22
     d62:	b1 1d       	adc	r27, r1
     d64:	93 95       	inc	r25
     d66:	96 39       	cpi	r25, 0x96	; 150
     d68:	c8 f3       	brcs	.-14     	; 0xd5c <__fp_trunc+0x20>
     d6a:	08 95       	ret

00000d6c <__udivmodsi4>:
     d6c:	a1 e2       	ldi	r26, 0x21	; 33
     d6e:	1a 2e       	mov	r1, r26
     d70:	aa 1b       	sub	r26, r26
     d72:	bb 1b       	sub	r27, r27
     d74:	fd 01       	movw	r30, r26
     d76:	0d c0       	rjmp	.+26     	; 0xd92 <__udivmodsi4_ep>

00000d78 <__udivmodsi4_loop>:
     d78:	aa 1f       	adc	r26, r26
     d7a:	bb 1f       	adc	r27, r27
     d7c:	ee 1f       	adc	r30, r30
     d7e:	ff 1f       	adc	r31, r31
     d80:	a2 17       	cp	r26, r18
     d82:	b3 07       	cpc	r27, r19
     d84:	e4 07       	cpc	r30, r20
     d86:	f5 07       	cpc	r31, r21
     d88:	20 f0       	brcs	.+8      	; 0xd92 <__udivmodsi4_ep>
     d8a:	a2 1b       	sub	r26, r18
     d8c:	b3 0b       	sbc	r27, r19
     d8e:	e4 0b       	sbc	r30, r20
     d90:	f5 0b       	sbc	r31, r21

00000d92 <__udivmodsi4_ep>:
     d92:	66 1f       	adc	r22, r22
     d94:	77 1f       	adc	r23, r23
     d96:	88 1f       	adc	r24, r24
     d98:	99 1f       	adc	r25, r25
     d9a:	1a 94       	dec	r1
     d9c:	69 f7       	brne	.-38     	; 0xd78 <__udivmodsi4_loop>
     d9e:	60 95       	com	r22
     da0:	70 95       	com	r23
     da2:	80 95       	com	r24
     da4:	90 95       	com	r25
     da6:	9b 01       	movw	r18, r22
     da8:	ac 01       	movw	r20, r24
     daa:	bd 01       	movw	r22, r26
     dac:	cf 01       	movw	r24, r30
     dae:	08 95       	ret

00000db0 <__tablejump2__>:
     db0:	ee 0f       	add	r30, r30
     db2:	ff 1f       	adc	r31, r31
     db4:	05 90       	lpm	r0, Z+
     db6:	f4 91       	lpm	r31, Z
     db8:	e0 2d       	mov	r30, r0
     dba:	09 94       	ijmp

00000dbc <sprintf>:
     dbc:	ae e0       	ldi	r26, 0x0E	; 14
     dbe:	b0 e0       	ldi	r27, 0x00	; 0
     dc0:	e4 ee       	ldi	r30, 0xE4	; 228
     dc2:	f6 e0       	ldi	r31, 0x06	; 6
     dc4:	0c 94 9f 09 	jmp	0x133e	; 0x133e <__prologue_saves__+0x1c>
     dc8:	0d 89       	ldd	r16, Y+21	; 0x15
     dca:	1e 89       	ldd	r17, Y+22	; 0x16
     dcc:	86 e0       	ldi	r24, 0x06	; 6
     dce:	8c 83       	std	Y+4, r24	; 0x04
     dd0:	1a 83       	std	Y+2, r17	; 0x02
     dd2:	09 83       	std	Y+1, r16	; 0x01
     dd4:	8f ef       	ldi	r24, 0xFF	; 255
     dd6:	9f e7       	ldi	r25, 0x7F	; 127
     dd8:	9e 83       	std	Y+6, r25	; 0x06
     dda:	8d 83       	std	Y+5, r24	; 0x05
     ddc:	ae 01       	movw	r20, r28
     dde:	47 5e       	subi	r20, 0xE7	; 231
     de0:	5f 4f       	sbci	r21, 0xFF	; 255
     de2:	6f 89       	ldd	r22, Y+23	; 0x17
     de4:	78 8d       	ldd	r23, Y+24	; 0x18
     de6:	ce 01       	movw	r24, r28
     de8:	01 96       	adiw	r24, 0x01	; 1
     dea:	0e 94 00 07 	call	0xe00	; 0xe00 <vfprintf>
     dee:	ef 81       	ldd	r30, Y+7	; 0x07
     df0:	f8 85       	ldd	r31, Y+8	; 0x08
     df2:	e0 0f       	add	r30, r16
     df4:	f1 1f       	adc	r31, r17
     df6:	10 82       	st	Z, r1
     df8:	2e 96       	adiw	r28, 0x0e	; 14
     dfa:	e4 e0       	ldi	r30, 0x04	; 4
     dfc:	0c 94 bb 09 	jmp	0x1376	; 0x1376 <__epilogue_restores__+0x1c>

00000e00 <vfprintf>:
     e00:	ab e0       	ldi	r26, 0x0B	; 11
     e02:	b0 e0       	ldi	r27, 0x00	; 0
     e04:	e6 e0       	ldi	r30, 0x06	; 6
     e06:	f7 e0       	ldi	r31, 0x07	; 7
     e08:	0c 94 91 09 	jmp	0x1322	; 0x1322 <__prologue_saves__>
     e0c:	6c 01       	movw	r12, r24
     e0e:	7b 01       	movw	r14, r22
     e10:	8a 01       	movw	r16, r20
     e12:	fc 01       	movw	r30, r24
     e14:	17 82       	std	Z+7, r1	; 0x07
     e16:	16 82       	std	Z+6, r1	; 0x06
     e18:	83 81       	ldd	r24, Z+3	; 0x03
     e1a:	81 ff       	sbrs	r24, 1
     e1c:	cc c1       	rjmp	.+920    	; 0x11b6 <vfprintf+0x3b6>
     e1e:	ce 01       	movw	r24, r28
     e20:	01 96       	adiw	r24, 0x01	; 1
     e22:	3c 01       	movw	r6, r24
     e24:	f6 01       	movw	r30, r12
     e26:	93 81       	ldd	r25, Z+3	; 0x03
     e28:	f7 01       	movw	r30, r14
     e2a:	93 fd       	sbrc	r25, 3
     e2c:	85 91       	lpm	r24, Z+
     e2e:	93 ff       	sbrs	r25, 3
     e30:	81 91       	ld	r24, Z+
     e32:	7f 01       	movw	r14, r30
     e34:	88 23       	and	r24, r24
     e36:	09 f4       	brne	.+2      	; 0xe3a <vfprintf+0x3a>
     e38:	ba c1       	rjmp	.+884    	; 0x11ae <vfprintf+0x3ae>
     e3a:	85 32       	cpi	r24, 0x25	; 37
     e3c:	39 f4       	brne	.+14     	; 0xe4c <vfprintf+0x4c>
     e3e:	93 fd       	sbrc	r25, 3
     e40:	85 91       	lpm	r24, Z+
     e42:	93 ff       	sbrs	r25, 3
     e44:	81 91       	ld	r24, Z+
     e46:	7f 01       	movw	r14, r30
     e48:	85 32       	cpi	r24, 0x25	; 37
     e4a:	29 f4       	brne	.+10     	; 0xe56 <vfprintf+0x56>
     e4c:	b6 01       	movw	r22, r12
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	0e 94 f7 08 	call	0x11ee	; 0x11ee <fputc>
     e54:	e7 cf       	rjmp	.-50     	; 0xe24 <vfprintf+0x24>
     e56:	91 2c       	mov	r9, r1
     e58:	21 2c       	mov	r2, r1
     e5a:	31 2c       	mov	r3, r1
     e5c:	ff e1       	ldi	r31, 0x1F	; 31
     e5e:	f3 15       	cp	r31, r3
     e60:	d8 f0       	brcs	.+54     	; 0xe98 <vfprintf+0x98>
     e62:	8b 32       	cpi	r24, 0x2B	; 43
     e64:	79 f0       	breq	.+30     	; 0xe84 <vfprintf+0x84>
     e66:	38 f4       	brcc	.+14     	; 0xe76 <vfprintf+0x76>
     e68:	80 32       	cpi	r24, 0x20	; 32
     e6a:	79 f0       	breq	.+30     	; 0xe8a <vfprintf+0x8a>
     e6c:	83 32       	cpi	r24, 0x23	; 35
     e6e:	a1 f4       	brne	.+40     	; 0xe98 <vfprintf+0x98>
     e70:	23 2d       	mov	r18, r3
     e72:	20 61       	ori	r18, 0x10	; 16
     e74:	1d c0       	rjmp	.+58     	; 0xeb0 <vfprintf+0xb0>
     e76:	8d 32       	cpi	r24, 0x2D	; 45
     e78:	61 f0       	breq	.+24     	; 0xe92 <vfprintf+0x92>
     e7a:	80 33       	cpi	r24, 0x30	; 48
     e7c:	69 f4       	brne	.+26     	; 0xe98 <vfprintf+0x98>
     e7e:	23 2d       	mov	r18, r3
     e80:	21 60       	ori	r18, 0x01	; 1
     e82:	16 c0       	rjmp	.+44     	; 0xeb0 <vfprintf+0xb0>
     e84:	83 2d       	mov	r24, r3
     e86:	82 60       	ori	r24, 0x02	; 2
     e88:	38 2e       	mov	r3, r24
     e8a:	e3 2d       	mov	r30, r3
     e8c:	e4 60       	ori	r30, 0x04	; 4
     e8e:	3e 2e       	mov	r3, r30
     e90:	2a c0       	rjmp	.+84     	; 0xee6 <vfprintf+0xe6>
     e92:	f3 2d       	mov	r31, r3
     e94:	f8 60       	ori	r31, 0x08	; 8
     e96:	1d c0       	rjmp	.+58     	; 0xed2 <vfprintf+0xd2>
     e98:	37 fc       	sbrc	r3, 7
     e9a:	2d c0       	rjmp	.+90     	; 0xef6 <vfprintf+0xf6>
     e9c:	20 ed       	ldi	r18, 0xD0	; 208
     e9e:	28 0f       	add	r18, r24
     ea0:	2a 30       	cpi	r18, 0x0A	; 10
     ea2:	40 f0       	brcs	.+16     	; 0xeb4 <vfprintf+0xb4>
     ea4:	8e 32       	cpi	r24, 0x2E	; 46
     ea6:	b9 f4       	brne	.+46     	; 0xed6 <vfprintf+0xd6>
     ea8:	36 fc       	sbrc	r3, 6
     eaa:	81 c1       	rjmp	.+770    	; 0x11ae <vfprintf+0x3ae>
     eac:	23 2d       	mov	r18, r3
     eae:	20 64       	ori	r18, 0x40	; 64
     eb0:	32 2e       	mov	r3, r18
     eb2:	19 c0       	rjmp	.+50     	; 0xee6 <vfprintf+0xe6>
     eb4:	36 fe       	sbrs	r3, 6
     eb6:	06 c0       	rjmp	.+12     	; 0xec4 <vfprintf+0xc4>
     eb8:	8a e0       	ldi	r24, 0x0A	; 10
     eba:	98 9e       	mul	r9, r24
     ebc:	20 0d       	add	r18, r0
     ebe:	11 24       	eor	r1, r1
     ec0:	92 2e       	mov	r9, r18
     ec2:	11 c0       	rjmp	.+34     	; 0xee6 <vfprintf+0xe6>
     ec4:	ea e0       	ldi	r30, 0x0A	; 10
     ec6:	2e 9e       	mul	r2, r30
     ec8:	20 0d       	add	r18, r0
     eca:	11 24       	eor	r1, r1
     ecc:	22 2e       	mov	r2, r18
     ece:	f3 2d       	mov	r31, r3
     ed0:	f0 62       	ori	r31, 0x20	; 32
     ed2:	3f 2e       	mov	r3, r31
     ed4:	08 c0       	rjmp	.+16     	; 0xee6 <vfprintf+0xe6>
     ed6:	8c 36       	cpi	r24, 0x6C	; 108
     ed8:	21 f4       	brne	.+8      	; 0xee2 <vfprintf+0xe2>
     eda:	83 2d       	mov	r24, r3
     edc:	80 68       	ori	r24, 0x80	; 128
     ede:	38 2e       	mov	r3, r24
     ee0:	02 c0       	rjmp	.+4      	; 0xee6 <vfprintf+0xe6>
     ee2:	88 36       	cpi	r24, 0x68	; 104
     ee4:	41 f4       	brne	.+16     	; 0xef6 <vfprintf+0xf6>
     ee6:	f7 01       	movw	r30, r14
     ee8:	93 fd       	sbrc	r25, 3
     eea:	85 91       	lpm	r24, Z+
     eec:	93 ff       	sbrs	r25, 3
     eee:	81 91       	ld	r24, Z+
     ef0:	7f 01       	movw	r14, r30
     ef2:	81 11       	cpse	r24, r1
     ef4:	b3 cf       	rjmp	.-154    	; 0xe5c <vfprintf+0x5c>
     ef6:	98 2f       	mov	r25, r24
     ef8:	9f 7d       	andi	r25, 0xDF	; 223
     efa:	95 54       	subi	r25, 0x45	; 69
     efc:	93 30       	cpi	r25, 0x03	; 3
     efe:	28 f4       	brcc	.+10     	; 0xf0a <vfprintf+0x10a>
     f00:	0c 5f       	subi	r16, 0xFC	; 252
     f02:	1f 4f       	sbci	r17, 0xFF	; 255
     f04:	9f e3       	ldi	r25, 0x3F	; 63
     f06:	99 83       	std	Y+1, r25	; 0x01
     f08:	0d c0       	rjmp	.+26     	; 0xf24 <vfprintf+0x124>
     f0a:	83 36       	cpi	r24, 0x63	; 99
     f0c:	31 f0       	breq	.+12     	; 0xf1a <vfprintf+0x11a>
     f0e:	83 37       	cpi	r24, 0x73	; 115
     f10:	71 f0       	breq	.+28     	; 0xf2e <vfprintf+0x12e>
     f12:	83 35       	cpi	r24, 0x53	; 83
     f14:	09 f0       	breq	.+2      	; 0xf18 <vfprintf+0x118>
     f16:	59 c0       	rjmp	.+178    	; 0xfca <vfprintf+0x1ca>
     f18:	21 c0       	rjmp	.+66     	; 0xf5c <vfprintf+0x15c>
     f1a:	f8 01       	movw	r30, r16
     f1c:	80 81       	ld	r24, Z
     f1e:	89 83       	std	Y+1, r24	; 0x01
     f20:	0e 5f       	subi	r16, 0xFE	; 254
     f22:	1f 4f       	sbci	r17, 0xFF	; 255
     f24:	88 24       	eor	r8, r8
     f26:	83 94       	inc	r8
     f28:	91 2c       	mov	r9, r1
     f2a:	53 01       	movw	r10, r6
     f2c:	13 c0       	rjmp	.+38     	; 0xf54 <vfprintf+0x154>
     f2e:	28 01       	movw	r4, r16
     f30:	f2 e0       	ldi	r31, 0x02	; 2
     f32:	4f 0e       	add	r4, r31
     f34:	51 1c       	adc	r5, r1
     f36:	f8 01       	movw	r30, r16
     f38:	a0 80       	ld	r10, Z
     f3a:	b1 80       	ldd	r11, Z+1	; 0x01
     f3c:	36 fe       	sbrs	r3, 6
     f3e:	03 c0       	rjmp	.+6      	; 0xf46 <vfprintf+0x146>
     f40:	69 2d       	mov	r22, r9
     f42:	70 e0       	ldi	r23, 0x00	; 0
     f44:	02 c0       	rjmp	.+4      	; 0xf4a <vfprintf+0x14a>
     f46:	6f ef       	ldi	r22, 0xFF	; 255
     f48:	7f ef       	ldi	r23, 0xFF	; 255
     f4a:	c5 01       	movw	r24, r10
     f4c:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <strnlen>
     f50:	4c 01       	movw	r8, r24
     f52:	82 01       	movw	r16, r4
     f54:	f3 2d       	mov	r31, r3
     f56:	ff 77       	andi	r31, 0x7F	; 127
     f58:	3f 2e       	mov	r3, r31
     f5a:	16 c0       	rjmp	.+44     	; 0xf88 <vfprintf+0x188>
     f5c:	28 01       	movw	r4, r16
     f5e:	22 e0       	ldi	r18, 0x02	; 2
     f60:	42 0e       	add	r4, r18
     f62:	51 1c       	adc	r5, r1
     f64:	f8 01       	movw	r30, r16
     f66:	a0 80       	ld	r10, Z
     f68:	b1 80       	ldd	r11, Z+1	; 0x01
     f6a:	36 fe       	sbrs	r3, 6
     f6c:	03 c0       	rjmp	.+6      	; 0xf74 <vfprintf+0x174>
     f6e:	69 2d       	mov	r22, r9
     f70:	70 e0       	ldi	r23, 0x00	; 0
     f72:	02 c0       	rjmp	.+4      	; 0xf78 <vfprintf+0x178>
     f74:	6f ef       	ldi	r22, 0xFF	; 255
     f76:	7f ef       	ldi	r23, 0xFF	; 255
     f78:	c5 01       	movw	r24, r10
     f7a:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <strnlen_P>
     f7e:	4c 01       	movw	r8, r24
     f80:	f3 2d       	mov	r31, r3
     f82:	f0 68       	ori	r31, 0x80	; 128
     f84:	3f 2e       	mov	r3, r31
     f86:	82 01       	movw	r16, r4
     f88:	33 fc       	sbrc	r3, 3
     f8a:	1b c0       	rjmp	.+54     	; 0xfc2 <vfprintf+0x1c2>
     f8c:	82 2d       	mov	r24, r2
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	88 16       	cp	r8, r24
     f92:	99 06       	cpc	r9, r25
     f94:	b0 f4       	brcc	.+44     	; 0xfc2 <vfprintf+0x1c2>
     f96:	b6 01       	movw	r22, r12
     f98:	80 e2       	ldi	r24, 0x20	; 32
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	0e 94 f7 08 	call	0x11ee	; 0x11ee <fputc>
     fa0:	2a 94       	dec	r2
     fa2:	f4 cf       	rjmp	.-24     	; 0xf8c <vfprintf+0x18c>
     fa4:	f5 01       	movw	r30, r10
     fa6:	37 fc       	sbrc	r3, 7
     fa8:	85 91       	lpm	r24, Z+
     faa:	37 fe       	sbrs	r3, 7
     fac:	81 91       	ld	r24, Z+
     fae:	5f 01       	movw	r10, r30
     fb0:	b6 01       	movw	r22, r12
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	0e 94 f7 08 	call	0x11ee	; 0x11ee <fputc>
     fb8:	21 10       	cpse	r2, r1
     fba:	2a 94       	dec	r2
     fbc:	21 e0       	ldi	r18, 0x01	; 1
     fbe:	82 1a       	sub	r8, r18
     fc0:	91 08       	sbc	r9, r1
     fc2:	81 14       	cp	r8, r1
     fc4:	91 04       	cpc	r9, r1
     fc6:	71 f7       	brne	.-36     	; 0xfa4 <vfprintf+0x1a4>
     fc8:	e8 c0       	rjmp	.+464    	; 0x119a <vfprintf+0x39a>
     fca:	84 36       	cpi	r24, 0x64	; 100
     fcc:	11 f0       	breq	.+4      	; 0xfd2 <vfprintf+0x1d2>
     fce:	89 36       	cpi	r24, 0x69	; 105
     fd0:	41 f5       	brne	.+80     	; 0x1022 <vfprintf+0x222>
     fd2:	f8 01       	movw	r30, r16
     fd4:	37 fe       	sbrs	r3, 7
     fd6:	07 c0       	rjmp	.+14     	; 0xfe6 <vfprintf+0x1e6>
     fd8:	60 81       	ld	r22, Z
     fda:	71 81       	ldd	r23, Z+1	; 0x01
     fdc:	82 81       	ldd	r24, Z+2	; 0x02
     fde:	93 81       	ldd	r25, Z+3	; 0x03
     fe0:	0c 5f       	subi	r16, 0xFC	; 252
     fe2:	1f 4f       	sbci	r17, 0xFF	; 255
     fe4:	08 c0       	rjmp	.+16     	; 0xff6 <vfprintf+0x1f6>
     fe6:	60 81       	ld	r22, Z
     fe8:	71 81       	ldd	r23, Z+1	; 0x01
     fea:	07 2e       	mov	r0, r23
     fec:	00 0c       	add	r0, r0
     fee:	88 0b       	sbc	r24, r24
     ff0:	99 0b       	sbc	r25, r25
     ff2:	0e 5f       	subi	r16, 0xFE	; 254
     ff4:	1f 4f       	sbci	r17, 0xFF	; 255
     ff6:	f3 2d       	mov	r31, r3
     ff8:	ff 76       	andi	r31, 0x6F	; 111
     ffa:	3f 2e       	mov	r3, r31
     ffc:	97 ff       	sbrs	r25, 7
     ffe:	09 c0       	rjmp	.+18     	; 0x1012 <vfprintf+0x212>
    1000:	90 95       	com	r25
    1002:	80 95       	com	r24
    1004:	70 95       	com	r23
    1006:	61 95       	neg	r22
    1008:	7f 4f       	sbci	r23, 0xFF	; 255
    100a:	8f 4f       	sbci	r24, 0xFF	; 255
    100c:	9f 4f       	sbci	r25, 0xFF	; 255
    100e:	f0 68       	ori	r31, 0x80	; 128
    1010:	3f 2e       	mov	r3, r31
    1012:	2a e0       	ldi	r18, 0x0A	; 10
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	a3 01       	movw	r20, r6
    1018:	0e 94 33 09 	call	0x1266	; 0x1266 <__ultoa_invert>
    101c:	88 2e       	mov	r8, r24
    101e:	86 18       	sub	r8, r6
    1020:	45 c0       	rjmp	.+138    	; 0x10ac <vfprintf+0x2ac>
    1022:	85 37       	cpi	r24, 0x75	; 117
    1024:	31 f4       	brne	.+12     	; 0x1032 <vfprintf+0x232>
    1026:	23 2d       	mov	r18, r3
    1028:	2f 7e       	andi	r18, 0xEF	; 239
    102a:	b2 2e       	mov	r11, r18
    102c:	2a e0       	ldi	r18, 0x0A	; 10
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	25 c0       	rjmp	.+74     	; 0x107c <vfprintf+0x27c>
    1032:	93 2d       	mov	r25, r3
    1034:	99 7f       	andi	r25, 0xF9	; 249
    1036:	b9 2e       	mov	r11, r25
    1038:	8f 36       	cpi	r24, 0x6F	; 111
    103a:	c1 f0       	breq	.+48     	; 0x106c <vfprintf+0x26c>
    103c:	18 f4       	brcc	.+6      	; 0x1044 <vfprintf+0x244>
    103e:	88 35       	cpi	r24, 0x58	; 88
    1040:	79 f0       	breq	.+30     	; 0x1060 <vfprintf+0x260>
    1042:	b5 c0       	rjmp	.+362    	; 0x11ae <vfprintf+0x3ae>
    1044:	80 37       	cpi	r24, 0x70	; 112
    1046:	19 f0       	breq	.+6      	; 0x104e <vfprintf+0x24e>
    1048:	88 37       	cpi	r24, 0x78	; 120
    104a:	21 f0       	breq	.+8      	; 0x1054 <vfprintf+0x254>
    104c:	b0 c0       	rjmp	.+352    	; 0x11ae <vfprintf+0x3ae>
    104e:	e9 2f       	mov	r30, r25
    1050:	e0 61       	ori	r30, 0x10	; 16
    1052:	be 2e       	mov	r11, r30
    1054:	b4 fe       	sbrs	r11, 4
    1056:	0d c0       	rjmp	.+26     	; 0x1072 <vfprintf+0x272>
    1058:	fb 2d       	mov	r31, r11
    105a:	f4 60       	ori	r31, 0x04	; 4
    105c:	bf 2e       	mov	r11, r31
    105e:	09 c0       	rjmp	.+18     	; 0x1072 <vfprintf+0x272>
    1060:	34 fe       	sbrs	r3, 4
    1062:	0a c0       	rjmp	.+20     	; 0x1078 <vfprintf+0x278>
    1064:	29 2f       	mov	r18, r25
    1066:	26 60       	ori	r18, 0x06	; 6
    1068:	b2 2e       	mov	r11, r18
    106a:	06 c0       	rjmp	.+12     	; 0x1078 <vfprintf+0x278>
    106c:	28 e0       	ldi	r18, 0x08	; 8
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	05 c0       	rjmp	.+10     	; 0x107c <vfprintf+0x27c>
    1072:	20 e1       	ldi	r18, 0x10	; 16
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	02 c0       	rjmp	.+4      	; 0x107c <vfprintf+0x27c>
    1078:	20 e1       	ldi	r18, 0x10	; 16
    107a:	32 e0       	ldi	r19, 0x02	; 2
    107c:	f8 01       	movw	r30, r16
    107e:	b7 fe       	sbrs	r11, 7
    1080:	07 c0       	rjmp	.+14     	; 0x1090 <vfprintf+0x290>
    1082:	60 81       	ld	r22, Z
    1084:	71 81       	ldd	r23, Z+1	; 0x01
    1086:	82 81       	ldd	r24, Z+2	; 0x02
    1088:	93 81       	ldd	r25, Z+3	; 0x03
    108a:	0c 5f       	subi	r16, 0xFC	; 252
    108c:	1f 4f       	sbci	r17, 0xFF	; 255
    108e:	06 c0       	rjmp	.+12     	; 0x109c <vfprintf+0x29c>
    1090:	60 81       	ld	r22, Z
    1092:	71 81       	ldd	r23, Z+1	; 0x01
    1094:	80 e0       	ldi	r24, 0x00	; 0
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	0e 5f       	subi	r16, 0xFE	; 254
    109a:	1f 4f       	sbci	r17, 0xFF	; 255
    109c:	a3 01       	movw	r20, r6
    109e:	0e 94 33 09 	call	0x1266	; 0x1266 <__ultoa_invert>
    10a2:	88 2e       	mov	r8, r24
    10a4:	86 18       	sub	r8, r6
    10a6:	fb 2d       	mov	r31, r11
    10a8:	ff 77       	andi	r31, 0x7F	; 127
    10aa:	3f 2e       	mov	r3, r31
    10ac:	36 fe       	sbrs	r3, 6
    10ae:	0d c0       	rjmp	.+26     	; 0x10ca <vfprintf+0x2ca>
    10b0:	23 2d       	mov	r18, r3
    10b2:	2e 7f       	andi	r18, 0xFE	; 254
    10b4:	a2 2e       	mov	r10, r18
    10b6:	89 14       	cp	r8, r9
    10b8:	58 f4       	brcc	.+22     	; 0x10d0 <vfprintf+0x2d0>
    10ba:	34 fe       	sbrs	r3, 4
    10bc:	0b c0       	rjmp	.+22     	; 0x10d4 <vfprintf+0x2d4>
    10be:	32 fc       	sbrc	r3, 2
    10c0:	09 c0       	rjmp	.+18     	; 0x10d4 <vfprintf+0x2d4>
    10c2:	83 2d       	mov	r24, r3
    10c4:	8e 7e       	andi	r24, 0xEE	; 238
    10c6:	a8 2e       	mov	r10, r24
    10c8:	05 c0       	rjmp	.+10     	; 0x10d4 <vfprintf+0x2d4>
    10ca:	b8 2c       	mov	r11, r8
    10cc:	a3 2c       	mov	r10, r3
    10ce:	03 c0       	rjmp	.+6      	; 0x10d6 <vfprintf+0x2d6>
    10d0:	b8 2c       	mov	r11, r8
    10d2:	01 c0       	rjmp	.+2      	; 0x10d6 <vfprintf+0x2d6>
    10d4:	b9 2c       	mov	r11, r9
    10d6:	a4 fe       	sbrs	r10, 4
    10d8:	0f c0       	rjmp	.+30     	; 0x10f8 <vfprintf+0x2f8>
    10da:	fe 01       	movw	r30, r28
    10dc:	e8 0d       	add	r30, r8
    10de:	f1 1d       	adc	r31, r1
    10e0:	80 81       	ld	r24, Z
    10e2:	80 33       	cpi	r24, 0x30	; 48
    10e4:	21 f4       	brne	.+8      	; 0x10ee <vfprintf+0x2ee>
    10e6:	9a 2d       	mov	r25, r10
    10e8:	99 7e       	andi	r25, 0xE9	; 233
    10ea:	a9 2e       	mov	r10, r25
    10ec:	09 c0       	rjmp	.+18     	; 0x1100 <vfprintf+0x300>
    10ee:	a2 fe       	sbrs	r10, 2
    10f0:	06 c0       	rjmp	.+12     	; 0x10fe <vfprintf+0x2fe>
    10f2:	b3 94       	inc	r11
    10f4:	b3 94       	inc	r11
    10f6:	04 c0       	rjmp	.+8      	; 0x1100 <vfprintf+0x300>
    10f8:	8a 2d       	mov	r24, r10
    10fa:	86 78       	andi	r24, 0x86	; 134
    10fc:	09 f0       	breq	.+2      	; 0x1100 <vfprintf+0x300>
    10fe:	b3 94       	inc	r11
    1100:	a3 fc       	sbrc	r10, 3
    1102:	11 c0       	rjmp	.+34     	; 0x1126 <vfprintf+0x326>
    1104:	a0 fe       	sbrs	r10, 0
    1106:	06 c0       	rjmp	.+12     	; 0x1114 <vfprintf+0x314>
    1108:	b2 14       	cp	r11, r2
    110a:	88 f4       	brcc	.+34     	; 0x112e <vfprintf+0x32e>
    110c:	28 0c       	add	r2, r8
    110e:	92 2c       	mov	r9, r2
    1110:	9b 18       	sub	r9, r11
    1112:	0e c0       	rjmp	.+28     	; 0x1130 <vfprintf+0x330>
    1114:	b2 14       	cp	r11, r2
    1116:	60 f4       	brcc	.+24     	; 0x1130 <vfprintf+0x330>
    1118:	b6 01       	movw	r22, r12
    111a:	80 e2       	ldi	r24, 0x20	; 32
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	0e 94 f7 08 	call	0x11ee	; 0x11ee <fputc>
    1122:	b3 94       	inc	r11
    1124:	f7 cf       	rjmp	.-18     	; 0x1114 <vfprintf+0x314>
    1126:	b2 14       	cp	r11, r2
    1128:	18 f4       	brcc	.+6      	; 0x1130 <vfprintf+0x330>
    112a:	2b 18       	sub	r2, r11
    112c:	02 c0       	rjmp	.+4      	; 0x1132 <vfprintf+0x332>
    112e:	98 2c       	mov	r9, r8
    1130:	21 2c       	mov	r2, r1
    1132:	a4 fe       	sbrs	r10, 4
    1134:	10 c0       	rjmp	.+32     	; 0x1156 <vfprintf+0x356>
    1136:	b6 01       	movw	r22, r12
    1138:	80 e3       	ldi	r24, 0x30	; 48
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	0e 94 f7 08 	call	0x11ee	; 0x11ee <fputc>
    1140:	a2 fe       	sbrs	r10, 2
    1142:	17 c0       	rjmp	.+46     	; 0x1172 <vfprintf+0x372>
    1144:	a1 fc       	sbrc	r10, 1
    1146:	03 c0       	rjmp	.+6      	; 0x114e <vfprintf+0x34e>
    1148:	88 e7       	ldi	r24, 0x78	; 120
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	02 c0       	rjmp	.+4      	; 0x1152 <vfprintf+0x352>
    114e:	88 e5       	ldi	r24, 0x58	; 88
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	b6 01       	movw	r22, r12
    1154:	0c c0       	rjmp	.+24     	; 0x116e <vfprintf+0x36e>
    1156:	8a 2d       	mov	r24, r10
    1158:	86 78       	andi	r24, 0x86	; 134
    115a:	59 f0       	breq	.+22     	; 0x1172 <vfprintf+0x372>
    115c:	a1 fe       	sbrs	r10, 1
    115e:	02 c0       	rjmp	.+4      	; 0x1164 <vfprintf+0x364>
    1160:	8b e2       	ldi	r24, 0x2B	; 43
    1162:	01 c0       	rjmp	.+2      	; 0x1166 <vfprintf+0x366>
    1164:	80 e2       	ldi	r24, 0x20	; 32
    1166:	a7 fc       	sbrc	r10, 7
    1168:	8d e2       	ldi	r24, 0x2D	; 45
    116a:	b6 01       	movw	r22, r12
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	0e 94 f7 08 	call	0x11ee	; 0x11ee <fputc>
    1172:	89 14       	cp	r8, r9
    1174:	38 f4       	brcc	.+14     	; 0x1184 <vfprintf+0x384>
    1176:	b6 01       	movw	r22, r12
    1178:	80 e3       	ldi	r24, 0x30	; 48
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	0e 94 f7 08 	call	0x11ee	; 0x11ee <fputc>
    1180:	9a 94       	dec	r9
    1182:	f7 cf       	rjmp	.-18     	; 0x1172 <vfprintf+0x372>
    1184:	8a 94       	dec	r8
    1186:	f3 01       	movw	r30, r6
    1188:	e8 0d       	add	r30, r8
    118a:	f1 1d       	adc	r31, r1
    118c:	80 81       	ld	r24, Z
    118e:	b6 01       	movw	r22, r12
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	0e 94 f7 08 	call	0x11ee	; 0x11ee <fputc>
    1196:	81 10       	cpse	r8, r1
    1198:	f5 cf       	rjmp	.-22     	; 0x1184 <vfprintf+0x384>
    119a:	22 20       	and	r2, r2
    119c:	09 f4       	brne	.+2      	; 0x11a0 <vfprintf+0x3a0>
    119e:	42 ce       	rjmp	.-892    	; 0xe24 <vfprintf+0x24>
    11a0:	b6 01       	movw	r22, r12
    11a2:	80 e2       	ldi	r24, 0x20	; 32
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	0e 94 f7 08 	call	0x11ee	; 0x11ee <fputc>
    11aa:	2a 94       	dec	r2
    11ac:	f6 cf       	rjmp	.-20     	; 0x119a <vfprintf+0x39a>
    11ae:	f6 01       	movw	r30, r12
    11b0:	86 81       	ldd	r24, Z+6	; 0x06
    11b2:	97 81       	ldd	r25, Z+7	; 0x07
    11b4:	02 c0       	rjmp	.+4      	; 0x11ba <vfprintf+0x3ba>
    11b6:	8f ef       	ldi	r24, 0xFF	; 255
    11b8:	9f ef       	ldi	r25, 0xFF	; 255
    11ba:	2b 96       	adiw	r28, 0x0b	; 11
    11bc:	e2 e1       	ldi	r30, 0x12	; 18
    11be:	0c 94 ad 09 	jmp	0x135a	; 0x135a <__epilogue_restores__>

000011c2 <strnlen_P>:
    11c2:	fc 01       	movw	r30, r24
    11c4:	05 90       	lpm	r0, Z+
    11c6:	61 50       	subi	r22, 0x01	; 1
    11c8:	70 40       	sbci	r23, 0x00	; 0
    11ca:	01 10       	cpse	r0, r1
    11cc:	d8 f7       	brcc	.-10     	; 0x11c4 <strnlen_P+0x2>
    11ce:	80 95       	com	r24
    11d0:	90 95       	com	r25
    11d2:	8e 0f       	add	r24, r30
    11d4:	9f 1f       	adc	r25, r31
    11d6:	08 95       	ret

000011d8 <strnlen>:
    11d8:	fc 01       	movw	r30, r24
    11da:	61 50       	subi	r22, 0x01	; 1
    11dc:	70 40       	sbci	r23, 0x00	; 0
    11de:	01 90       	ld	r0, Z+
    11e0:	01 10       	cpse	r0, r1
    11e2:	d8 f7       	brcc	.-10     	; 0x11da <strnlen+0x2>
    11e4:	80 95       	com	r24
    11e6:	90 95       	com	r25
    11e8:	8e 0f       	add	r24, r30
    11ea:	9f 1f       	adc	r25, r31
    11ec:	08 95       	ret

000011ee <fputc>:
    11ee:	0f 93       	push	r16
    11f0:	1f 93       	push	r17
    11f2:	cf 93       	push	r28
    11f4:	df 93       	push	r29
    11f6:	fb 01       	movw	r30, r22
    11f8:	23 81       	ldd	r18, Z+3	; 0x03
    11fa:	21 fd       	sbrc	r18, 1
    11fc:	03 c0       	rjmp	.+6      	; 0x1204 <fputc+0x16>
    11fe:	8f ef       	ldi	r24, 0xFF	; 255
    1200:	9f ef       	ldi	r25, 0xFF	; 255
    1202:	2c c0       	rjmp	.+88     	; 0x125c <fputc+0x6e>
    1204:	22 ff       	sbrs	r18, 2
    1206:	16 c0       	rjmp	.+44     	; 0x1234 <fputc+0x46>
    1208:	46 81       	ldd	r20, Z+6	; 0x06
    120a:	57 81       	ldd	r21, Z+7	; 0x07
    120c:	24 81       	ldd	r18, Z+4	; 0x04
    120e:	35 81       	ldd	r19, Z+5	; 0x05
    1210:	42 17       	cp	r20, r18
    1212:	53 07       	cpc	r21, r19
    1214:	44 f4       	brge	.+16     	; 0x1226 <fputc+0x38>
    1216:	a0 81       	ld	r26, Z
    1218:	b1 81       	ldd	r27, Z+1	; 0x01
    121a:	9d 01       	movw	r18, r26
    121c:	2f 5f       	subi	r18, 0xFF	; 255
    121e:	3f 4f       	sbci	r19, 0xFF	; 255
    1220:	31 83       	std	Z+1, r19	; 0x01
    1222:	20 83       	st	Z, r18
    1224:	8c 93       	st	X, r24
    1226:	26 81       	ldd	r18, Z+6	; 0x06
    1228:	37 81       	ldd	r19, Z+7	; 0x07
    122a:	2f 5f       	subi	r18, 0xFF	; 255
    122c:	3f 4f       	sbci	r19, 0xFF	; 255
    122e:	37 83       	std	Z+7, r19	; 0x07
    1230:	26 83       	std	Z+6, r18	; 0x06
    1232:	14 c0       	rjmp	.+40     	; 0x125c <fputc+0x6e>
    1234:	8b 01       	movw	r16, r22
    1236:	ec 01       	movw	r28, r24
    1238:	fb 01       	movw	r30, r22
    123a:	00 84       	ldd	r0, Z+8	; 0x08
    123c:	f1 85       	ldd	r31, Z+9	; 0x09
    123e:	e0 2d       	mov	r30, r0
    1240:	09 95       	icall
    1242:	89 2b       	or	r24, r25
    1244:	e1 f6       	brne	.-72     	; 0x11fe <fputc+0x10>
    1246:	d8 01       	movw	r26, r16
    1248:	16 96       	adiw	r26, 0x06	; 6
    124a:	8d 91       	ld	r24, X+
    124c:	9c 91       	ld	r25, X
    124e:	17 97       	sbiw	r26, 0x07	; 7
    1250:	01 96       	adiw	r24, 0x01	; 1
    1252:	17 96       	adiw	r26, 0x07	; 7
    1254:	9c 93       	st	X, r25
    1256:	8e 93       	st	-X, r24
    1258:	16 97       	sbiw	r26, 0x06	; 6
    125a:	ce 01       	movw	r24, r28
    125c:	df 91       	pop	r29
    125e:	cf 91       	pop	r28
    1260:	1f 91       	pop	r17
    1262:	0f 91       	pop	r16
    1264:	08 95       	ret

00001266 <__ultoa_invert>:
    1266:	fa 01       	movw	r30, r20
    1268:	aa 27       	eor	r26, r26
    126a:	28 30       	cpi	r18, 0x08	; 8
    126c:	51 f1       	breq	.+84     	; 0x12c2 <__ultoa_invert+0x5c>
    126e:	20 31       	cpi	r18, 0x10	; 16
    1270:	81 f1       	breq	.+96     	; 0x12d2 <__ultoa_invert+0x6c>
    1272:	e8 94       	clt
    1274:	6f 93       	push	r22
    1276:	6e 7f       	andi	r22, 0xFE	; 254
    1278:	6e 5f       	subi	r22, 0xFE	; 254
    127a:	7f 4f       	sbci	r23, 0xFF	; 255
    127c:	8f 4f       	sbci	r24, 0xFF	; 255
    127e:	9f 4f       	sbci	r25, 0xFF	; 255
    1280:	af 4f       	sbci	r26, 0xFF	; 255
    1282:	b1 e0       	ldi	r27, 0x01	; 1
    1284:	3e d0       	rcall	.+124    	; 0x1302 <__ultoa_invert+0x9c>
    1286:	b4 e0       	ldi	r27, 0x04	; 4
    1288:	3c d0       	rcall	.+120    	; 0x1302 <__ultoa_invert+0x9c>
    128a:	67 0f       	add	r22, r23
    128c:	78 1f       	adc	r23, r24
    128e:	89 1f       	adc	r24, r25
    1290:	9a 1f       	adc	r25, r26
    1292:	a1 1d       	adc	r26, r1
    1294:	68 0f       	add	r22, r24
    1296:	79 1f       	adc	r23, r25
    1298:	8a 1f       	adc	r24, r26
    129a:	91 1d       	adc	r25, r1
    129c:	a1 1d       	adc	r26, r1
    129e:	6a 0f       	add	r22, r26
    12a0:	71 1d       	adc	r23, r1
    12a2:	81 1d       	adc	r24, r1
    12a4:	91 1d       	adc	r25, r1
    12a6:	a1 1d       	adc	r26, r1
    12a8:	20 d0       	rcall	.+64     	; 0x12ea <__ultoa_invert+0x84>
    12aa:	09 f4       	brne	.+2      	; 0x12ae <__ultoa_invert+0x48>
    12ac:	68 94       	set
    12ae:	3f 91       	pop	r19
    12b0:	2a e0       	ldi	r18, 0x0A	; 10
    12b2:	26 9f       	mul	r18, r22
    12b4:	11 24       	eor	r1, r1
    12b6:	30 19       	sub	r19, r0
    12b8:	30 5d       	subi	r19, 0xD0	; 208
    12ba:	31 93       	st	Z+, r19
    12bc:	de f6       	brtc	.-74     	; 0x1274 <__ultoa_invert+0xe>
    12be:	cf 01       	movw	r24, r30
    12c0:	08 95       	ret
    12c2:	46 2f       	mov	r20, r22
    12c4:	47 70       	andi	r20, 0x07	; 7
    12c6:	40 5d       	subi	r20, 0xD0	; 208
    12c8:	41 93       	st	Z+, r20
    12ca:	b3 e0       	ldi	r27, 0x03	; 3
    12cc:	0f d0       	rcall	.+30     	; 0x12ec <__ultoa_invert+0x86>
    12ce:	c9 f7       	brne	.-14     	; 0x12c2 <__ultoa_invert+0x5c>
    12d0:	f6 cf       	rjmp	.-20     	; 0x12be <__ultoa_invert+0x58>
    12d2:	46 2f       	mov	r20, r22
    12d4:	4f 70       	andi	r20, 0x0F	; 15
    12d6:	40 5d       	subi	r20, 0xD0	; 208
    12d8:	4a 33       	cpi	r20, 0x3A	; 58
    12da:	18 f0       	brcs	.+6      	; 0x12e2 <__ultoa_invert+0x7c>
    12dc:	49 5d       	subi	r20, 0xD9	; 217
    12de:	31 fd       	sbrc	r19, 1
    12e0:	40 52       	subi	r20, 0x20	; 32
    12e2:	41 93       	st	Z+, r20
    12e4:	02 d0       	rcall	.+4      	; 0x12ea <__ultoa_invert+0x84>
    12e6:	a9 f7       	brne	.-22     	; 0x12d2 <__ultoa_invert+0x6c>
    12e8:	ea cf       	rjmp	.-44     	; 0x12be <__ultoa_invert+0x58>
    12ea:	b4 e0       	ldi	r27, 0x04	; 4
    12ec:	a6 95       	lsr	r26
    12ee:	97 95       	ror	r25
    12f0:	87 95       	ror	r24
    12f2:	77 95       	ror	r23
    12f4:	67 95       	ror	r22
    12f6:	ba 95       	dec	r27
    12f8:	c9 f7       	brne	.-14     	; 0x12ec <__ultoa_invert+0x86>
    12fa:	00 97       	sbiw	r24, 0x00	; 0
    12fc:	61 05       	cpc	r22, r1
    12fe:	71 05       	cpc	r23, r1
    1300:	08 95       	ret
    1302:	9b 01       	movw	r18, r22
    1304:	ac 01       	movw	r20, r24
    1306:	0a 2e       	mov	r0, r26
    1308:	06 94       	lsr	r0
    130a:	57 95       	ror	r21
    130c:	47 95       	ror	r20
    130e:	37 95       	ror	r19
    1310:	27 95       	ror	r18
    1312:	ba 95       	dec	r27
    1314:	c9 f7       	brne	.-14     	; 0x1308 <__ultoa_invert+0xa2>
    1316:	62 0f       	add	r22, r18
    1318:	73 1f       	adc	r23, r19
    131a:	84 1f       	adc	r24, r20
    131c:	95 1f       	adc	r25, r21
    131e:	a0 1d       	adc	r26, r0
    1320:	08 95       	ret

00001322 <__prologue_saves__>:
    1322:	2f 92       	push	r2
    1324:	3f 92       	push	r3
    1326:	4f 92       	push	r4
    1328:	5f 92       	push	r5
    132a:	6f 92       	push	r6
    132c:	7f 92       	push	r7
    132e:	8f 92       	push	r8
    1330:	9f 92       	push	r9
    1332:	af 92       	push	r10
    1334:	bf 92       	push	r11
    1336:	cf 92       	push	r12
    1338:	df 92       	push	r13
    133a:	ef 92       	push	r14
    133c:	ff 92       	push	r15
    133e:	0f 93       	push	r16
    1340:	1f 93       	push	r17
    1342:	cf 93       	push	r28
    1344:	df 93       	push	r29
    1346:	cd b7       	in	r28, 0x3d	; 61
    1348:	de b7       	in	r29, 0x3e	; 62
    134a:	ca 1b       	sub	r28, r26
    134c:	db 0b       	sbc	r29, r27
    134e:	0f b6       	in	r0, 0x3f	; 63
    1350:	f8 94       	cli
    1352:	de bf       	out	0x3e, r29	; 62
    1354:	0f be       	out	0x3f, r0	; 63
    1356:	cd bf       	out	0x3d, r28	; 61
    1358:	09 94       	ijmp

0000135a <__epilogue_restores__>:
    135a:	2a 88       	ldd	r2, Y+18	; 0x12
    135c:	39 88       	ldd	r3, Y+17	; 0x11
    135e:	48 88       	ldd	r4, Y+16	; 0x10
    1360:	5f 84       	ldd	r5, Y+15	; 0x0f
    1362:	6e 84       	ldd	r6, Y+14	; 0x0e
    1364:	7d 84       	ldd	r7, Y+13	; 0x0d
    1366:	8c 84       	ldd	r8, Y+12	; 0x0c
    1368:	9b 84       	ldd	r9, Y+11	; 0x0b
    136a:	aa 84       	ldd	r10, Y+10	; 0x0a
    136c:	b9 84       	ldd	r11, Y+9	; 0x09
    136e:	c8 84       	ldd	r12, Y+8	; 0x08
    1370:	df 80       	ldd	r13, Y+7	; 0x07
    1372:	ee 80       	ldd	r14, Y+6	; 0x06
    1374:	fd 80       	ldd	r15, Y+5	; 0x05
    1376:	0c 81       	ldd	r16, Y+4	; 0x04
    1378:	1b 81       	ldd	r17, Y+3	; 0x03
    137a:	aa 81       	ldd	r26, Y+2	; 0x02
    137c:	b9 81       	ldd	r27, Y+1	; 0x01
    137e:	ce 0f       	add	r28, r30
    1380:	d1 1d       	adc	r29, r1
    1382:	0f b6       	in	r0, 0x3f	; 63
    1384:	f8 94       	cli
    1386:	de bf       	out	0x3e, r29	; 62
    1388:	0f be       	out	0x3f, r0	; 63
    138a:	cd bf       	out	0x3d, r28	; 61
    138c:	ed 01       	movw	r28, r26
    138e:	08 95       	ret

00001390 <__do_global_dtors>:
    1390:	10 e0       	ldi	r17, 0x00	; 0
    1392:	c3 e4       	ldi	r28, 0x43	; 67
    1394:	d0 e0       	ldi	r29, 0x00	; 0
    1396:	04 c0       	rjmp	.+8      	; 0x13a0 <__do_global_dtors+0x10>
    1398:	fe 01       	movw	r30, r28
    139a:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__tablejump2__>
    139e:	21 96       	adiw	r28, 0x01	; 1
    13a0:	c4 34       	cpi	r28, 0x44	; 68
    13a2:	d1 07       	cpc	r29, r17
    13a4:	c9 f7       	brne	.-14     	; 0x1398 <__do_global_dtors+0x8>
    13a6:	f8 94       	cli

000013a8 <__stop_program>:
    13a8:	ff cf       	rjmp	.-2      	; 0x13a8 <__stop_program>
