
pwm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000148  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000178  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009b8  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000774  00000000  00000000  00000bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000025b  00000000  00000000  00001344  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000098  00000000  00000000  000015a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000041b  00000000  00000000  00001638  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000094  00000000  00000000  00001a53  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001ae7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 78 00 	jmp	0xf0	; 0xf0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#define set_bit(adress,bit) (adress|=(1<<bit))
#define clr_bit(adress,bit) (adress&=~(1<<bit))
#define tst_bit(adress,bit) (adress&(1<<bit))

int main(void)
{
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	1f 92       	push	r1
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
	Motor myMotor;
  8a:	ce 01       	movw	r24, r28
  8c:	01 96       	adiw	r24, 0x01	; 1
  8e:	0e 94 5f 00 	call	0xbe	; 0xbe <_ZN5MotorC1Ev>
	myMotor.setup();
  92:	ce 01       	movw	r24, r28
  94:	01 96       	adiw	r24, 0x01	; 1
  96:	0e 94 60 00 	call	0xc0	; 0xc0 <_ZN5Motor5setupEv>
	myMotor.turnOff();
  9a:	ce 01       	movw	r24, r28
  9c:	01 96       	adiw	r24, 0x01	; 1
  9e:	0e 94 75 00 	call	0xea	; 0xea <_ZN5Motor7turnOffEv>
	
	DDRD = 0x00;
  a2:	1a b8       	out	0x0a, r1	; 10
    /* Replace with your application code */
    while (1) 
    {
		if(tst_bit(PIND, PORTD2) > 0)
  a4:	4a 9b       	sbis	0x09, 2	; 9
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <main+0x30>
			myMotor.turnOn();
  a8:	ce 01       	movw	r24, r28
  aa:	01 96       	adiw	r24, 0x01	; 1
  ac:	0e 94 71 00 	call	0xe2	; 0xe2 <_ZN5Motor6turnOnEv>
		if(tst_bit(PIND, PORTD3) > 0)
  b0:	4b 9b       	sbis	0x09, 3	; 9
  b2:	f8 cf       	rjmp	.-16     	; 0xa4 <main+0x24>
			myMotor.turnOff();
  b4:	ce 01       	movw	r24, r28
  b6:	01 96       	adiw	r24, 0x01	; 1
  b8:	0e 94 75 00 	call	0xea	; 0xea <_ZN5Motor7turnOffEv>
  bc:	f3 cf       	rjmp	.-26     	; 0xa4 <main+0x24>

000000be <_ZN5MotorC1Ev>:
Motor::Motor()
{
	//ctor
}

Motor::~Motor()
  be:	08 95       	ret

000000c0 <_ZN5Motor5setupEv>:
	//dtor
}

void Motor::setup()
{
	DDRB |= (1<<PORTB3); //Sets the PB3 as output (OC2A)
  c0:	84 b1       	in	r24, 0x04	; 4
  c2:	88 60       	ori	r24, 0x08	; 8
  c4:	84 b9       	out	0x04, r24	; 4
	
	TCCR2A = (1<<WGM21); //Sets the timer mode as CTC
  c6:	e0 eb       	ldi	r30, 0xB0	; 176
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	82 e0       	ldi	r24, 0x02	; 2
  cc:	80 83       	st	Z, r24
	TCCR2A |= (1<<COM2A0); //Toggle output on compare match
  ce:	80 81       	ld	r24, Z
  d0:	80 64       	ori	r24, 0x40	; 64
  d2:	80 83       	st	Z, r24
	TCCR2B = (1<<CS21) | (1<<CS20); //Set prescale = 64
  d4:	83 e0       	ldi	r24, 0x03	; 3
  d6:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	OCR2A = 124; //Sets the compare value at 124
  da:	8c e7       	ldi	r24, 0x7C	; 124
  dc:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
  e0:	08 95       	ret

000000e2 <_ZN5Motor6turnOnEv>:
}

void Motor::turnOn()
{
	TCCR2B = (1<<CS21) | (1<<CS20); //Set prescale = 64
  e2:	83 e0       	ldi	r24, 0x03	; 3
  e4:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
  e8:	08 95       	ret

000000ea <_ZN5Motor7turnOffEv>:
}

void Motor::turnOff()
{
	TCCR2B = 0;//Disable timer 2
  ea:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
  ee:	08 95       	ret

000000f0 <_exit>:
  f0:	f8 94       	cli

000000f2 <__stop_program>:
  f2:	ff cf       	rjmp	.-2      	; 0xf2 <__stop_program>
